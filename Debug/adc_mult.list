
adc_mult.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000838  08004ae8  08004ae8  00014ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005324  08005324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  08005328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004e0  2000006c  08005394  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000054c  08005394  0002054c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014147  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000290c  00000000  00000000  000341dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000057e1  00000000  00000000  00036ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007a0  00000000  00000000  0003c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d38  00000000  00000000  0003ca70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005c4d  00000000  00000000  0003d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002d1e  00000000  00000000  000433f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00046113  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d7c  00000000  00000000  00046190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000006c 	.word	0x2000006c
 800015c:	00000000 	.word	0x00000000
 8000160:	08004acc 	.word	0x08004acc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000070 	.word	0x20000070
 800017c:	08004acc 	.word	0x08004acc

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__gedf2>:
 8000914:	f04f 3cff 	mov.w	ip, #4294967295
 8000918:	e006      	b.n	8000928 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__ledf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	e002      	b.n	8000928 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__cmpdf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	f84d cd04 	str.w	ip, [sp, #-4]!
 800092c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000938:	bf18      	it	ne
 800093a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093e:	d01b      	beq.n	8000978 <__cmpdf2+0x54>
 8000940:	b001      	add	sp, #4
 8000942:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000946:	bf0c      	ite	eq
 8000948:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800094c:	ea91 0f03 	teqne	r1, r3
 8000950:	bf02      	ittt	eq
 8000952:	ea90 0f02 	teqeq	r0, r2
 8000956:	2000      	moveq	r0, #0
 8000958:	4770      	bxeq	lr
 800095a:	f110 0f00 	cmn.w	r0, #0
 800095e:	ea91 0f03 	teq	r1, r3
 8000962:	bf58      	it	pl
 8000964:	4299      	cmppl	r1, r3
 8000966:	bf08      	it	eq
 8000968:	4290      	cmpeq	r0, r2
 800096a:	bf2c      	ite	cs
 800096c:	17d8      	asrcs	r0, r3, #31
 800096e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000972:	f040 0001 	orr.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800097c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000980:	d102      	bne.n	8000988 <__cmpdf2+0x64>
 8000982:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000986:	d107      	bne.n	8000998 <__cmpdf2+0x74>
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d1d6      	bne.n	8000940 <__cmpdf2+0x1c>
 8000992:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000996:	d0d3      	beq.n	8000940 <__cmpdf2+0x1c>
 8000998:	f85d 0b04 	ldr.w	r0, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_cdrcmple>:
 80009a0:	4684      	mov	ip, r0
 80009a2:	4610      	mov	r0, r2
 80009a4:	4662      	mov	r2, ip
 80009a6:	468c      	mov	ip, r1
 80009a8:	4619      	mov	r1, r3
 80009aa:	4663      	mov	r3, ip
 80009ac:	e000      	b.n	80009b0 <__aeabi_cdcmpeq>
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdcmpeq>:
 80009b0:	b501      	push	{r0, lr}
 80009b2:	f7ff ffb7 	bl	8000924 <__cmpdf2>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	bf48      	it	mi
 80009ba:	f110 0f00 	cmnmi.w	r0, #0
 80009be:	bd01      	pop	{r0, pc}

080009c0 <__aeabi_dcmpeq>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff fff4 	bl	80009b0 <__aeabi_cdcmpeq>
 80009c8:	bf0c      	ite	eq
 80009ca:	2001      	moveq	r0, #1
 80009cc:	2000      	movne	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmplt>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffea 	bl	80009b0 <__aeabi_cdcmpeq>
 80009dc:	bf34      	ite	cc
 80009de:	2001      	movcc	r0, #1
 80009e0:	2000      	movcs	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmple>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffe0 	bl	80009b0 <__aeabi_cdcmpeq>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpge>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffce 	bl	80009a0 <__aeabi_cdrcmple>
 8000a04:	bf94      	ite	ls
 8000a06:	2001      	movls	r0, #1
 8000a08:	2000      	movhi	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpgt>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff ffc4 	bl	80009a0 <__aeabi_cdrcmple>
 8000a18:	bf34      	ite	cc
 8000a1a:	2001      	movcc	r0, #1
 8000a1c:	2000      	movcs	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmpun>:
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	d102      	bne.n	8000a34 <__aeabi_dcmpun+0x10>
 8000a2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a32:	d10a      	bne.n	8000a4a <__aeabi_dcmpun+0x26>
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__aeabi_dcmpun+0x20>
 8000a3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a42:	d102      	bne.n	8000a4a <__aeabi_dcmpun+0x26>
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	f04f 0001 	mov.w	r0, #1
 8000a4e:	4770      	bx	lr

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_frsub>:
 8000a90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	e002      	b.n	8000a9c <__addsf3>
 8000a96:	bf00      	nop

08000a98 <__aeabi_fsub>:
 8000a98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a9c <__addsf3>:
 8000a9c:	0042      	lsls	r2, r0, #1
 8000a9e:	bf1f      	itttt	ne
 8000aa0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa4:	ea92 0f03 	teqne	r2, r3
 8000aa8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab0:	d06a      	beq.n	8000b88 <__addsf3+0xec>
 8000ab2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aba:	bfc1      	itttt	gt
 8000abc:	18d2      	addgt	r2, r2, r3
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	4048      	eorgt	r0, r1
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	bfb8      	it	lt
 8000ac6:	425b      	neglt	r3, r3
 8000ac8:	2b19      	cmp	r3, #25
 8000aca:	bf88      	it	hi
 8000acc:	4770      	bxhi	lr
 8000ace:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ae6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aea:	bf18      	it	ne
 8000aec:	4249      	negne	r1, r1
 8000aee:	ea92 0f03 	teq	r2, r3
 8000af2:	d03f      	beq.n	8000b74 <__addsf3+0xd8>
 8000af4:	f1a2 0201 	sub.w	r2, r2, #1
 8000af8:	fa41 fc03 	asr.w	ip, r1, r3
 8000afc:	eb10 000c 	adds.w	r0, r0, ip
 8000b00:	f1c3 0320 	rsb	r3, r3, #32
 8000b04:	fa01 f103 	lsl.w	r1, r1, r3
 8000b08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0c:	d502      	bpl.n	8000b14 <__addsf3+0x78>
 8000b0e:	4249      	negs	r1, r1
 8000b10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b18:	d313      	bcc.n	8000b42 <__addsf3+0xa6>
 8000b1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1e:	d306      	bcc.n	8000b2e <__addsf3+0x92>
 8000b20:	0840      	lsrs	r0, r0, #1
 8000b22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b26:	f102 0201 	add.w	r2, r2, #1
 8000b2a:	2afe      	cmp	r2, #254	; 0xfe
 8000b2c:	d251      	bcs.n	8000bd2 <__addsf3+0x136>
 8000b2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b36:	bf08      	it	eq
 8000b38:	f020 0001 	biceq.w	r0, r0, #1
 8000b3c:	ea40 0003 	orr.w	r0, r0, r3
 8000b40:	4770      	bx	lr
 8000b42:	0049      	lsls	r1, r1, #1
 8000b44:	eb40 0000 	adc.w	r0, r0, r0
 8000b48:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b50:	d1ed      	bne.n	8000b2e <__addsf3+0x92>
 8000b52:	fab0 fc80 	clz	ip, r0
 8000b56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b62:	bfaa      	itet	ge
 8000b64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b68:	4252      	neglt	r2, r2
 8000b6a:	4318      	orrge	r0, r3
 8000b6c:	bfbc      	itt	lt
 8000b6e:	40d0      	lsrlt	r0, r2
 8000b70:	4318      	orrlt	r0, r3
 8000b72:	4770      	bx	lr
 8000b74:	f092 0f00 	teq	r2, #0
 8000b78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b7c:	bf06      	itte	eq
 8000b7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b82:	3201      	addeq	r2, #1
 8000b84:	3b01      	subne	r3, #1
 8000b86:	e7b5      	b.n	8000af4 <__addsf3+0x58>
 8000b88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b90:	bf18      	it	ne
 8000b92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b96:	d021      	beq.n	8000bdc <__addsf3+0x140>
 8000b98:	ea92 0f03 	teq	r2, r3
 8000b9c:	d004      	beq.n	8000ba8 <__addsf3+0x10c>
 8000b9e:	f092 0f00 	teq	r2, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	4608      	moveq	r0, r1
 8000ba6:	4770      	bx	lr
 8000ba8:	ea90 0f01 	teq	r0, r1
 8000bac:	bf1c      	itt	ne
 8000bae:	2000      	movne	r0, #0
 8000bb0:	4770      	bxne	lr
 8000bb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bb6:	d104      	bne.n	8000bc2 <__addsf3+0x126>
 8000bb8:	0040      	lsls	r0, r0, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc0:	4770      	bx	lr
 8000bc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bc6:	bf3c      	itt	cc
 8000bc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bxcc	lr
 8000bce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bda:	4770      	bx	lr
 8000bdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be0:	bf16      	itet	ne
 8000be2:	4608      	movne	r0, r1
 8000be4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be8:	4601      	movne	r1, r0
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	bf06      	itte	eq
 8000bee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf2:	ea90 0f01 	teqeq	r0, r1
 8000bf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_ui2f>:
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e004      	b.n	8000c0c <__aeabi_i2f+0x8>
 8000c02:	bf00      	nop

08000c04 <__aeabi_i2f>:
 8000c04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c08:	bf48      	it	mi
 8000c0a:	4240      	negmi	r0, r0
 8000c0c:	ea5f 0c00 	movs.w	ip, r0
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c18:	4601      	mov	r1, r0
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	e01c      	b.n	8000c5a <__aeabi_l2f+0x2a>

08000c20 <__aeabi_ul2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e00a      	b.n	8000c44 <__aeabi_l2f+0x14>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_l2f>:
 8000c30:	ea50 0201 	orrs.w	r2, r0, r1
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c3c:	d502      	bpl.n	8000c44 <__aeabi_l2f+0x14>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	ea5f 0c01 	movs.w	ip, r1
 8000c48:	bf02      	ittt	eq
 8000c4a:	4684      	moveq	ip, r0
 8000c4c:	4601      	moveq	r1, r0
 8000c4e:	2000      	moveq	r0, #0
 8000c50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c54:	bf08      	it	eq
 8000c56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c5e:	fabc f28c 	clz	r2, ip
 8000c62:	3a08      	subs	r2, #8
 8000c64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c68:	db10      	blt.n	8000c8c <__aeabi_l2f+0x5c>
 8000c6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6e:	4463      	add	r3, ip
 8000c70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c74:	f1c2 0220 	rsb	r2, r2, #32
 8000c78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c80:	eb43 0002 	adc.w	r0, r3, r2
 8000c84:	bf08      	it	eq
 8000c86:	f020 0001 	biceq.w	r0, r0, #1
 8000c8a:	4770      	bx	lr
 8000c8c:	f102 0220 	add.w	r2, r2, #32
 8000c90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c94:	f1c2 0220 	rsb	r2, r2, #32
 8000c98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca0:	eb43 0002 	adc.w	r0, r3, r2
 8000ca4:	bf08      	it	eq
 8000ca6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000caa:	4770      	bx	lr

08000cac <__aeabi_fmul>:
 8000cac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cba:	ea92 0f0c 	teqne	r2, ip
 8000cbe:	ea93 0f0c 	teqne	r3, ip
 8000cc2:	d06f      	beq.n	8000da4 <__aeabi_fmul+0xf8>
 8000cc4:	441a      	add	r2, r3
 8000cc6:	ea80 0c01 	eor.w	ip, r0, r1
 8000cca:	0240      	lsls	r0, r0, #9
 8000ccc:	bf18      	it	ne
 8000cce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cd2:	d01e      	beq.n	8000d12 <__aeabi_fmul+0x66>
 8000cd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cdc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ce0:	fba0 3101 	umull	r3, r1, r0, r1
 8000ce4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cec:	bf3e      	ittt	cc
 8000cee:	0049      	lslcc	r1, r1, #1
 8000cf0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cf4:	005b      	lslcc	r3, r3, #1
 8000cf6:	ea40 0001 	orr.w	r0, r0, r1
 8000cfa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cfe:	2afd      	cmp	r2, #253	; 0xfd
 8000d00:	d81d      	bhi.n	8000d3e <__aeabi_fmul+0x92>
 8000d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d0a:	bf08      	it	eq
 8000d0c:	f020 0001 	biceq.w	r0, r0, #1
 8000d10:	4770      	bx	lr
 8000d12:	f090 0f00 	teq	r0, #0
 8000d16:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d1a:	bf08      	it	eq
 8000d1c:	0249      	lsleq	r1, r1, #9
 8000d1e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d22:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d26:	3a7f      	subs	r2, #127	; 0x7f
 8000d28:	bfc2      	ittt	gt
 8000d2a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d2e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d32:	4770      	bxgt	lr
 8000d34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	dc5d      	bgt.n	8000dfc <__aeabi_fmul+0x150>
 8000d40:	f112 0f19 	cmn.w	r2, #25
 8000d44:	bfdc      	itt	le
 8000d46:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d4a:	4770      	bxle	lr
 8000d4c:	f1c2 0200 	rsb	r2, r2, #0
 8000d50:	0041      	lsls	r1, r0, #1
 8000d52:	fa21 f102 	lsr.w	r1, r1, r2
 8000d56:	f1c2 0220 	rsb	r2, r2, #32
 8000d5a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d5e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d62:	f140 0000 	adc.w	r0, r0, #0
 8000d66:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d6a:	bf08      	it	eq
 8000d6c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d70:	4770      	bx	lr
 8000d72:	f092 0f00 	teq	r2, #0
 8000d76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d7a:	bf02      	ittt	eq
 8000d7c:	0040      	lsleq	r0, r0, #1
 8000d7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d82:	3a01      	subeq	r2, #1
 8000d84:	d0f9      	beq.n	8000d7a <__aeabi_fmul+0xce>
 8000d86:	ea40 000c 	orr.w	r0, r0, ip
 8000d8a:	f093 0f00 	teq	r3, #0
 8000d8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0049      	lsleq	r1, r1, #1
 8000d96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d9a:	3b01      	subeq	r3, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fmul+0xe6>
 8000d9e:	ea41 010c 	orr.w	r1, r1, ip
 8000da2:	e78f      	b.n	8000cc4 <__aeabi_fmul+0x18>
 8000da4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da8:	ea92 0f0c 	teq	r2, ip
 8000dac:	bf18      	it	ne
 8000dae:	ea93 0f0c 	teqne	r3, ip
 8000db2:	d00a      	beq.n	8000dca <__aeabi_fmul+0x11e>
 8000db4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db8:	bf18      	it	ne
 8000dba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dbe:	d1d8      	bne.n	8000d72 <__aeabi_fmul+0xc6>
 8000dc0:	ea80 0001 	eor.w	r0, r0, r1
 8000dc4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f090 0f00 	teq	r0, #0
 8000dce:	bf17      	itett	ne
 8000dd0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dd4:	4608      	moveq	r0, r1
 8000dd6:	f091 0f00 	teqne	r1, #0
 8000dda:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dde:	d014      	beq.n	8000e0a <__aeabi_fmul+0x15e>
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	d101      	bne.n	8000dea <__aeabi_fmul+0x13e>
 8000de6:	0242      	lsls	r2, r0, #9
 8000de8:	d10f      	bne.n	8000e0a <__aeabi_fmul+0x15e>
 8000dea:	ea93 0f0c 	teq	r3, ip
 8000dee:	d103      	bne.n	8000df8 <__aeabi_fmul+0x14c>
 8000df0:	024b      	lsls	r3, r1, #9
 8000df2:	bf18      	it	ne
 8000df4:	4608      	movne	r0, r1
 8000df6:	d108      	bne.n	8000e0a <__aeabi_fmul+0x15e>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	4770      	bx	lr
 8000e0a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e0e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fdiv>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d069      	beq.n	8000f00 <__aeabi_fdiv+0xec>
 8000e2c:	eba2 0203 	sub.w	r2, r2, r3
 8000e30:	ea80 0c01 	eor.w	ip, r0, r1
 8000e34:	0249      	lsls	r1, r1, #9
 8000e36:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e3a:	d037      	beq.n	8000eac <__aeabi_fdiv+0x98>
 8000e3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e40:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e44:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	bf38      	it	cc
 8000e50:	005b      	lslcc	r3, r3, #1
 8000e52:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e56:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	bf24      	itt	cs
 8000e5e:	1a5b      	subcs	r3, r3, r1
 8000e60:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e64:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e68:	bf24      	itt	cs
 8000e6a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e6e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e72:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e76:	bf24      	itt	cs
 8000e78:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e80:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e84:	bf24      	itt	cs
 8000e86:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e8a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	bf18      	it	ne
 8000e92:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e96:	d1e0      	bne.n	8000e5a <__aeabi_fdiv+0x46>
 8000e98:	2afd      	cmp	r2, #253	; 0xfd
 8000e9a:	f63f af50 	bhi.w	8000d3e <__aeabi_fmul+0x92>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea4:	bf08      	it	eq
 8000ea6:	f020 0001 	biceq.w	r0, r0, #1
 8000eaa:	4770      	bx	lr
 8000eac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eb0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eb4:	327f      	adds	r2, #127	; 0x7f
 8000eb6:	bfc2      	ittt	gt
 8000eb8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ebc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ec0:	4770      	bxgt	lr
 8000ec2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec6:	f04f 0300 	mov.w	r3, #0
 8000eca:	3a01      	subs	r2, #1
 8000ecc:	e737      	b.n	8000d3e <__aeabi_fmul+0x92>
 8000ece:	f092 0f00 	teq	r2, #0
 8000ed2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ed6:	bf02      	ittt	eq
 8000ed8:	0040      	lsleq	r0, r0, #1
 8000eda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ede:	3a01      	subeq	r2, #1
 8000ee0:	d0f9      	beq.n	8000ed6 <__aeabi_fdiv+0xc2>
 8000ee2:	ea40 000c 	orr.w	r0, r0, ip
 8000ee6:	f093 0f00 	teq	r3, #0
 8000eea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eee:	bf02      	ittt	eq
 8000ef0:	0049      	lsleq	r1, r1, #1
 8000ef2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ef6:	3b01      	subeq	r3, #1
 8000ef8:	d0f9      	beq.n	8000eee <__aeabi_fdiv+0xda>
 8000efa:	ea41 010c 	orr.w	r1, r1, ip
 8000efe:	e795      	b.n	8000e2c <__aeabi_fdiv+0x18>
 8000f00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f04:	ea92 0f0c 	teq	r2, ip
 8000f08:	d108      	bne.n	8000f1c <__aeabi_fdiv+0x108>
 8000f0a:	0242      	lsls	r2, r0, #9
 8000f0c:	f47f af7d 	bne.w	8000e0a <__aeabi_fmul+0x15e>
 8000f10:	ea93 0f0c 	teq	r3, ip
 8000f14:	f47f af70 	bne.w	8000df8 <__aeabi_fmul+0x14c>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e776      	b.n	8000e0a <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	d104      	bne.n	8000f2c <__aeabi_fdiv+0x118>
 8000f22:	024b      	lsls	r3, r1, #9
 8000f24:	f43f af4c 	beq.w	8000dc0 <__aeabi_fmul+0x114>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e76e      	b.n	8000e0a <__aeabi_fmul+0x15e>
 8000f2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f30:	bf18      	it	ne
 8000f32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	d1ca      	bne.n	8000ece <__aeabi_fdiv+0xba>
 8000f38:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f3c:	f47f af5c 	bne.w	8000df8 <__aeabi_fmul+0x14c>
 8000f40:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f44:	f47f af3c 	bne.w	8000dc0 <__aeabi_fmul+0x114>
 8000f48:	e75f      	b.n	8000e0a <__aeabi_fmul+0x15e>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_f2uiz>:
 8000f4c:	0042      	lsls	r2, r0, #1
 8000f4e:	d20e      	bcs.n	8000f6e <__aeabi_f2uiz+0x22>
 8000f50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f54:	d30b      	bcc.n	8000f6e <__aeabi_f2uiz+0x22>
 8000f56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f5e:	d409      	bmi.n	8000f74 <__aeabi_f2uiz+0x28>
 8000f60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f68:	fa23 f002 	lsr.w	r0, r3, r2
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2uiz+0x32>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d102      	bne.n	8000f84 <__aeabi_f2uiz+0x38>
 8000f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f82:	4770      	bx	lr
 8000f84:	f04f 0000 	mov.w	r0, #0
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_InitTick+0x24>)
{
 8000f8e:	b510      	push	{r4, lr}
 8000f90:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f9c:	f000 f878 	bl	8001090 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4621      	mov	r1, r4
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f83e 	bl	8001028 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000fac:	2000      	movs	r0, #0
 8000fae:	bd10      	pop	{r4, pc}
 8000fb0:	20000000 	.word	0x20000000

08000fb4 <HAL_Init>:
{
 8000fb4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f000 f824 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff ffe5 	bl	8000f8c <HAL_InitTick>
  HAL_MspInit();
 8000fc2:	f002 f813 	bl	8002fec <HAL_MspInit>
}
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	bd08      	pop	{r3, pc}
	...

08000fcc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000fcc:	4a02      	ldr	r2, [pc, #8]	; (8000fd8 <HAL_IncTick+0xc>)
 8000fce:	6813      	ldr	r3, [r2, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000098 	.word	0x20000098

08000fdc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fdc:	4b01      	ldr	r3, [pc, #4]	; (8000fe4 <HAL_GetTick+0x8>)
 8000fde:	6818      	ldr	r0, [r3, #0]
}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000098 	.word	0x20000098

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000fe8:	b513      	push	{r0, r1, r4, lr}
 8000fea:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000fec:	f7ff fff6 	bl	8000fdc <HAL_GetTick>
 8000ff0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000ff2:	f7ff fff3 	bl	8000fdc <HAL_GetTick>
 8000ff6:	9b01      	ldr	r3, [sp, #4]
 8000ff8:	1b00      	subs	r0, r0, r4
 8000ffa:	4298      	cmp	r0, r3
 8000ffc:	d3f9      	bcc.n	8000ff2 <HAL_Delay+0xa>
  {
  }
}
 8000ffe:	b002      	add	sp, #8
 8001000:	bd10      	pop	{r4, pc}
	...

08001004 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001006:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800100a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001012:	041b      	lsls	r3, r3, #16
 8001014:	0c1b      	lsrs	r3, r3, #16
 8001016:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800101e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001020:	60d3      	str	r3, [r2, #12]
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102a:	b530      	push	{r4, r5, lr}
 800102c:	68dc      	ldr	r4, [r3, #12]
 800102e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001032:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	2b04      	cmp	r3, #4
 800103a:	bf28      	it	cs
 800103c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001044:	bf98      	it	ls
 8001046:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	fa05 f303 	lsl.w	r3, r5, r3
 800104c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001050:	bf88      	it	hi
 8001052:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4019      	ands	r1, r3
 8001056:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	fa05 f404 	lsl.w	r4, r5, r4
 800105c:	3c01      	subs	r4, #1
 800105e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001060:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001062:	ea42 0201 	orr.w	r2, r2, r1
 8001066:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	bfaf      	iteee	ge
 800106c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	4b06      	ldrlt	r3, [pc, #24]	; (800108c <HAL_NVIC_SetPriority+0x64>)
 8001072:	f000 000f 	andlt.w	r0, r0, #15
 8001076:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	bfa5      	ittet	ge
 800107a:	b2d2      	uxtbge	r2, r2
 800107c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001086:	bd30      	pop	{r4, r5, pc}
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	e000ed14 	.word	0xe000ed14

08001090 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	3801      	subs	r0, #1
 8001092:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001096:	d20a      	bcs.n	80010ae <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010be:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	bf0c      	ite	eq
 80010c4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010c8:	f022 0204 	bicne.w	r2, r2, #4
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	4770      	bx	lr
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010d4:	4770      	bx	lr

080010d6 <HAL_SYSTICK_IRQHandler>:
{
 80010d6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80010d8:	f7ff fffc 	bl	80010d4 <HAL_SYSTICK_Callback>
 80010dc:	bd08      	pop	{r3, pc}
	...

080010e0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80010e0:	2300      	movs	r3, #0
{ 
 80010e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010e6:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8001280 <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ee:	4a62      	ldr	r2, [pc, #392]	; (8001278 <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80010f0:	fa38 f403 	lsrs.w	r4, r8, r3
 80010f4:	d102      	bne.n	80010fc <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 80010f6:	b003      	add	sp, #12
 80010f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010fc:	f04f 0e01 	mov.w	lr, #1
 8001100:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8001104:	ea18 060e 	ands.w	r6, r8, lr
 8001108:	f000 80a8 	beq.w	800125c <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800110c:	684c      	ldr	r4, [r1, #4]
 800110e:	f024 0710 	bic.w	r7, r4, #16
 8001112:	2f02      	cmp	r7, #2
 8001114:	d116      	bne.n	8001144 <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001116:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 800111a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800111e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001122:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001126:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800112a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800112e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001132:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001136:	690d      	ldr	r5, [r1, #16]
 8001138:	fa05 f50b 	lsl.w	r5, r5, fp
 800113c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001140:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001144:	2503      	movs	r5, #3
 8001146:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800114a:	fa05 f50a 	lsl.w	r5, r5, sl
 800114e:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8001150:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001154:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001158:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800115c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001160:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001162:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001166:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001168:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800116c:	d811      	bhi.n	8001192 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 800116e:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001170:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001174:	68cf      	ldr	r7, [r1, #12]
 8001176:	fa07 fc0a 	lsl.w	ip, r7, sl
 800117a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800117e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001180:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001182:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001186:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800118a:	409f      	lsls	r7, r3
 800118c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001190:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001192:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001194:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001196:	688f      	ldr	r7, [r1, #8]
 8001198:	fa07 f70a 	lsl.w	r7, r7, sl
 800119c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800119e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80011a0:	00e5      	lsls	r5, r4, #3
 80011a2:	d55b      	bpl.n	800125c <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011a4:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80011ac:	f023 0703 	bic.w	r7, r3, #3
 80011b0:	f045 0501 	orr.w	r5, r5, #1
 80011b4:	f8c9 5020 	str.w	r5, [r9, #32]
 80011b8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80011bc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80011c0:	f005 0501 	and.w	r5, r5, #1
 80011c4:	9501      	str	r5, [sp, #4]
 80011c6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011ca:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011d0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80011d4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011d8:	fa0c f50e 	lsl.w	r5, ip, lr
 80011dc:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011e0:	4d26      	ldr	r5, [pc, #152]	; (800127c <HAL_GPIO_Init+0x19c>)
 80011e2:	42a8      	cmp	r0, r5
 80011e4:	d03c      	beq.n	8001260 <HAL_GPIO_Init+0x180>
 80011e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011ea:	42a8      	cmp	r0, r5
 80011ec:	d03a      	beq.n	8001264 <HAL_GPIO_Init+0x184>
 80011ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011f2:	42a8      	cmp	r0, r5
 80011f4:	d038      	beq.n	8001268 <HAL_GPIO_Init+0x188>
 80011f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011fa:	42a8      	cmp	r0, r5
 80011fc:	d036      	beq.n	800126c <HAL_GPIO_Init+0x18c>
 80011fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001202:	42a8      	cmp	r0, r5
 8001204:	d034      	beq.n	8001270 <HAL_GPIO_Init+0x190>
 8001206:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800120a:	42a8      	cmp	r0, r5
 800120c:	d032      	beq.n	8001274 <HAL_GPIO_Init+0x194>
 800120e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001212:	42a8      	cmp	r0, r5
 8001214:	bf14      	ite	ne
 8001216:	2507      	movne	r5, #7
 8001218:	2506      	moveq	r5, #6
 800121a:	fa05 f50e 	lsl.w	r5, r5, lr
 800121e:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001222:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001224:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8001226:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001228:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800122c:	bf0c      	ite	eq
 800122e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001230:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8001232:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001234:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001236:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800123a:	bf0c      	ite	eq
 800123c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800123e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001240:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001242:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001244:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001248:	bf0c      	ite	eq
 800124a:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800124c:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800124e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001250:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001252:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001254:	bf54      	ite	pl
 8001256:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8001258:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800125a:	60d5      	str	r5, [r2, #12]
    position++;
 800125c:	3301      	adds	r3, #1
 800125e:	e747      	b.n	80010f0 <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001260:	2500      	movs	r5, #0
 8001262:	e7da      	b.n	800121a <HAL_GPIO_Init+0x13a>
 8001264:	2501      	movs	r5, #1
 8001266:	e7d8      	b.n	800121a <HAL_GPIO_Init+0x13a>
 8001268:	2502      	movs	r5, #2
 800126a:	e7d6      	b.n	800121a <HAL_GPIO_Init+0x13a>
 800126c:	2503      	movs	r5, #3
 800126e:	e7d4      	b.n	800121a <HAL_GPIO_Init+0x13a>
 8001270:	2504      	movs	r5, #4
 8001272:	e7d2      	b.n	800121a <HAL_GPIO_Init+0x13a>
 8001274:	2505      	movs	r5, #5
 8001276:	e7d0      	b.n	800121a <HAL_GPIO_Init+0x13a>
 8001278:	40010400 	.word	0x40010400
 800127c:	40020000 	.word	0x40020000
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001284:	6903      	ldr	r3, [r0, #16]
 8001286:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001288:	bf14      	ite	ne
 800128a:	2001      	movne	r0, #1
 800128c:	2000      	moveq	r0, #0
 800128e:	4770      	bx	lr

08001290 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001290:	b10a      	cbz	r2, 8001296 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001292:	6181      	str	r1, [r0, #24]
 8001294:	4770      	bx	lr
 8001296:	0409      	lsls	r1, r1, #16
 8001298:	e7fb      	b.n	8001292 <HAL_GPIO_WritePin+0x2>

0800129a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800129a:	6802      	ldr	r2, [r0, #0]
 800129c:	6953      	ldr	r3, [r2, #20]
 800129e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80012a2:	d00d      	beq.n	80012c0 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012a4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80012a8:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012aa:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80012ac:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012ae:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80012b8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80012bc:	2001      	movs	r0, #1
 80012be:	4770      	bx	lr
  }
  return HAL_OK;
 80012c0:	4618      	mov	r0, r3
}
 80012c2:	4770      	bx	lr

080012c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80012c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012c8:	4604      	mov	r4, r0
 80012ca:	4617      	mov	r7, r2
 80012cc:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012ce:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80012d2:	b28e      	uxth	r6, r1
 80012d4:	6825      	ldr	r5, [r4, #0]
 80012d6:	f1b8 0f01 	cmp.w	r8, #1
 80012da:	bf0c      	ite	eq
 80012dc:	696b      	ldreq	r3, [r5, #20]
 80012de:	69ab      	ldrne	r3, [r5, #24]
 80012e0:	ea36 0303 	bics.w	r3, r6, r3
 80012e4:	bf14      	ite	ne
 80012e6:	2001      	movne	r0, #1
 80012e8:	2000      	moveq	r0, #0
 80012ea:	b908      	cbnz	r0, 80012f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80012ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012f0:	696b      	ldr	r3, [r5, #20]
 80012f2:	055a      	lsls	r2, r3, #21
 80012f4:	d512      	bpl.n	800131c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012f6:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80012f8:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fe:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001300:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001304:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001306:	2304      	movs	r3, #4
 8001308:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800130a:	2300      	movs	r3, #0
      return HAL_ERROR;
 800130c:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 800130e:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001310:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001314:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800131c:	1c7b      	adds	r3, r7, #1
 800131e:	d0d9      	beq.n	80012d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001320:	b94f      	cbnz	r7, 8001336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001322:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001324:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001326:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001328:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800132c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001330:	2003      	movs	r0, #3
 8001332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001336:	f7ff fe51 	bl	8000fdc <HAL_GetTick>
 800133a:	eba0 0009 	sub.w	r0, r0, r9
 800133e:	4287      	cmp	r7, r0
 8001340:	d2c8      	bcs.n	80012d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001342:	e7ee      	b.n	8001322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001344 <I2C_WaitOnFlagUntilTimeout>:
{
 8001344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001348:	4604      	mov	r4, r0
 800134a:	4690      	mov	r8, r2
 800134c:	461f      	mov	r7, r3
 800134e:	9e08      	ldr	r6, [sp, #32]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001350:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001354:	b28d      	uxth	r5, r1
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	f1b9 0f01 	cmp.w	r9, #1
 800135c:	bf0c      	ite	eq
 800135e:	695b      	ldreq	r3, [r3, #20]
 8001360:	699b      	ldrne	r3, [r3, #24]
 8001362:	ea35 0303 	bics.w	r3, r5, r3
 8001366:	bf0c      	ite	eq
 8001368:	2301      	moveq	r3, #1
 800136a:	2300      	movne	r3, #0
 800136c:	4543      	cmp	r3, r8
 800136e:	d002      	beq.n	8001376 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001370:	2000      	movs	r0, #0
}
 8001372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001376:	1c7b      	adds	r3, r7, #1
 8001378:	d0ed      	beq.n	8001356 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800137a:	b95f      	cbnz	r7, 8001394 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800137c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800137e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001380:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001382:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001386:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800138a:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800138c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001394:	f7ff fe22 	bl	8000fdc <HAL_GetTick>
 8001398:	1b80      	subs	r0, r0, r6
 800139a:	4287      	cmp	r7, r0
 800139c:	d2db      	bcs.n	8001356 <I2C_WaitOnFlagUntilTimeout+0x12>
 800139e:	e7ed      	b.n	800137c <I2C_WaitOnFlagUntilTimeout+0x38>

080013a0 <I2C_WaitOnTXEFlagUntilTimeout>:
{  
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	d501      	bpl.n	80013b4 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80013b0:	2000      	movs	r0, #0
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013b4:	4620      	mov	r0, r4
 80013b6:	f7ff ff70 	bl	800129a <I2C_IsAcknowledgeFailed>
 80013ba:	b9a8      	cbnz	r0, 80013e8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80013bc:	1c6a      	adds	r2, r5, #1
 80013be:	d0f3      	beq.n	80013a8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013c0:	b965      	cbnz	r5, 80013dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80013c4:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013c6:	f043 0320 	orr.w	r3, r3, #32
 80013ca:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80013cc:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80013ce:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80013d0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80013da:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013dc:	f7ff fdfe 	bl	8000fdc <HAL_GetTick>
 80013e0:	1b80      	subs	r0, r0, r6
 80013e2:	4285      	cmp	r5, r0
 80013e4:	d2e0      	bcs.n	80013a8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80013e6:	e7ec      	b.n	80013c2 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80013e8:	2001      	movs	r0, #1
}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}

080013ec <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	4604      	mov	r4, r0
 80013f0:	460d      	mov	r5, r1
 80013f2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	075b      	lsls	r3, r3, #29
 80013fa:	d501      	bpl.n	8001400 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80013fc:	2000      	movs	r0, #0
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff ff4a 	bl	800129a <I2C_IsAcknowledgeFailed>
 8001406:	b9a8      	cbnz	r0, 8001434 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001408:	1c6a      	adds	r2, r5, #1
 800140a:	d0f3      	beq.n	80013f4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800140c:	b965      	cbnz	r5, 8001428 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800140e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001410:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001412:	f043 0320 	orr.w	r3, r3, #32
 8001416:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001418:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800141a:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800141c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800141e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001422:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001426:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001428:	f7ff fdd8 	bl	8000fdc <HAL_GetTick>
 800142c:	1b80      	subs	r0, r0, r6
 800142e:	4285      	cmp	r5, r0
 8001430:	d2e0      	bcs.n	80013f4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001432:	e7ec      	b.n	800140e <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001434:	2001      	movs	r0, #1
}
 8001436:	bd70      	pop	{r4, r5, r6, pc}

08001438 <HAL_I2C_Init>:
{
 8001438:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 800143a:	4604      	mov	r4, r0
 800143c:	b908      	cbnz	r0, 8001442 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800143e:	2001      	movs	r0, #1
 8001440:	bd70      	pop	{r4, r5, r6, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001442:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001446:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800144a:	b91b      	cbnz	r3, 8001454 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800144c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001450:	f001 fe1c 	bl	800308c <HAL_I2C_MspInit>
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001454:	f000 fe12 	bl	800207c <HAL_RCC_GetPCLK1Freq>
  if(pclk1 < I2C_MIN_PCLK_FREQ)
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <HAL_I2C_Init+0x110>)
 800145a:	4298      	cmp	r0, r3
 800145c:	d9ef      	bls.n	800143e <HAL_I2C_Init+0x6>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800145e:	2324      	movs	r3, #36	; 0x24
  freqrange = I2C_FREQ_RANGE(pclk1);
 8001460:	4d3a      	ldr	r5, [pc, #232]	; (800154c <HAL_I2C_Init+0x114>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001462:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  freqrange = I2C_FREQ_RANGE(pclk1);
 8001466:	fbb0 f5f5 	udiv	r5, r0, r5
  __HAL_I2C_DISABLE(hi2c);
 800146a:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800146c:	4938      	ldr	r1, [pc, #224]	; (8001550 <HAL_I2C_Init+0x118>)
  __HAL_I2C_DISABLE(hi2c);
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	f022 0201 	bic.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800147c:	432a      	orrs	r2, r5
 800147e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001480:	6862      	ldr	r2, [r4, #4]
 8001482:	6a1e      	ldr	r6, [r3, #32]
 8001484:	428a      	cmp	r2, r1
 8001486:	bf81      	itttt	hi
 8001488:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 800148c:	4369      	mulhi	r1, r5
 800148e:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001492:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001496:	bf94      	ite	ls
 8001498:	1c69      	addls	r1, r5, #1
 800149a:	3101      	addhi	r1, #1
 800149c:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80014a0:	4331      	orrs	r1, r6
 80014a2:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014a4:	69dd      	ldr	r5, [r3, #28]
 80014a6:	492a      	ldr	r1, [pc, #168]	; (8001550 <HAL_I2C_Init+0x118>)
 80014a8:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80014ac:	428a      	cmp	r2, r1
 80014ae:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80014b2:	d830      	bhi.n	8001516 <HAL_I2C_Init+0xde>
 80014b4:	0052      	lsls	r2, r2, #1
 80014b6:	fbb0 f0f2 	udiv	r0, r0, r2
 80014ba:	f3c0 020b 	ubfx	r2, r0, #0, #12
 80014be:	2a03      	cmp	r2, #3
 80014c0:	bf98      	it	ls
 80014c2:	2004      	movls	r0, #4
 80014c4:	4328      	orrs	r0, r5
 80014c6:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014c8:	6819      	ldr	r1, [r3, #0]
 80014ca:	6a20      	ldr	r0, [r4, #32]
 80014cc:	69e2      	ldr	r2, [r4, #28]
 80014ce:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80014d2:	4302      	orrs	r2, r0
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014d8:	6899      	ldr	r1, [r3, #8]
 80014da:	68e0      	ldr	r0, [r4, #12]
 80014dc:	6922      	ldr	r2, [r4, #16]
 80014de:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80014e2:	4302      	orrs	r2, r0
 80014e4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80014e8:	430a      	orrs	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014ec:	68d9      	ldr	r1, [r3, #12]
 80014ee:	69a0      	ldr	r0, [r4, #24]
 80014f0:	6962      	ldr	r2, [r4, #20]
 80014f2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80014f6:	4302      	orrs	r2, r0
 80014f8:	430a      	orrs	r2, r1
 80014fa:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 80014fc:	681a      	ldr	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014fe:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001506:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001508:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800150a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800150e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001510:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001514:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001516:	68a1      	ldr	r1, [r4, #8]
 8001518:	b949      	cbnz	r1, 800152e <HAL_I2C_Init+0xf6>
 800151a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800151e:	fbb0 f0f2 	udiv	r0, r0, r2
 8001522:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001526:	b162      	cbz	r2, 8001542 <HAL_I2C_Init+0x10a>
 8001528:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800152c:	e7ca      	b.n	80014c4 <HAL_I2C_Init+0x8c>
 800152e:	2119      	movs	r1, #25
 8001530:	434a      	muls	r2, r1
 8001532:	fbb0 f0f2 	udiv	r0, r0, r2
 8001536:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800153a:	b112      	cbz	r2, 8001542 <HAL_I2C_Init+0x10a>
 800153c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001540:	e7c0      	b.n	80014c4 <HAL_I2C_Init+0x8c>
 8001542:	2001      	movs	r0, #1
 8001544:	e7be      	b.n	80014c4 <HAL_I2C_Init+0x8c>
 8001546:	bf00      	nop
 8001548:	001e847f 	.word	0x001e847f
 800154c:	000f4240 	.word	0x000f4240
 8001550:	000186a0 	.word	0x000186a0

08001554 <HAL_I2C_Master_Transmit>:
{
 8001554:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001558:	4604      	mov	r4, r0
 800155a:	461f      	mov	r7, r3
 800155c:	460d      	mov	r5, r1
 800155e:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001560:	f7ff fd3c 	bl	8000fdc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001564:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001568:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800156a:	2b20      	cmp	r3, #32
 800156c:	d004      	beq.n	8001578 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY; 
 800156e:	2502      	movs	r5, #2
}
 8001570:	4628      	mov	r0, r5
 8001572:	b004      	add	sp, #16
 8001574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001578:	9000      	str	r0, [sp, #0]
 800157a:	2319      	movs	r3, #25
 800157c:	2201      	movs	r2, #1
 800157e:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 8001582:	4620      	mov	r0, r4
 8001584:	f7ff fede 	bl	8001344 <I2C_WaitOnFlagUntilTimeout>
 8001588:	2800      	cmp	r0, #0
 800158a:	d1f0      	bne.n	800156e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800158c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001590:	2b01      	cmp	r3, #1
 8001592:	d0ec      	beq.n	800156e <HAL_I2C_Master_Transmit+0x1a>
 8001594:	2301      	movs	r3, #1
 8001596:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80015a0:	bf5e      	ittt	pl
 80015a2:	681a      	ldrpl	r2, [r3, #0]
 80015a4:	f042 0201 	orrpl.w	r2, r2, #1
 80015a8:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b0:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015b2:	2221      	movs	r2, #33	; 0x21
 80015b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015b8:	2210      	movs	r2, #16
 80015ba:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015be:	2200      	movs	r2, #0
 80015c0:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015c2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80015c6:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015c8:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80015ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80015cc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80015d0:	8522      	strh	r2, [r4, #40]	; 0x28
  if((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME) || (hi2c->XferOptions == I2C_NO_OPTION_FRAME))
 80015d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015d4:	2a04      	cmp	r2, #4
 80015d6:	d006      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x92>
 80015d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015da:	2a01      	cmp	r2, #1
 80015dc:	d003      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x92>
 80015de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015e0:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80015e4:	d104      	bne.n	80015f0 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	e002      	b.n	80015f6 <HAL_I2C_Master_Transmit+0xa2>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015f2:	2a12      	cmp	r2, #18
 80015f4:	d0f7      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x92>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015f6:	9600      	str	r6, [sp, #0]
 80015f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015fa:	2200      	movs	r2, #0
 80015fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff fe9f 	bl	8001344 <I2C_WaitOnFlagUntilTimeout>
 8001606:	bb28      	cbnz	r0, 8001654 <HAL_I2C_Master_Transmit+0x100>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001608:	6923      	ldr	r3, [r4, #16]
 800160a:	6822      	ldr	r2, [r4, #0]
 800160c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001610:	d112      	bne.n	8001638 <HAL_I2C_Master_Transmit+0xe4>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001612:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001616:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001618:	4633      	mov	r3, r6
 800161a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800161c:	4936      	ldr	r1, [pc, #216]	; (80016f8 <HAL_I2C_Master_Transmit+0x1a4>)
 800161e:	4620      	mov	r0, r4
 8001620:	f7ff fe50 	bl	80012c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001624:	4605      	mov	r5, r0
 8001626:	b9a0      	cbnz	r0, 8001652 <HAL_I2C_Master_Transmit+0xfe>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	9003      	str	r0, [sp, #12]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	9203      	str	r2, [sp, #12]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	9303      	str	r3, [sp, #12]
 8001634:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001636:	e04f      	b.n	80016d8 <HAL_I2C_Master_Transmit+0x184>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001638:	11eb      	asrs	r3, r5, #7
 800163a:	f003 0306 	and.w	r3, r3, #6
 800163e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001642:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001644:	492d      	ldr	r1, [pc, #180]	; (80016fc <HAL_I2C_Master_Transmit+0x1a8>)
 8001646:	4633      	mov	r3, r6
 8001648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff fe3a 	bl	80012c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001650:	b148      	cbz	r0, 8001666 <HAL_I2C_Master_Transmit+0x112>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001652:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001656:	2b04      	cmp	r3, #4
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	d107      	bne.n	800166e <HAL_I2C_Master_Transmit+0x11a>
        __HAL_UNLOCK(hi2c);
 800165e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001662:	2501      	movs	r5, #1
 8001664:	e784      	b.n	8001570 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	b2ed      	uxtb	r5, r5
 800166a:	611d      	str	r5, [r3, #16]
 800166c:	e7d4      	b.n	8001618 <HAL_I2C_Master_Transmit+0xc4>
        __HAL_UNLOCK(hi2c);
 800166e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001672:	2503      	movs	r5, #3
 8001674:	e77c      	b.n	8001570 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001676:	4632      	mov	r2, r6
 8001678:	990a      	ldr	r1, [sp, #40]	; 0x28
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff fe90 	bl	80013a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001680:	b140      	cbz	r0, 8001694 <HAL_I2C_Master_Transmit+0x140>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001684:	2b04      	cmp	r3, #4
 8001686:	d1f4      	bne.n	8001672 <HAL_I2C_Master_Transmit+0x11e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001688:	6822      	ldr	r2, [r4, #0]
 800168a:	6813      	ldr	r3, [r2, #0]
 800168c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e7e6      	b.n	8001662 <HAL_I2C_Master_Transmit+0x10e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001694:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001696:	6820      	ldr	r0, [r4, #0]
 8001698:	1c4b      	adds	r3, r1, #1
 800169a:	6263      	str	r3, [r4, #36]	; 0x24
 800169c:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 800169e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016a0:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80016a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016aa:	1e53      	subs	r3, r2, #1
 80016ac:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 80016ae:	6943      	ldr	r3, [r0, #20]
 80016b0:	075b      	lsls	r3, r3, #29
 80016b2:	d50a      	bpl.n	80016ca <HAL_I2C_Master_Transmit+0x176>
 80016b4:	b14f      	cbz	r7, 80016ca <HAL_I2C_Master_Transmit+0x176>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016b6:	1c8b      	adds	r3, r1, #2
 80016b8:	6263      	str	r3, [r4, #36]	; 0x24
 80016ba:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80016bc:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016be:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80016c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80016c2:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ca:	4632      	mov	r2, r6
 80016cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff fe8c 	bl	80013ec <I2C_WaitOnBTFFlagUntilTimeout>
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d1d4      	bne.n	8001682 <HAL_I2C_Master_Transmit+0x12e>
    while(hi2c->XferSize > 0U)
 80016d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1cb      	bne.n	8001676 <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016de:	6821      	ldr	r1, [r4, #0]
 80016e0:	680a      	ldr	r2, [r1, #0]
 80016e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016e6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80016e8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80016ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80016ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80016f6:	e73b      	b.n	8001570 <HAL_I2C_Master_Transmit+0x1c>
 80016f8:	00010002 	.word	0x00010002
 80016fc:	00010008 	.word	0x00010008

08001700 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8001702:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800170a:	d00c      	beq.n	8001726 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 800170c:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800170e:	491a      	ldr	r1, [pc, #104]	; (8001778 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8001710:	680b      	ldr	r3, [r1, #0]
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800171a:	6808      	ldr	r0, [r1, #0]
 800171c:	f000 0001 	and.w	r0, r0, #1
 8001720:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8001722:	b002      	add	sp, #8
 8001724:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001728:	4914      	ldr	r1, [pc, #80]	; (800177c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800172a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800172e:	d00f      	beq.n	8001750 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001730:	680a      	ldr	r2, [r1, #0]
 8001732:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001736:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800173a:	d1e7      	bne.n	800170c <RCC_SetFlashLatencyFromMSIRange+0xc>
 800173c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8001740:	d1e4      	bne.n	800170c <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8001742:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8001744:	6813      	ldr	r3, [r2, #0]
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 800174c:	2201      	movs	r2, #1
 800174e:	e7de      	b.n	800170e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001752:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
 8001758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800175a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800175e:	9201      	str	r2, [sp, #4]
 8001760:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001762:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001766:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800176a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 800176e:	6259      	str	r1, [r3, #36]	; 0x24
 8001770:	e7e1      	b.n	8001736 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40023c00 	.word	0x40023c00
 800177c:	40007000 	.word	0x40007000

08001780 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001780:	6803      	ldr	r3, [r0, #0]
{
 8001782:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001786:	07d9      	lsls	r1, r3, #31
{
 8001788:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178a:	d46a      	bmi.n	8001862 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	079a      	lsls	r2, r3, #30
 8001790:	f100 80e6 	bmi.w	8001960 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	06de      	lsls	r6, r3, #27
 8001798:	d555      	bpl.n	8001846 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800179a:	4dc1      	ldr	r5, [pc, #772]	; (8001aa0 <HAL_RCC_OscConfig+0x320>)
 800179c:	68ab      	ldr	r3, [r5, #8]
 800179e:	f013 0f0c 	tst.w	r3, #12
 80017a2:	f040 8183 	bne.w	8001aac <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017aa:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ae:	6829      	ldr	r1, [r5, #0]
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	2201      	movs	r2, #1
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	420b      	tst	r3, r1
 80017c4:	d002      	beq.n	80017cc <HAL_RCC_OscConfig+0x4c>
 80017c6:	69a3      	ldr	r3, [r4, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d06e      	beq.n	80018aa <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017cc:	4db4      	ldr	r5, [pc, #720]	; (8001aa0 <HAL_RCC_OscConfig+0x320>)
 80017ce:	6a20      	ldr	r0, [r4, #32]
 80017d0:	686b      	ldr	r3, [r5, #4]
 80017d2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80017d6:	4298      	cmp	r0, r3
 80017d8:	f240 814a 	bls.w	8001a70 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017dc:	f7ff ff90 	bl	8001700 <RCC_SetFlashLatencyFromMSIRange>
 80017e0:	2800      	cmp	r0, #0
 80017e2:	d162      	bne.n	80018aa <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e4:	686b      	ldr	r3, [r5, #4]
 80017e6:	6a22      	ldr	r2, [r4, #32]
 80017e8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017ec:	4313      	orrs	r3, r2
 80017ee:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f0:	6869      	ldr	r1, [r5, #4]
 80017f2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	fab3 f283 	clz	r2, r3
 80017fe:	69e3      	ldr	r3, [r4, #28]
 8001800:	4093      	lsls	r3, r2
 8001802:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001806:	4313      	orrs	r3, r2
 8001808:	606b      	str	r3, [r5, #4]
 800180a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800180e:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001812:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001816:	4ba2      	ldr	r3, [pc, #648]	; (8001aa0 <HAL_RCC_OscConfig+0x320>)
 8001818:	21f0      	movs	r1, #240	; 0xf0
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	fa91 f1a1 	rbit	r1, r1
 8001820:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001824:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001826:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800182a:	40c3      	lsrs	r3, r0
 800182c:	1c58      	adds	r0, r3, #1
 800182e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001832:	40ca      	lsrs	r2, r1
 8001834:	499b      	ldr	r1, [pc, #620]	; (8001aa4 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001836:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001838:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 800183a:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800183c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800183e:	4a9a      	ldr	r2, [pc, #616]	; (8001aa8 <HAL_RCC_OscConfig+0x328>)
 8001840:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001842:	f7ff fba3 	bl	8000f8c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	071d      	lsls	r5, r3, #28
 800184a:	f100 8191 	bmi.w	8001b70 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	0758      	lsls	r0, r3, #29
 8001852:	f100 81d3 	bmi.w	8001bfc <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001856:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001858:	2a00      	cmp	r2, #0
 800185a:	f040 8257 	bne.w	8001d0c <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 800185e:	2000      	movs	r0, #0
 8001860:	e024      	b.n	80018ac <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001862:	4b8f      	ldr	r3, [pc, #572]	; (8001aa0 <HAL_RCC_OscConfig+0x320>)
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	f002 020c 	and.w	r2, r2, #12
 800186a:	2a08      	cmp	r2, #8
 800186c:	d007      	beq.n	800187e <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	f002 020c 	and.w	r2, r2, #12
 8001874:	2a0c      	cmp	r2, #12
 8001876:	d11c      	bne.n	80018b2 <HAL_RCC_OscConfig+0x132>
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	03db      	lsls	r3, r3, #15
 800187c:	d519      	bpl.n	80018b2 <HAL_RCC_OscConfig+0x132>
 800187e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001882:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001886:	4a86      	ldr	r2, [pc, #536]	; (8001aa0 <HAL_RCC_OscConfig+0x320>)
 8001888:	6811      	ldr	r1, [r2, #0]
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	2201      	movs	r2, #1
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	420b      	tst	r3, r1
 800189e:	f43f af75 	beq.w	800178c <HAL_RCC_OscConfig+0xc>
 80018a2:	6863      	ldr	r3, [r4, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f47f af71 	bne.w	800178c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80018aa:	2001      	movs	r0, #1
}
 80018ac:	b003      	add	sp, #12
 80018ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b2:	6863      	ldr	r3, [r4, #4]
 80018b4:	4d7a      	ldr	r5, [pc, #488]	; (8001aa0 <HAL_RCC_OscConfig+0x320>)
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d120      	bne.n	80018fc <HAL_RCC_OscConfig+0x17c>
 80018ba:	682b      	ldr	r3, [r5, #0]
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018c2:	f7ff fb8b 	bl	8000fdc <HAL_GetTick>
 80018c6:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80018ca:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018cc:	2601      	movs	r6, #1
 80018ce:	4f74      	ldr	r7, [pc, #464]	; (8001aa0 <HAL_RCC_OscConfig+0x320>)
 80018d0:	fa95 f3a5 	rbit	r3, r5
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	fa95 f3a5 	rbit	r3, r5
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	fa06 f303 	lsl.w	r3, r6, r3
 80018e6:	4213      	tst	r3, r2
 80018e8:	f47f af50 	bne.w	800178c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff fb76 	bl	8000fdc <HAL_GetTick>
 80018f0:	eba0 0008 	sub.w	r0, r0, r8
 80018f4:	2864      	cmp	r0, #100	; 0x64
 80018f6:	d9eb      	bls.n	80018d0 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 80018f8:	2003      	movs	r0, #3
 80018fa:	e7d7      	b.n	80018ac <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fc:	bb13      	cbnz	r3, 8001944 <HAL_RCC_OscConfig+0x1c4>
 80018fe:	682b      	ldr	r3, [r5, #0]
 8001900:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001908:	602b      	str	r3, [r5, #0]
 800190a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190c:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001912:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001914:	f7ff fb62 	bl	8000fdc <HAL_GetTick>
 8001918:	4680      	mov	r8, r0
 800191a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	682a      	ldr	r2, [r5, #0]
 8001920:	fa96 f3a6 	rbit	r3, r6
 8001924:	fab3 f383 	clz	r3, r3
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	fa07 f303 	lsl.w	r3, r7, r3
 8001930:	4213      	tst	r3, r2
 8001932:	f43f af2b 	beq.w	800178c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001936:	f7ff fb51 	bl	8000fdc <HAL_GetTick>
 800193a:	eba0 0008 	sub.w	r0, r0, r8
 800193e:	2864      	cmp	r0, #100	; 0x64
 8001940:	d9eb      	bls.n	800191a <HAL_RCC_OscConfig+0x19a>
 8001942:	e7d9      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001944:	2b05      	cmp	r3, #5
 8001946:	682b      	ldr	r3, [r5, #0]
 8001948:	d103      	bne.n	8001952 <HAL_RCC_OscConfig+0x1d2>
 800194a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194e:	602b      	str	r3, [r5, #0]
 8001950:	e7b3      	b.n	80018ba <HAL_RCC_OscConfig+0x13a>
 8001952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001956:	602b      	str	r3, [r5, #0]
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195e:	e7af      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001960:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <HAL_RCC_OscConfig+0x320>)
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	f002 020c 	and.w	r2, r2, #12
 8001968:	2a04      	cmp	r2, #4
 800196a:	d007      	beq.n	800197c <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	f002 020c 	and.w	r2, r2, #12
 8001972:	2a0c      	cmp	r2, #12
 8001974:	d124      	bne.n	80019c0 <HAL_RCC_OscConfig+0x240>
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	03df      	lsls	r7, r3, #15
 800197a:	d421      	bmi.n	80019c0 <HAL_RCC_OscConfig+0x240>
 800197c:	2302      	movs	r3, #2
 800197e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	4a47      	ldr	r2, [pc, #284]	; (8001aa0 <HAL_RCC_OscConfig+0x320>)
 8001984:	6810      	ldr	r0, [r2, #0]
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	fab3 f383 	clz	r3, r3
 800198e:	2101      	movs	r1, #1
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	4203      	tst	r3, r0
 800199a:	4613      	mov	r3, r2
 800199c:	d002      	beq.n	80019a4 <HAL_RCC_OscConfig+0x224>
 800199e:	68e2      	ldr	r2, [r4, #12]
 80019a0:	428a      	cmp	r2, r1
 80019a2:	d182      	bne.n	80018aa <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a4:	6858      	ldr	r0, [r3, #4]
 80019a6:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 80019aa:	fa92 f2a2 	rbit	r2, r2
 80019ae:	fab2 f182 	clz	r1, r2
 80019b2:	6922      	ldr	r2, [r4, #16]
 80019b4:	408a      	lsls	r2, r1
 80019b6:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 80019ba:	430a      	orrs	r2, r1
 80019bc:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	e6e9      	b.n	8001794 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c0:	68e2      	ldr	r2, [r4, #12]
 80019c2:	2501      	movs	r5, #1
 80019c4:	b382      	cbz	r2, 8001a28 <HAL_RCC_OscConfig+0x2a8>
 80019c6:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019d2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80019da:	f7ff faff 	bl	8000fdc <HAL_GetTick>
 80019de:	2702      	movs	r7, #2
 80019e0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	4e2f      	ldr	r6, [pc, #188]	; (8001aa0 <HAL_RCC_OscConfig+0x320>)
 80019e4:	fa97 f3a7 	rbit	r3, r7
 80019e8:	6832      	ldr	r2, [r6, #0]
 80019ea:	fa97 f3a7 	rbit	r3, r7
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	fa05 f303 	lsl.w	r3, r5, r3
 80019fa:	4213      	tst	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	6871      	ldr	r1, [r6, #4]
 8001a00:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	fab3 f283 	clz	r2, r3
 8001a0c:	6923      	ldr	r3, [r4, #16]
 8001a0e:	4093      	lsls	r3, r2
 8001a10:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8001a14:	4313      	orrs	r3, r2
 8001a16:	6073      	str	r3, [r6, #4]
 8001a18:	e6bc      	b.n	8001794 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fadf 	bl	8000fdc <HAL_GetTick>
 8001a1e:	eba0 0008 	sub.w	r0, r0, r8
 8001a22:	2802      	cmp	r0, #2
 8001a24:	d9de      	bls.n	80019e4 <HAL_RCC_OscConfig+0x264>
 8001a26:	e767      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
 8001a28:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a34:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a3c:	f7ff face 	bl	8000fdc <HAL_GetTick>
 8001a40:	2602      	movs	r6, #2
 8001a42:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a44:	4f16      	ldr	r7, [pc, #88]	; (8001aa0 <HAL_RCC_OscConfig+0x320>)
 8001a46:	fa96 f3a6 	rbit	r3, r6
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	fa96 f3a6 	rbit	r3, r6
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	fa05 f303 	lsl.w	r3, r5, r3
 8001a5c:	4213      	tst	r3, r2
 8001a5e:	f43f ae99 	beq.w	8001794 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff fabb 	bl	8000fdc <HAL_GetTick>
 8001a66:	eba0 0008 	sub.w	r0, r0, r8
 8001a6a:	2802      	cmp	r0, #2
 8001a6c:	d9eb      	bls.n	8001a46 <HAL_RCC_OscConfig+0x2c6>
 8001a6e:	e743      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a70:	686b      	ldr	r3, [r5, #4]
 8001a72:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a76:	4303      	orrs	r3, r0
 8001a78:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7a:	6869      	ldr	r1, [r5, #4]
 8001a7c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	fab3 f283 	clz	r2, r3
 8001a88:	69e3      	ldr	r3, [r4, #28]
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001a90:	4313      	orrs	r3, r2
 8001a92:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a94:	f7ff fe34 	bl	8001700 <RCC_SetFlashLatencyFromMSIRange>
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	f43f aeb6 	beq.w	800180a <HAL_RCC_OscConfig+0x8a>
 8001a9e:	e704      	b.n	80018aa <HAL_RCC_OscConfig+0x12a>
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08005284 	.word	0x08005284
 8001aa8:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aac:	69a2      	ldr	r2, [r4, #24]
 8001aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab2:	2a00      	cmp	r2, #0
 8001ab4:	d037      	beq.n	8001b26 <HAL_RCC_OscConfig+0x3a6>
 8001ab6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	2601      	movs	r6, #1
 8001ac0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ac4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001acc:	f7ff fa86 	bl	8000fdc <HAL_GetTick>
 8001ad0:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001ad4:	4680      	mov	r8, r0
 8001ad6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001ada:	682a      	ldr	r2, [r5, #0]
 8001adc:	fa97 f3a7 	rbit	r3, r7
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	fa06 f303 	lsl.w	r3, r6, r3
 8001aec:	4213      	tst	r3, r2
 8001aee:	d013      	beq.n	8001b18 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af0:	686b      	ldr	r3, [r5, #4]
 8001af2:	6a22      	ldr	r2, [r4, #32]
 8001af4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001af8:	4313      	orrs	r3, r2
 8001afa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001afc:	6869      	ldr	r1, [r5, #4]
 8001afe:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	fab3 f283 	clz	r2, r3
 8001b0a:	69e3      	ldr	r3, [r4, #28]
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001b12:	4313      	orrs	r3, r2
 8001b14:	606b      	str	r3, [r5, #4]
 8001b16:	e696      	b.n	8001846 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b18:	f7ff fa60 	bl	8000fdc <HAL_GetTick>
 8001b1c:	eba0 0008 	sub.w	r0, r0, r8
 8001b20:	2802      	cmp	r0, #2
 8001b22:	d9d8      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x356>
 8001b24:	e6e8      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
 8001b26:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b32:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fa4f 	bl	8000fdc <HAL_GetTick>
 8001b3e:	f44f 7600 	mov.w	r6, #512	; 0x200
 8001b42:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8001b44:	2701      	movs	r7, #1
 8001b46:	fa96 f3a6 	rbit	r3, r6
 8001b4a:	682a      	ldr	r2, [r5, #0]
 8001b4c:	fa96 f3a6 	rbit	r3, r6
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	fa07 f303 	lsl.w	r3, r7, r3
 8001b5c:	4213      	tst	r3, r2
 8001b5e:	f43f ae72 	beq.w	8001846 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b62:	f7ff fa3b 	bl	8000fdc <HAL_GetTick>
 8001b66:	eba0 0008 	sub.w	r0, r0, r8
 8001b6a:	2802      	cmp	r0, #2
 8001b6c:	d9eb      	bls.n	8001b46 <HAL_RCC_OscConfig+0x3c6>
 8001b6e:	e6c3      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b70:	6962      	ldr	r2, [r4, #20]
 8001b72:	2501      	movs	r5, #1
 8001b74:	49a9      	ldr	r1, [pc, #676]	; (8001e1c <HAL_RCC_OscConfig+0x69c>)
 8001b76:	b302      	cbz	r2, 8001bba <HAL_RCC_OscConfig+0x43a>
 8001b78:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	440b      	add	r3, r1
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8001b86:	f7ff fa29 	bl	8000fdc <HAL_GetTick>
 8001b8a:	2602      	movs	r6, #2
 8001b8c:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	4fa4      	ldr	r7, [pc, #656]	; (8001e20 <HAL_RCC_OscConfig+0x6a0>)
 8001b90:	fa96 f3a6 	rbit	r3, r6
 8001b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b96:	fa96 f3a6 	rbit	r3, r6
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	fa05 f303 	lsl.w	r3, r5, r3
 8001ba6:	4213      	tst	r3, r2
 8001ba8:	f47f ae51 	bne.w	800184e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff fa16 	bl	8000fdc <HAL_GetTick>
 8001bb0:	eba0 0008 	sub.w	r0, r0, r8
 8001bb4:	2802      	cmp	r0, #2
 8001bb6:	d9eb      	bls.n	8001b90 <HAL_RCC_OscConfig+0x410>
 8001bb8:	e69e      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
 8001bba:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fa08 	bl	8000fdc <HAL_GetTick>
 8001bcc:	2602      	movs	r6, #2
 8001bce:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd0:	4f93      	ldr	r7, [pc, #588]	; (8001e20 <HAL_RCC_OscConfig+0x6a0>)
 8001bd2:	fa96 f3a6 	rbit	r3, r6
 8001bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bd8:	fa96 f3a6 	rbit	r3, r6
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	fa05 f303 	lsl.w	r3, r5, r3
 8001be8:	4213      	tst	r3, r2
 8001bea:	f43f ae30 	beq.w	800184e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bee:	f7ff f9f5 	bl	8000fdc <HAL_GetTick>
 8001bf2:	eba0 0008 	sub.w	r0, r0, r8
 8001bf6:	2802      	cmp	r0, #2
 8001bf8:	d9eb      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x452>
 8001bfa:	e67d      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfc:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0x6a0>)
 8001bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c00:	00d1      	lsls	r1, r2, #3
 8001c02:	d434      	bmi.n	8001c6e <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8001c04:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4d82      	ldr	r5, [pc, #520]	; (8001e24 <HAL_RCC_OscConfig+0x6a4>)
 8001c1a:	682b      	ldr	r3, [r5, #0]
 8001c1c:	05da      	lsls	r2, r3, #23
 8001c1e:	d528      	bpl.n	8001c72 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c20:	68a3      	ldr	r3, [r4, #8]
 8001c22:	4d7f      	ldr	r5, [pc, #508]	; (8001e20 <HAL_RCC_OscConfig+0x6a0>)
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d134      	bne.n	8001c92 <HAL_RCC_OscConfig+0x512>
 8001c28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001c30:	f7ff f9d4 	bl	8000fdc <HAL_GetTick>
 8001c34:	f44f 7500 	mov.w	r5, #512	; 0x200
 8001c38:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3a:	2701      	movs	r7, #1
 8001c3c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001e20 <HAL_RCC_OscConfig+0x6a0>
 8001c40:	fa95 f3a5 	rbit	r3, r5
 8001c44:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8001c48:	fa95 f3a5 	rbit	r3, r5
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	fa07 f303 	lsl.w	r3, r7, r3
 8001c58:	4213      	tst	r3, r2
 8001c5a:	d04e      	beq.n	8001cfa <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 8001c5c:	2e00      	cmp	r6, #0
 8001c5e:	f43f adfa 	beq.w	8001856 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c62:	4a6f      	ldr	r2, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x6a0>)
 8001c64:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	6253      	str	r3, [r2, #36]	; 0x24
 8001c6c:	e5f3      	b.n	8001856 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8001c6e:	2600      	movs	r6, #0
 8001c70:	e7d2      	b.n	8001c18 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c72:	682b      	ldr	r3, [r5, #0]
 8001c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c78:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f9af 	bl	8000fdc <HAL_GetTick>
 8001c7e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	682b      	ldr	r3, [r5, #0]
 8001c82:	05db      	lsls	r3, r3, #23
 8001c84:	d4cc      	bmi.n	8001c20 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7ff f9a9 	bl	8000fdc <HAL_GetTick>
 8001c8a:	1bc0      	subs	r0, r0, r7
 8001c8c:	2864      	cmp	r0, #100	; 0x64
 8001c8e:	d9f7      	bls.n	8001c80 <HAL_RCC_OscConfig+0x500>
 8001c90:	e632      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c92:	bb23      	cbnz	r3, 8001cde <HAL_RCC_OscConfig+0x55e>
 8001c94:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001c96:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c9e:	636b      	str	r3, [r5, #52]	; 0x34
 8001ca0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca2:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001caa:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001cac:	f7ff f996 	bl	8000fdc <HAL_GetTick>
 8001cb0:	4681      	mov	r9, r0
 8001cb2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001cb8:	fa97 f3a7 	rbit	r3, r7
 8001cbc:	fab3 f383 	clz	r3, r3
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	fa08 f303 	lsl.w	r3, r8, r3
 8001cc8:	4213      	tst	r3, r2
 8001cca:	d0c7      	beq.n	8001c5c <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7ff f986 	bl	8000fdc <HAL_GetTick>
 8001cd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cd4:	eba0 0009 	sub.w	r0, r0, r9
 8001cd8:	4298      	cmp	r0, r3
 8001cda:	d9ea      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x532>
 8001cdc:	e60c      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001ce2:	d103      	bne.n	8001cec <HAL_RCC_OscConfig+0x56c>
 8001ce4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce8:	636b      	str	r3, [r5, #52]	; 0x34
 8001cea:	e79d      	b.n	8001c28 <HAL_RCC_OscConfig+0x4a8>
 8001cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf0:	636b      	str	r3, [r5, #52]	; 0x34
 8001cf2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001cf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cf8:	e799      	b.n	8001c2e <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff f96f 	bl	8000fdc <HAL_GetTick>
 8001cfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d02:	eba0 0009 	sub.w	r0, r0, r9
 8001d06:	4298      	cmp	r0, r3
 8001d08:	d99a      	bls.n	8001c40 <HAL_RCC_OscConfig+0x4c0>
 8001d0a:	e5f5      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d0c:	4d44      	ldr	r5, [pc, #272]	; (8001e20 <HAL_RCC_OscConfig+0x6a0>)
 8001d0e:	68ab      	ldr	r3, [r5, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b0c      	cmp	r3, #12
 8001d16:	f43f adc8 	beq.w	80018aa <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1a:	2a02      	cmp	r2, #2
 8001d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d20:	d156      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x650>
 8001d22:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d30:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d38:	f7ff f950 	bl	8000fdc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3c:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8001d3e:	4680      	mov	r8, r0
 8001d40:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d44:	2501      	movs	r5, #1
 8001d46:	fa97 f3a7 	rbit	r3, r7
 8001d4a:	6832      	ldr	r2, [r6, #0]
 8001d4c:	fa97 f3a7 	rbit	r3, r7
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa05 f303 	lsl.w	r3, r5, r3
 8001d5c:	4213      	tst	r3, r2
 8001d5e:	d130      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d60:	68b2      	ldr	r2, [r6, #8]
 8001d62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d66:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60b3      	str	r3, [r6, #8]
 8001d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d78:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d84:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f926 	bl	8000fdc <HAL_GetTick>
 8001d90:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001d94:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d96:	2501      	movs	r5, #1
 8001d98:	4e21      	ldr	r6, [pc, #132]	; (8001e20 <HAL_RCC_OscConfig+0x6a0>)
 8001d9a:	fa94 f3a4 	rbit	r3, r4
 8001d9e:	6832      	ldr	r2, [r6, #0]
 8001da0:	fa94 f3a4 	rbit	r3, r4
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa05 f303 	lsl.w	r3, r5, r3
 8001db0:	4213      	tst	r3, r2
 8001db2:	f47f ad54 	bne.w	800185e <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db6:	f7ff f911 	bl	8000fdc <HAL_GetTick>
 8001dba:	1bc0      	subs	r0, r0, r7
 8001dbc:	2802      	cmp	r0, #2
 8001dbe:	d9ec      	bls.n	8001d9a <HAL_RCC_OscConfig+0x61a>
 8001dc0:	e59a      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7ff f90b 	bl	8000fdc <HAL_GetTick>
 8001dc6:	eba0 0008 	sub.w	r0, r0, r8
 8001dca:	2802      	cmp	r0, #2
 8001dcc:	d9bb      	bls.n	8001d46 <HAL_RCC_OscConfig+0x5c6>
 8001dce:	e593      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
 8001dd0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dde:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001de6:	f7ff f8f9 	bl	8000fdc <HAL_GetTick>
 8001dea:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001dee:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	2601      	movs	r6, #1
 8001df2:	fa94 f3a4 	rbit	r3, r4
 8001df6:	682a      	ldr	r2, [r5, #0]
 8001df8:	fa94 f3a4 	rbit	r3, r4
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa06 f303 	lsl.w	r3, r6, r3
 8001e08:	4213      	tst	r3, r2
 8001e0a:	f43f ad28 	beq.w	800185e <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff f8e5 	bl	8000fdc <HAL_GetTick>
 8001e12:	1bc0      	subs	r0, r0, r7
 8001e14:	2802      	cmp	r0, #2
 8001e16:	d9ec      	bls.n	8001df2 <HAL_RCC_OscConfig+0x672>
 8001e18:	e56e      	b.n	80018f8 <HAL_RCC_OscConfig+0x178>
 8001e1a:	bf00      	nop
 8001e1c:	1091c1a0 	.word	0x1091c1a0
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000

08001e28 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001e28:	491e      	ldr	r1, [pc, #120]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001e2a:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001e2c:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8001e2e:	f003 020c 	and.w	r2, r3, #12
 8001e32:	2a08      	cmp	r2, #8
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x1a>
 8001e36:	2a0c      	cmp	r2, #12
 8001e38:	d005      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0x1e>
 8001e3a:	2a04      	cmp	r2, #4
 8001e3c:	d122      	bne.n	8001e84 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8001e3e:	481a      	ldr	r0, [pc, #104]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8001e40:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001e42:	481a      	ldr	r0, [pc, #104]	; (8001eac <HAL_RCC_GetSysClockFreq+0x84>)
 8001e44:	bd10      	pop	{r4, pc}
 8001e46:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e4a:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e4e:	fab2 f282 	clz	r2, r2
 8001e52:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8001e56:	fa20 f202 	lsr.w	r2, r0, r2
 8001e5a:	4815      	ldr	r0, [pc, #84]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x88>)
 8001e5c:	5c84      	ldrb	r4, [r0, r2]
 8001e5e:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001e62:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001e66:	fab0 f280 	clz	r2, r0
 8001e6a:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e6e:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001e70:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e72:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8001e74:	bf4c      	ite	mi
 8001e76:	4b0d      	ldrmi	r3, [pc, #52]	; (8001eac <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8001e78:	4b0b      	ldrpl	r3, [pc, #44]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001e7a:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8001e7c:	4363      	muls	r3, r4
 8001e7e:	fbb3 f0f0 	udiv	r0, r3, r0
 8001e82:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001e84:	6848      	ldr	r0, [r1, #4]
 8001e86:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001e96:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001e98:	1c43      	adds	r3, r0, #1
 8001e9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e9e:	4098      	lsls	r0, r3
 8001ea0:	bd10      	pop	{r4, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	00f42400 	.word	0x00f42400
 8001eac:	016e3600 	.word	0x016e3600
 8001eb0:	0800529c 	.word	0x0800529c

08001eb4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001eb4:	4b6a      	ldr	r3, [pc, #424]	; (8002060 <HAL_RCC_ClockConfig+0x1ac>)
{
 8001eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001eba:	681a      	ldr	r2, [r3, #0]
{
 8001ebc:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ebe:	f002 0201 	and.w	r2, r2, #1
 8001ec2:	428a      	cmp	r2, r1
{
 8001ec4:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ec6:	d330      	bcc.n	8001f2a <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	6832      	ldr	r2, [r6, #0]
 8001eca:	0794      	lsls	r4, r2, #30
 8001ecc:	d440      	bmi.n	8001f50 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ece:	07d0      	lsls	r0, r2, #31
 8001ed0:	d446      	bmi.n	8001f60 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ed2:	4b63      	ldr	r3, [pc, #396]	; (8002060 <HAL_RCC_ClockConfig+0x1ac>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	f002 0201 	and.w	r2, r2, #1
 8001eda:	4295      	cmp	r5, r2
 8001edc:	f0c0 80ae 	bcc.w	800203c <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	6832      	ldr	r2, [r6, #0]
 8001ee2:	0751      	lsls	r1, r2, #29
 8001ee4:	f100 80b3 	bmi.w	800204e <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee8:	0713      	lsls	r3, r2, #28
 8001eea:	d507      	bpl.n	8001efc <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eec:	4a5d      	ldr	r2, [pc, #372]	; (8002064 <HAL_RCC_ClockConfig+0x1b0>)
 8001eee:	6931      	ldr	r1, [r6, #16]
 8001ef0:	6893      	ldr	r3, [r2, #8]
 8001ef2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ef6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001efa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001efc:	f7ff ff94 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 8001f00:	4b58      	ldr	r3, [pc, #352]	; (8002064 <HAL_RCC_ClockConfig+0x1b0>)
 8001f02:	22f0      	movs	r2, #240	; 0xf0
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	fa92 f2a2 	rbit	r2, r2
 8001f0a:	fab2 f282 	clz	r2, r2
 8001f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f12:	40d3      	lsrs	r3, r2
 8001f14:	4a54      	ldr	r2, [pc, #336]	; (8002068 <HAL_RCC_ClockConfig+0x1b4>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	40d8      	lsrs	r0, r3
 8001f1a:	4b54      	ldr	r3, [pc, #336]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001f1c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff f834 	bl	8000f8c <HAL_InitTick>
  return HAL_OK;
 8001f24:	2000      	movs	r0, #0
}
 8001f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	2901      	cmp	r1, #1
 8001f2c:	bf02      	ittt	eq
 8001f2e:	681a      	ldreq	r2, [r3, #0]
 8001f30:	f042 0204 	orreq.w	r2, r2, #4
 8001f34:	601a      	streq	r2, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	4299      	cmp	r1, r3
 8001f48:	d0be      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4944      	ldr	r1, [pc, #272]	; (8002064 <HAL_RCC_ClockConfig+0x1b0>)
 8001f52:	68b0      	ldr	r0, [r6, #8]
 8001f54:	688b      	ldr	r3, [r1, #8]
 8001f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f5a:	4303      	orrs	r3, r0
 8001f5c:	608b      	str	r3, [r1, #8]
 8001f5e:	e7b6      	b.n	8001ece <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f60:	6872      	ldr	r2, [r6, #4]
 8001f62:	4940      	ldr	r1, [pc, #256]	; (8002064 <HAL_RCC_ClockConfig+0x1b0>)
 8001f64:	2a02      	cmp	r2, #2
 8001f66:	d10f      	bne.n	8001f88 <HAL_RCC_ClockConfig+0xd4>
 8001f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001f70:	6808      	ldr	r0, [r1, #0]
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	4203      	tst	r3, r0
 8001f86:	e013      	b.n	8001fb0 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f88:	2a03      	cmp	r2, #3
 8001f8a:	d102      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
 8001f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f90:	e7ec      	b.n	8001f6c <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f92:	2a01      	cmp	r2, #1
 8001f94:	d129      	bne.n	8001fea <HAL_RCC_ClockConfig+0x136>
 8001f96:	2302      	movs	r3, #2
 8001f98:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	6809      	ldr	r1, [r1, #0]
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001fb0:	d0cb      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb2:	4c2c      	ldr	r4, [pc, #176]	; (8002064 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb8:	68a3      	ldr	r3, [r4, #8]
 8001fba:	f023 0303 	bic.w	r3, r3, #3
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001fc2:	f7ff f80b 	bl	8000fdc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc6:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001fc8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d110      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fce:	68a3      	ldr	r3, [r4, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	f43f af7c 	beq.w	8001ed2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fda:	f7fe ffff 	bl	8000fdc <HAL_GetTick>
 8001fde:	1bc0      	subs	r0, r0, r7
 8001fe0:	4540      	cmp	r0, r8
 8001fe2:	d9f4      	bls.n	8001fce <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fee:	e7bd      	b.n	8001f6c <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d10b      	bne.n	800200c <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff4:	68a3      	ldr	r3, [r4, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	f43f af69 	beq.w	8001ed2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002000:	f7fe ffec 	bl	8000fdc <HAL_GetTick>
 8002004:	1bc0      	subs	r0, r0, r7
 8002006:	4540      	cmp	r0, r8
 8002008:	d9f4      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x140>
 800200a:	e7eb      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800200c:	2b01      	cmp	r3, #1
 800200e:	d110      	bne.n	8002032 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002010:	68a3      	ldr	r3, [r4, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	f43f af5b 	beq.w	8001ed2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201c:	f7fe ffde 	bl	8000fdc <HAL_GetTick>
 8002020:	1bc0      	subs	r0, r0, r7
 8002022:	4540      	cmp	r0, r8
 8002024:	d9f4      	bls.n	8002010 <HAL_RCC_ClockConfig+0x15c>
 8002026:	e7dd      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f7fe ffd8 	bl	8000fdc <HAL_GetTick>
 800202c:	1bc0      	subs	r0, r0, r7
 800202e:	4540      	cmp	r0, r8
 8002030:	d8d8      	bhi.n	8001fe4 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002032:	68a3      	ldr	r3, [r4, #8]
 8002034:	f013 0f0c 	tst.w	r3, #12
 8002038:	d1f6      	bne.n	8002028 <HAL_RCC_ClockConfig+0x174>
 800203a:	e74a      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	07da      	lsls	r2, r3, #31
 8002048:	f53f af7f 	bmi.w	8001f4a <HAL_RCC_ClockConfig+0x96>
 800204c:	e748      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204e:	4905      	ldr	r1, [pc, #20]	; (8002064 <HAL_RCC_ClockConfig+0x1b0>)
 8002050:	68f0      	ldr	r0, [r6, #12]
 8002052:	688b      	ldr	r3, [r1, #8]
 8002054:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002058:	4303      	orrs	r3, r0
 800205a:	608b      	str	r3, [r1, #8]
 800205c:	e744      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x34>
 800205e:	bf00      	nop
 8002060:	40023c00 	.word	0x40023c00
 8002064:	40023800 	.word	0x40023800
 8002068:	08005284 	.word	0x08005284
 800206c:	20000000 	.word	0x20000000

08002070 <HAL_RCC_GetHCLKFreq>:
}
 8002070:	4b01      	ldr	r3, [pc, #4]	; (8002078 <HAL_RCC_GetHCLKFreq+0x8>)
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000

0800207c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800207e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	fa92 f2a2 	rbit	r2, r2
 8002088:	fab2 f282 	clz	r2, r2
 800208c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002090:	40d3      	lsrs	r3, r2
 8002092:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002094:	5cd3      	ldrb	r3, [r2, r3]
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002098:	6810      	ldr	r0, [r2, #0]
}    
 800209a:	40d8      	lsrs	r0, r3
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	08005294 	.word	0x08005294
 80020a8:	20000000 	.word	0x20000000

080020ac <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(struct __SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 80020ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020b0:	4604      	mov	r4, r0
 80020b2:	460e      	mov	r6, r1
 80020b4:	4690      	mov	r8, r2
 80020b6:	461d      	mov	r5, r3
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020b8:	f7fe ff90 	bl	8000fdc <HAL_GetTick>
 80020bc:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 80020be:	f1b8 0f00 	cmp.w	r8, #0
 80020c2:	d033      	beq.n	800212c <SPI_WaitOnFlagUntilTimeout+0x80>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80020c4:	6822      	ldr	r2, [r4, #0]
 80020c6:	6893      	ldr	r3, [r2, #8]
 80020c8:	ea36 0303 	bics.w	r3, r6, r3
 80020cc:	d133      	bne.n	8002136 <SPI_WaitOnFlagUntilTimeout+0x8a>
    {
      if(Timeout != HAL_MAX_DELAY)
 80020ce:	1c6b      	adds	r3, r5, #1
 80020d0:	d0f9      	beq.n	80020c6 <SPI_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020d2:	b145      	cbz	r5, 80020e6 <SPI_WaitOnFlagUntilTimeout+0x3a>
 80020d4:	f7fe ff82 	bl	8000fdc <HAL_GetTick>
 80020d8:	1bc0      	subs	r0, r0, r7
 80020da:	4285      	cmp	r5, r0
 80020dc:	d2f2      	bcs.n	80020c4 <SPI_WaitOnFlagUntilTimeout+0x18>
 80020de:	e002      	b.n	80020e6 <SPI_WaitOnFlagUntilTimeout+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 80020e0:	1c69      	adds	r1, r5, #1
 80020e2:	d024      	beq.n	800212e <SPI_WaitOnFlagUntilTimeout+0x82>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020e4:	b9ed      	cbnz	r5, 8002122 <SPI_WaitOnFlagUntilTimeout+0x76>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020ee:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020f6:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80020fa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80020fe:	d107      	bne.n	8002110 <SPI_WaitOnFlagUntilTimeout+0x64>
          {
            SPI_RESET_CRC(hspi);
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800210e:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8002110:	2301      	movs	r3, #1
 8002112:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8002116:	2300      	movs	r3, #0

          return HAL_TIMEOUT;
 8002118:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 800211a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 800211e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002122:	f7fe ff5b 	bl	8000fdc <HAL_GetTick>
 8002126:	1bc0      	subs	r0, r0, r7
 8002128:	4285      	cmp	r5, r0
 800212a:	d3dc      	bcc.n	80020e6 <SPI_WaitOnFlagUntilTimeout+0x3a>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	6893      	ldr	r3, [r2, #8]
 8002130:	ea36 0303 	bics.w	r3, r6, r3
 8002134:	d1d4      	bne.n	80020e0 <SPI_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 8002136:	2000      	movs	r0, #0
 8002138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800213c <HAL_SPI_Transmit>:
{
 800213c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800213e:	4604      	mov	r4, r0
  if(hspi->State == HAL_SPI_STATE_READY)
 8002140:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
{
 8002144:	461d      	mov	r5, r3
  if(hspi->State == HAL_SPI_STATE_READY)
 8002146:	b2c0      	uxtb	r0, r0
 8002148:	2801      	cmp	r0, #1
 800214a:	f040 80a7 	bne.w	800229c <HAL_SPI_Transmit+0x160>
    if((pData == NULL ) || (Size == 0)) 
 800214e:	2900      	cmp	r1, #0
 8002150:	d064      	beq.n	800221c <HAL_SPI_Transmit+0xe0>
 8002152:	2a00      	cmp	r2, #0
 8002154:	d062      	beq.n	800221c <HAL_SPI_Transmit+0xe0>
    __HAL_LOCK(hspi);
 8002156:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800215a:	2b01      	cmp	r3, #1
 800215c:	f000 809e 	beq.w	800229c <HAL_SPI_Transmit+0x160>
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 8002160:	2312      	movs	r3, #18
 8002162:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002166:	2300      	movs	r3, #0
 8002168:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->TxISR = 0;
 800216a:	64e3      	str	r3, [r4, #76]	; 0x4c
    hspi->TxXferCount = Size;
 800216c:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->RxISR = 0;
 800216e:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->pRxBuffPtr  = NULL;
 8002170:	63a3      	str	r3, [r4, #56]	; 0x38
    hspi->RxXferSize  = 0;
 8002172:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->RxXferCount = 0;
 8002174:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_LOCK(hspi);
 8002178:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800217c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    hspi->pTxBuffPtr  = pData;
 8002180:	6321      	str	r1, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8002182:	86a2      	strh	r2, [r4, #52]	; 0x34
 8002184:	6823      	ldr	r3, [r4, #0]
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002186:	d107      	bne.n	8002198 <HAL_SPI_Transmit+0x5c>
      SPI_RESET_CRC(hspi);
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002196:	601a      	str	r2, [r3, #0]
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002198:	68a2      	ldr	r2, [r4, #8]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800219a:	68e0      	ldr	r0, [r4, #12]
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800219c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
      SPI_1LINE_TX(hspi);
 80021a0:	bf02      	ittt	eq
 80021a2:	681a      	ldreq	r2, [r3, #0]
 80021a4:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 80021a8:	601a      	streq	r2, [r3, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	0652      	lsls	r2, r2, #25
      __HAL_SPI_ENABLE(hspi);
 80021ae:	bf5e      	ittt	pl
 80021b0:	681a      	ldrpl	r2, [r3, #0]
 80021b2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80021b6:	601a      	strpl	r2, [r3, #0]
 80021b8:	6862      	ldr	r2, [r4, #4]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d137      	bne.n	800222e <HAL_SPI_Transmit+0xf2>
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80021be:	b11a      	cbz	r2, 80021c8 <HAL_SPI_Transmit+0x8c>
 80021c0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80021c2:	b292      	uxth	r2, r2
 80021c4:	2a01      	cmp	r2, #1
 80021c6:	d107      	bne.n	80021d8 <HAL_SPI_Transmit+0x9c>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80021c8:	1c4a      	adds	r2, r1, #1
 80021ca:	6322      	str	r2, [r4, #48]	; 0x30
 80021cc:	780a      	ldrb	r2, [r1, #0]
 80021ce:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80021d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	86e3      	strh	r3, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0)
 80021d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b9b3      	cbnz	r3, 800220c <HAL_SPI_Transmit+0xd0>
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 80021de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80021e0:	2102      	movs	r1, #2
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 80021e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80021e6:	bf08      	it	eq
 80021e8:	6822      	ldreq	r2, [r4, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80021ea:	4620      	mov	r0, r4
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80021ec:	bf02      	ittt	eq
 80021ee:	6813      	ldreq	r3, [r2, #0]
 80021f0:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80021f4:	6013      	streq	r3, [r2, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80021f6:	462b      	mov	r3, r5
 80021f8:	2200      	movs	r2, #0
 80021fa:	f7ff ff57 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 80021fe:	2800      	cmp	r0, #0
 8002200:	d035      	beq.n	800226e <HAL_SPI_Transmit+0x132>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002202:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002204:	f043 0320 	orr.w	r3, r3, #32
 8002208:	6563      	str	r3, [r4, #84]	; 0x54
 800220a:	e006      	b.n	800221a <HAL_SPI_Transmit+0xde>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800220c:	462b      	mov	r3, r5
 800220e:	2200      	movs	r2, #0
 8002210:	2102      	movs	r1, #2
 8002212:	4620      	mov	r0, r4
 8002214:	f7ff ff4a 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 8002218:	b110      	cbz	r0, 8002220 <HAL_SPI_Transmit+0xe4>
      return HAL_TIMEOUT;
 800221a:	2003      	movs	r0, #3
}
 800221c:	b003      	add	sp, #12
 800221e:	bd30      	pop	{r4, r5, pc}
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8002220:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002222:	6822      	ldr	r2, [r4, #0]
 8002224:	1c59      	adds	r1, r3, #1
 8002226:	6321      	str	r1, [r4, #48]	; 0x30
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	60d3      	str	r3, [r2, #12]
 800222c:	e7d0      	b.n	80021d0 <HAL_SPI_Transmit+0x94>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800222e:	b11a      	cbz	r2, 8002238 <HAL_SPI_Transmit+0xfc>
 8002230:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002232:	b292      	uxth	r2, r2
 8002234:	2a01      	cmp	r2, #1
 8002236:	d107      	bne.n	8002248 <HAL_SPI_Transmit+0x10c>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8002238:	f831 2b02 	ldrh.w	r2, [r1], #2
 800223c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 800223e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002240:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002242:	3b01      	subs	r3, #1
 8002244:	b29b      	uxth	r3, r3
 8002246:	86e3      	strh	r3, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0)
 8002248:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0c6      	beq.n	80021de <HAL_SPI_Transmit+0xa2>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002250:	462b      	mov	r3, r5
 8002252:	2200      	movs	r2, #0
 8002254:	2102      	movs	r1, #2
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff ff28 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 800225c:	2800      	cmp	r0, #0
 800225e:	d1dc      	bne.n	800221a <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8002260:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002262:	6822      	ldr	r2, [r4, #0]
 8002264:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002268:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr+=2;
 800226a:	6323      	str	r3, [r4, #48]	; 0x30
 800226c:	e7e8      	b.n	8002240 <HAL_SPI_Transmit+0x104>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 800226e:	462b      	mov	r3, r5
 8002270:	2201      	movs	r2, #1
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	4620      	mov	r0, r4
 8002276:	f7ff ff19 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 800227a:	2800      	cmp	r0, #0
 800227c:	d1c1      	bne.n	8002202 <HAL_SPI_Transmit+0xc6>
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800227e:	68a3      	ldr	r3, [r4, #8]
 8002280:	b92b      	cbnz	r3, 800228e <HAL_SPI_Transmit+0x152>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	9201      	str	r2, [sp, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY; 
 800228e:	2301      	movs	r3, #1
 8002290:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    __HAL_UNLOCK(hspi);
 8002294:	2300      	movs	r3, #0
 8002296:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_OK;
 800229a:	e7bf      	b.n	800221c <HAL_SPI_Transmit+0xe0>
    return HAL_BUSY;
 800229c:	2002      	movs	r0, #2
 800229e:	e7bd      	b.n	800221c <HAL_SPI_Transmit+0xe0>

080022a0 <HAL_SPI_TransmitReceive>:
{
 80022a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022a2:	4604      	mov	r4, r0
  __IO uint16_t tmpreg = 0;
 80022a4:	2000      	movs	r0, #0
 80022a6:	f8ad 0006 	strh.w	r0, [sp, #6]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 80022aa:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
{
 80022ae:	9d06      	ldr	r5, [sp, #24]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 80022b0:	2801      	cmp	r0, #1
 80022b2:	d004      	beq.n	80022be <HAL_SPI_TransmitReceive+0x1e>
 80022b4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80022b8:	2822      	cmp	r0, #34	; 0x22
 80022ba:	f040 8153 	bne.w	8002564 <HAL_SPI_TransmitReceive+0x2c4>
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 80022be:	2900      	cmp	r1, #0
 80022c0:	f000 814a 	beq.w	8002558 <HAL_SPI_TransmitReceive+0x2b8>
 80022c4:	2a00      	cmp	r2, #0
 80022c6:	f000 8147 	beq.w	8002558 <HAL_SPI_TransmitReceive+0x2b8>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8144 	beq.w	8002558 <HAL_SPI_TransmitReceive+0x2b8>
    __HAL_LOCK(hspi);
 80022d0:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 80022d4:	2801      	cmp	r0, #1
 80022d6:	f000 8145 	beq.w	8002564 <HAL_SPI_TransmitReceive+0x2c4>
 80022da:	2001      	movs	r0, #1
 80022dc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    if(hspi->State == HAL_SPI_STATE_READY)
 80022e0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
    hspi->RxXferSize  = Size;
 80022e4:	87a3      	strh	r3, [r4, #60]	; 0x3c
    if(hspi->State == HAL_SPI_STATE_READY)
 80022e6:	2801      	cmp	r0, #1
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022e8:	bf04      	itt	eq
 80022ea:	2032      	moveq	r0, #50	; 0x32
 80022ec:	f884 0051 	strbeq.w	r0, [r4, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022f0:	2000      	movs	r0, #0
 80022f2:	6560      	str	r0, [r4, #84]	; 0x54
    hspi->RxISR = 0;
 80022f4:	64a0      	str	r0, [r4, #72]	; 0x48
    hspi->TxISR = 0;
 80022f6:	64e0      	str	r0, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    hspi->RxXferCount = Size;  
 80022fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022fc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hspi->TxXferSize  = Size; 
 8002300:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 8002302:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->pRxBuffPtr  = pRxData;
 8002304:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->pTxBuffPtr  = pTxData;
 8002306:	6321      	str	r1, [r4, #48]	; 0x30
 8002308:	6823      	ldr	r3, [r4, #0]
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800230a:	d107      	bne.n	800231c <HAL_SPI_TransmitReceive+0x7c>
      SPI_RESET_CRC(hspi);
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800231a:	601a      	str	r2, [r3, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	0652      	lsls	r2, r2, #25
      __HAL_SPI_ENABLE(hspi);
 8002320:	bf5e      	ittt	pl
 8002322:	681a      	ldrpl	r2, [r3, #0]
 8002324:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002328:	601a      	strpl	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800232a:	68e2      	ldr	r2, [r4, #12]
 800232c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002330:	6862      	ldr	r2, [r4, #4]
 8002332:	d178      	bne.n	8002426 <HAL_SPI_TransmitReceive+0x186>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8002334:	b132      	cbz	r2, 8002344 <HAL_SPI_TransmitReceive+0xa4>
 8002336:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800233a:	d10b      	bne.n	8002354 <HAL_SPI_TransmitReceive+0xb4>
 800233c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800233e:	b292      	uxth	r2, r2
 8002340:	2a01      	cmp	r2, #1
 8002342:	d107      	bne.n	8002354 <HAL_SPI_TransmitReceive+0xb4>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8002344:	f831 2b02 	ldrh.w	r2, [r1], #2
 8002348:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800234a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr+=2;
 800234c:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800234e:	3a01      	subs	r2, #1
 8002350:	b292      	uxth	r2, r2
 8002352:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 8002354:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002356:	b292      	uxth	r2, r2
 8002358:	2a00      	cmp	r2, #0
 800235a:	d15b      	bne.n	8002414 <HAL_SPI_TransmitReceive+0x174>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800235c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002360:	bf02      	ittt	eq
 8002362:	681a      	ldreq	r2, [r3, #0]
 8002364:	f442 5280 	orreq.w	r2, r2, #4096	; 0x1000
 8002368:	601a      	streq	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800236a:	462b      	mov	r3, r5
 800236c:	2200      	movs	r2, #0
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800236e:	2101      	movs	r1, #1
 8002370:	4620      	mov	r0, r4
 8002372:	f7ff fe9b 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 8002376:	b9d8      	cbnz	r0, 80023b0 <HAL_SPI_TransmitReceive+0x110>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800237e:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr+=2;
 8002382:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8002384:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002386:	3b01      	subs	r3, #1
 8002388:	b29b      	uxth	r3, r3
 800238a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800238c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800238e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002392:	f040 80bd 	bne.w	8002510 <HAL_SPI_TransmitReceive+0x270>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002396:	462b      	mov	r3, r5
 8002398:	2200      	movs	r2, #0
 800239a:	2101      	movs	r1, #1
 800239c:	4620      	mov	r0, r4
 800239e:	f7ff fe85 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 80023a2:	2800      	cmp	r0, #0
 80023a4:	f000 80ad 	beq.w	8002502 <HAL_SPI_TransmitReceive+0x262>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80023a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023aa:	f043 0302 	orr.w	r3, r3, #2
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ae:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80023b0:	2003      	movs	r0, #3
}
 80023b2:	b003      	add	sp, #12
 80023b4:	bd30      	pop	{r4, r5, pc}
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80023b6:	462b      	mov	r3, r5
 80023b8:	2200      	movs	r2, #0
 80023ba:	2102      	movs	r1, #2
 80023bc:	4620      	mov	r0, r4
 80023be:	f7ff fe75 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d1f4      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x110>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80023c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	f833 1b02 	ldrh.w	r1, [r3], #2
 80023ce:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr+=2;
 80023d0:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 80023d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80023da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b93b      	cbnz	r3, 80023f0 <HAL_SPI_TransmitReceive+0x150>
 80023e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80023e6:	bf02      	ittt	eq
 80023e8:	6813      	ldreq	r3, [r2, #0]
 80023ea:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80023ee:	6013      	streq	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80023f0:	462b      	mov	r3, r5
 80023f2:	2200      	movs	r2, #0
 80023f4:	2101      	movs	r1, #1
 80023f6:	4620      	mov	r0, r4
 80023f8:	f7ff fe58 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d1d7      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x110>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002406:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr+=2;
 800240a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 800240c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800240e:	3b01      	subs	r3, #1
 8002410:	b29b      	uxth	r3, r3
 8002412:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8002414:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1cc      	bne.n	80023b6 <HAL_SPI_TransmitReceive+0x116>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 800241c:	6862      	ldr	r2, [r4, #4]
 800241e:	2a00      	cmp	r2, #0
 8002420:	d1b4      	bne.n	800238c <HAL_SPI_TransmitReceive+0xec>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002422:	462b      	mov	r3, r5
 8002424:	e7a3      	b.n	800236e <HAL_SPI_TransmitReceive+0xce>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8002426:	b132      	cbz	r2, 8002436 <HAL_SPI_TransmitReceive+0x196>
 8002428:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800242c:	d10b      	bne.n	8002446 <HAL_SPI_TransmitReceive+0x1a6>
 800242e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002430:	b292      	uxth	r2, r2
 8002432:	2a01      	cmp	r2, #1
 8002434:	d107      	bne.n	8002446 <HAL_SPI_TransmitReceive+0x1a6>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8002436:	1c4a      	adds	r2, r1, #1
 8002438:	6322      	str	r2, [r4, #48]	; 0x30
 800243a:	780a      	ldrb	r2, [r1, #0]
 800243c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800243e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002440:	3a01      	subs	r2, #1
 8002442:	b292      	uxth	r2, r2
 8002444:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 8002446:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002448:	b292      	uxth	r2, r2
 800244a:	2a00      	cmp	r2, #0
 800244c:	d145      	bne.n	80024da <HAL_SPI_TransmitReceive+0x23a>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800244e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002452:	bf08      	it	eq
 8002454:	681a      	ldreq	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002456:	f04f 0101 	mov.w	r1, #1
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800245a:	bf04      	itt	eq
 800245c:	f442 5280 	orreq.w	r2, r2, #4096	; 0x1000
 8002460:	601a      	streq	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002462:	4620      	mov	r0, r4
 8002464:	462b      	mov	r3, r5
 8002466:	2200      	movs	r2, #0
 8002468:	f7ff fe20 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 800246c:	2800      	cmp	r0, #0
 800246e:	d19f      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x110>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002470:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8002472:	6822      	ldr	r2, [r4, #0]
 8002474:	68d2      	ldr	r2, [r2, #12]
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	e784      	b.n	8002384 <HAL_SPI_TransmitReceive+0xe4>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800247a:	462b      	mov	r3, r5
 800247c:	2200      	movs	r2, #0
 800247e:	2102      	movs	r1, #2
 8002480:	4620      	mov	r0, r4
 8002482:	f7ff fe13 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 8002486:	2800      	cmp	r0, #0
 8002488:	d192      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x110>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800248a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800248c:	6822      	ldr	r2, [r4, #0]
 800248e:	1c59      	adds	r1, r3, #1
 8002490:	6321      	str	r1, [r4, #48]	; 0x30
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 8002496:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002498:	3b01      	subs	r3, #1
 800249a:	b29b      	uxth	r3, r3
 800249c:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800249e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	b93b      	cbnz	r3, 80024b4 <HAL_SPI_TransmitReceive+0x214>
 80024a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80024aa:	bf02      	ittt	eq
 80024ac:	6813      	ldreq	r3, [r2, #0]
 80024ae:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80024b2:	6013      	streq	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80024b4:	462b      	mov	r3, r5
 80024b6:	2200      	movs	r2, #0
 80024b8:	2101      	movs	r1, #1
 80024ba:	4620      	mov	r0, r4
 80024bc:	f7ff fdf6 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	f47f af75 	bne.w	80023b0 <HAL_SPI_TransmitReceive+0x110>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80024c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	63a2      	str	r2, [r4, #56]	; 0x38
 80024cc:	6822      	ldr	r2, [r4, #0]
 80024ce:	68d2      	ldr	r2, [r2, #12]
 80024d0:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80024d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 80024da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1cb      	bne.n	800247a <HAL_SPI_TransmitReceive+0x1da>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 80024e2:	6862      	ldr	r2, [r4, #4]
 80024e4:	2a00      	cmp	r2, #0
 80024e6:	f47f af51 	bne.w	800238c <HAL_SPI_TransmitReceive+0xec>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80024ea:	462b      	mov	r3, r5
 80024ec:	2101      	movs	r1, #1
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7ff fddc 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 80024f4:	2800      	cmp	r0, #0
 80024f6:	f47f af5b 	bne.w	80023b0 <HAL_SPI_TransmitReceive+0x110>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80024fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	63a2      	str	r2, [r4, #56]	; 0x38
 8002500:	e7b7      	b.n	8002472 <HAL_SPI_TransmitReceive+0x1d2>
      tmpreg = hspi->Instance->DR;
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg);
 800250c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8002510:	462b      	mov	r3, r5
 8002512:	2201      	movs	r2, #1
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	4620      	mov	r0, r4
 8002518:	f7ff fdc8 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 800251c:	b118      	cbz	r0, 8002526 <HAL_SPI_TransmitReceive+0x286>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800251e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	e743      	b.n	80023ae <HAL_SPI_TransmitReceive+0x10e>
    hspi->State = HAL_SPI_STATE_READY;
 8002526:	2101      	movs	r1, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8002528:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_READY;
 800252a:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800252e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002532:	d113      	bne.n	800255c <HAL_SPI_TransmitReceive+0x2bc>
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	06d2      	lsls	r2, r2, #27
 800253a:	d50f      	bpl.n	800255c <HAL_SPI_TransmitReceive+0x2bc>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800253c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800253e:	f042 0202 	orr.w	r2, r2, #2
 8002542:	6562      	str	r2, [r4, #84]	; 0x54
        SPI_RESET_CRC(hspi);
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002552:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hspi);
 8002554:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      return  HAL_ERROR;
 8002558:	2001      	movs	r0, #1
 800255a:	e72a      	b.n	80023b2 <HAL_SPI_TransmitReceive+0x112>
    __HAL_UNLOCK(hspi);
 800255c:	2300      	movs	r3, #0
 800255e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_OK;
 8002562:	e726      	b.n	80023b2 <HAL_SPI_TransmitReceive+0x112>
    return HAL_BUSY;
 8002564:	2002      	movs	r0, #2
 8002566:	e724      	b.n	80023b2 <HAL_SPI_TransmitReceive+0x112>

08002568 <HAL_SPI_Receive>:
{
 8002568:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800256a:	461e      	mov	r6, r3
  __IO uint16_t tmpreg = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	f8ad 300e 	strh.w	r3, [sp, #14]
  if(hspi->State == HAL_SPI_STATE_READY)
 8002572:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
{
 8002576:	4604      	mov	r4, r0
  if(hspi->State == HAL_SPI_STATE_READY)
 8002578:	b2ed      	uxtb	r5, r5
 800257a:	2d01      	cmp	r5, #1
 800257c:	f040 80e3 	bne.w	8002746 <HAL_SPI_Receive+0x1de>
    if((pData == NULL ) || (Size == 0)) 
 8002580:	2900      	cmp	r1, #0
 8002582:	d03b      	beq.n	80025fc <HAL_SPI_Receive+0x94>
 8002584:	2a00      	cmp	r2, #0
 8002586:	d039      	beq.n	80025fc <HAL_SPI_Receive+0x94>
    __HAL_LOCK(hspi);
 8002588:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800258c:	2801      	cmp	r0, #1
 800258e:	f000 80da 	beq.w	8002746 <HAL_SPI_Receive+0x1de>
    hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002592:	2022      	movs	r0, #34	; 0x22
 8002594:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002598:	68a0      	ldr	r0, [r4, #8]
    __HAL_LOCK(hspi);
 800259a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800259e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
      SPI_1LINE_RX(hspi);
 80025a2:	bf08      	it	eq
 80025a4:	6825      	ldreq	r5, [r4, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025a6:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = Size;
 80025a8:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->TxXferCount = 0;
 80025aa:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxISR = 0;
 80025ac:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->TxISR = 0;
 80025ae:	64e3      	str	r3, [r4, #76]	; 0x4c
    hspi->pTxBuffPtr  = NULL;
 80025b0:	6323      	str	r3, [r4, #48]	; 0x30
    hspi->TxXferSize  = 0;
 80025b2:	86a3      	strh	r3, [r4, #52]	; 0x34
      SPI_1LINE_RX(hspi);
 80025b4:	bf08      	it	eq
 80025b6:	682b      	ldreq	r3, [r5, #0]
    hspi->pRxBuffPtr  = pData;
 80025b8:	63a1      	str	r1, [r4, #56]	; 0x38
      SPI_1LINE_RX(hspi);
 80025ba:	bf08      	it	eq
 80025bc:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
    hspi->RxXferSize  = Size;
 80025c0:	87a2      	strh	r2, [r4, #60]	; 0x3c
      SPI_1LINE_RX(hspi);
 80025c2:	bf08      	it	eq
 80025c4:	602b      	streq	r3, [r5, #0]
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025cc:	d108      	bne.n	80025e0 <HAL_SPI_Receive+0x78>
      SPI_RESET_CRC(hspi);
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	681d      	ldr	r5, [r3, #0]
 80025d2:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
 80025d6:	601d      	str	r5, [r3, #0]
 80025d8:	681d      	ldr	r5, [r3, #0]
 80025da:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
 80025de:	601d      	str	r5, [r3, #0]
    if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025e0:	6863      	ldr	r3, [r4, #4]
 80025e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e6:	d10c      	bne.n	8002602 <HAL_SPI_Receive+0x9a>
 80025e8:	b958      	cbnz	r0, 8002602 <HAL_SPI_Receive+0x9a>
      __HAL_UNLOCK(hspi);
 80025ea:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025ee:	4613      	mov	r3, r2
 80025f0:	9600      	str	r6, [sp, #0]
 80025f2:	460a      	mov	r2, r1
 80025f4:	4620      	mov	r0, r4
 80025f6:	f7ff fe53 	bl	80022a0 <HAL_SPI_TransmitReceive>
 80025fa:	4605      	mov	r5, r0
}
 80025fc:	4628      	mov	r0, r5
 80025fe:	b004      	add	sp, #16
 8002600:	bd70      	pop	{r4, r5, r6, pc}
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	0651      	lsls	r1, r2, #25
      __HAL_SPI_ENABLE(hspi);
 8002608:	bf5e      	ittt	pl
 800260a:	681a      	ldrpl	r2, [r3, #0]
 800260c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002610:	601a      	strpl	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002612:	68e3      	ldr	r3, [r4, #12]
 8002614:	b343      	cbz	r3, 8002668 <HAL_SPI_Receive+0x100>
      while(hspi->RxXferCount > 1)
 8002616:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d928      	bls.n	8002670 <HAL_SPI_Receive+0x108>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800261e:	4633      	mov	r3, r6
 8002620:	2200      	movs	r2, #0
 8002622:	2101      	movs	r1, #1
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff fd41 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 800262a:	b988      	cbnz	r0, 8002650 <HAL_SPI_Receive+0xe8>
        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002632:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr+=2;
 8002636:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002638:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800263a:	3b01      	subs	r3, #1
 800263c:	b29b      	uxth	r3, r3
 800263e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002640:	e7e9      	b.n	8002616 <HAL_SPI_Receive+0xae>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002642:	4633      	mov	r3, r6
 8002644:	2200      	movs	r2, #0
 8002646:	2101      	movs	r1, #1
 8002648:	4620      	mov	r0, r4
 800264a:	f7ff fd2f 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 800264e:	b108      	cbz	r0, 8002654 <HAL_SPI_Receive+0xec>
        return HAL_TIMEOUT;
 8002650:	2503      	movs	r5, #3
 8002652:	e7d3      	b.n	80025fc <HAL_SPI_Receive+0x94>
        (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8002654:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	63a2      	str	r2, [r4, #56]	; 0x38
 800265a:	6822      	ldr	r2, [r4, #0]
 800265c:	68d2      	ldr	r2, [r2, #12]
 800265e:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8002660:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002662:	3b01      	subs	r3, #1
 8002664:	b29b      	uxth	r3, r3
 8002666:	87e3      	strh	r3, [r4, #62]	; 0x3e
      while(hspi->RxXferCount > 1)
 8002668:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b01      	cmp	r3, #1
 800266e:	d8e8      	bhi.n	8002642 <HAL_SPI_Receive+0xda>
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8002670:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002672:	2101      	movs	r1, #1
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8002674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002678:	bf08      	it	eq
 800267a:	6822      	ldreq	r2, [r4, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800267c:	4620      	mov	r0, r4
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800267e:	bf02      	ittt	eq
 8002680:	6813      	ldreq	r3, [r2, #0]
 8002682:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8002686:	6013      	streq	r3, [r2, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002688:	4633      	mov	r3, r6
 800268a:	2200      	movs	r2, #0
 800268c:	f7ff fd0e 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 8002690:	4605      	mov	r5, r0
 8002692:	2800      	cmp	r0, #0
 8002694:	d1dc      	bne.n	8002650 <HAL_SPI_Receive+0xe8>
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002696:	68e1      	ldr	r1, [r4, #12]
 8002698:	6822      	ldr	r2, [r4, #0]
 800269a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800269c:	b9b9      	cbnz	r1, 80026ce <HAL_SPI_Receive+0x166>
      (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800269e:	68d2      	ldr	r2, [r2, #12]
 80026a0:	1c59      	adds	r1, r3, #1
 80026a2:	63a1      	str	r1, [r4, #56]	; 0x38
 80026a4:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 80026a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b4:	d117      	bne.n	80026e6 <HAL_SPI_Receive+0x17e>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80026b6:	4633      	mov	r3, r6
 80026b8:	2200      	movs	r2, #0
 80026ba:	2101      	movs	r1, #1
 80026bc:	4620      	mov	r0, r4
 80026be:	f7ff fcf5 	bl	80020ac <SPI_WaitOnFlagUntilTimeout>
 80026c2:	b148      	cbz	r0, 80026d8 <HAL_SPI_Receive+0x170>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80026c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026c6:	f043 0302 	orr.w	r3, r3, #2
 80026ca:	6563      	str	r3, [r4, #84]	; 0x54
 80026cc:	e7c0      	b.n	8002650 <HAL_SPI_Receive+0xe8>
      *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026ce:	68d2      	ldr	r2, [r2, #12]
 80026d0:	f823 2b02 	strh.w	r2, [r3], #2
      hspi->pRxBuffPtr+=2;
 80026d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80026d6:	e7e6      	b.n	80026a6 <HAL_SPI_Receive+0x13e>
      tmpreg = hspi->Instance->DR;
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f8ad 300e 	strh.w	r3, [sp, #14]
      UNUSED(tmpreg);
 80026e2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026e6:	6863      	ldr	r3, [r4, #4]
 80026e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ec:	d10b      	bne.n	8002706 <HAL_SPI_Receive+0x19e>
 80026ee:	68a3      	ldr	r3, [r4, #8]
 80026f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f4:	d002      	beq.n	80026fc <HAL_SPI_Receive+0x194>
 80026f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fa:	d104      	bne.n	8002706 <HAL_SPI_Receive+0x19e>
      __HAL_SPI_DISABLE(hspi);
 80026fc:	6822      	ldr	r2, [r4, #0]
 80026fe:	6813      	ldr	r3, [r2, #0]
 8002700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002704:	6013      	str	r3, [r2, #0]
    hspi->State = HAL_SPI_STATE_READY;
 8002706:	2101      	movs	r1, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8002708:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_READY;
 800270a:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800270e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002712:	d114      	bne.n	800273e <HAL_SPI_Receive+0x1d6>
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	06d2      	lsls	r2, r2, #27
 800271a:	d510      	bpl.n	800273e <HAL_SPI_Receive+0x1d6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800271c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_ERROR; 
 800271e:	460d      	mov	r5, r1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002720:	f042 0202 	orr.w	r2, r2, #2
 8002724:	6562      	str	r2, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002734:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hspi);
 8002736:	2300      	movs	r3, #0
 8002738:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      return HAL_ERROR; 
 800273c:	e75e      	b.n	80025fc <HAL_SPI_Receive+0x94>
    __HAL_UNLOCK(hspi);
 800273e:	2300      	movs	r3, #0
 8002740:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_OK;
 8002744:	e75a      	b.n	80025fc <HAL_SPI_Receive+0x94>
    return HAL_BUSY;
 8002746:	2502      	movs	r5, #2
 8002748:	e758      	b.n	80025fc <HAL_SPI_Receive+0x94>

0800274a <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800274a:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800274c:	4604      	mov	r4, r0
 800274e:	2800      	cmp	r0, #0
 8002750:	d036      	beq.n	80027c0 <HAL_SPI_Init+0x76>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002752:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002756:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800275a:	b91b      	cbnz	r3, 8002764 <HAL_SPI_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800275c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002760:	f000 fcbc 	bl	80030dc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002764:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002766:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002768:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800276c:	680b      	ldr	r3, [r1, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800276e:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002774:	600b      	str	r3, [r1, #0]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8002776:	6863      	ldr	r3, [r4, #4]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8002778:	69a2      	ldr	r2, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800277a:	4303      	orrs	r3, r0
 800277c:	68e0      	ldr	r0, [r4, #12]
 800277e:	4303      	orrs	r3, r0
 8002780:	6920      	ldr	r0, [r4, #16]
 8002782:	4303      	orrs	r3, r0
 8002784:	6960      	ldr	r0, [r4, #20]
 8002786:	4303      	orrs	r3, r0
 8002788:	69e0      	ldr	r0, [r4, #28]
 800278a:	4303      	orrs	r3, r0
 800278c:	6a20      	ldr	r0, [r4, #32]
 800278e:	4303      	orrs	r3, r0
 8002790:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002792:	4303      	orrs	r3, r0
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8002794:	f402 7000 	and.w	r0, r2, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8002798:	4303      	orrs	r3, r0
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800279a:	600b      	str	r3, [r1, #0]

  /* Configure : NSS management */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 800279c:	0c12      	lsrs	r2, r2, #16
 800279e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027a0:	f002 0204 	and.w	r2, r2, #4
 80027a4:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 80027a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 80027a8:	604a      	str	r2, [r1, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 80027aa:	610b      	str	r3, [r1, #16]

#if defined (STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined (STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined (STM32L151xE) || defined (STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027ac:	69cb      	ldr	r3, [r1, #28]
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027ae:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027b4:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 80027b6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027b8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80027ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80027be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027c0:	2001      	movs	r0, #1
}
 80027c2:	bd10      	pop	{r4, pc}

080027c4 <AD7190_SetRegisterValue>:
*******************************************************************************/
void AD7190_SetRegisterValue(unsigned char registerAddress,
                             unsigned long registerValue,
                             unsigned char bytesNumber,
                             unsigned char modifyCS)
{
 80027c4:	b530      	push	{r4, r5, lr}
 80027c6:	b085      	sub	sp, #20
 80027c8:	9101      	str	r1, [sp, #4]
    unsigned char writeCommand[5] = {0, 0, 0, 0, 0};
 80027ca:	2100      	movs	r1, #0
    unsigned char* dataPointer    = (unsigned char*)&registerValue;
    unsigned char bytesNr         = bytesNumber;
    
    writeCommand[0] = AD7190_COMM_WRITE |
                      AD7190_COMM_ADDR(registerAddress);
 80027cc:	00c0      	lsls	r0, r0, #3
    unsigned char writeCommand[5] = {0, 0, 0, 0, 0};
 80027ce:	9102      	str	r1, [sp, #8]
    writeCommand[0] = AD7190_COMM_WRITE |
 80027d0:	f000 0038 	and.w	r0, r0, #56	; 0x38
    unsigned char writeCommand[5] = {0, 0, 0, 0, 0};
 80027d4:	f88d 100c 	strb.w	r1, [sp, #12]
 80027d8:	3201      	adds	r2, #1
 80027da:	a902      	add	r1, sp, #8
    writeCommand[0] = AD7190_COMM_WRITE |
 80027dc:	f88d 0008 	strb.w	r0, [sp, #8]
 80027e0:	4411      	add	r1, r2
 80027e2:	f10d 0003 	add.w	r0, sp, #3
 80027e6:	f10d 0409 	add.w	r4, sp, #9
    while(bytesNr > 0)
 80027ea:	42a1      	cmp	r1, r4
 80027ec:	d106      	bne.n	80027fc <AD7190_SetRegisterValue+0x38>
    {
        writeCommand[bytesNr] = *dataPointer;
        dataPointer ++;
        bytesNr --;
    }
    SPI_Write(AD7190_SLAVE_ID * modifyCS, writeCommand, bytesNumber + 1);
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	a902      	add	r1, sp, #8
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f8c6 	bl	8002984 <SPI_Write>
}
 80027f8:	b005      	add	sp, #20
 80027fa:	bd30      	pop	{r4, r5, pc}
        writeCommand[bytesNr] = *dataPointer;
 80027fc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002800:	f801 5d01 	strb.w	r5, [r1, #-1]!
 8002804:	e7f1      	b.n	80027ea <AD7190_SetRegisterValue+0x26>

08002806 <AD7190_GetRegisterValue>:
 * @return buffer - Value of the register.
*******************************************************************************/
unsigned long AD7190_GetRegisterValue(unsigned char registerAddress,
                                      unsigned char bytesNumber,
                                      unsigned char modifyCS)
{
 8002806:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002808:	4613      	mov	r3, r2
    unsigned char registerWord[5] = {0, 0, 0, 0, 0}; 
 800280a:	2400      	movs	r4, #0
    unsigned long buffer          = 0x0;
    unsigned char i               = 0;
    char display[30];
    
    registerWord[0] = AD7190_COMM_READ |
                      AD7190_COMM_ADDR(registerAddress);
 800280c:	00c0      	lsls	r0, r0, #3
 800280e:	f000 0038 	and.w	r0, r0, #56	; 0x38
    registerWord[0] = AD7190_COMM_READ |
 8002812:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    unsigned char registerWord[5] = {0, 0, 0, 0, 0}; 
 8002816:	9400      	str	r4, [sp, #0]
   /* sprintf(display,"%d", registerWord[0]);
    clearScreen();
    ssd1306_WriteString(display, 1);
    updateScreen();*/

    SPI_Read(AD7190_SLAVE_ID * modifyCS, registerWord, bytesNumber/* + 1*/);
 8002818:	460a      	mov	r2, r1
    registerWord[0] = AD7190_COMM_READ |
 800281a:	f88d 0000 	strb.w	r0, [sp]
{
 800281e:	460d      	mov	r5, r1
    SPI_Read(AD7190_SLAVE_ID * modifyCS, registerWord, bytesNumber/* + 1*/);
 8002820:	4618      	mov	r0, r3
 8002822:	4669      	mov	r1, sp
    unsigned char registerWord[5] = {0, 0, 0, 0, 0}; 
 8002824:	f88d 4004 	strb.w	r4, [sp, #4]
    SPI_Read(AD7190_SLAVE_ID * modifyCS, registerWord, bytesNumber/* + 1*/);
 8002828:	f000 f88e 	bl	8002948 <SPI_Read>

   /* sprintf(display,"%d", registerWord[0]);
    clearScreen();
    ssd1306_WriteString(display, 1);
    updateScreen();*/
    for(/*i = 1; */i = 0; i < bytesNumber/* + 1*/; i++)
 800282c:	4623      	mov	r3, r4
    unsigned long buffer          = 0x0;
 800282e:	4620      	mov	r0, r4
    for(/*i = 1; */i = 0; i < bytesNumber/* + 1*/; i++)
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4295      	cmp	r5, r2
 8002834:	d801      	bhi.n	800283a <AD7190_GetRegisterValue+0x34>
    {
        buffer = (buffer << 8) + registerWord[i];
    }
    
    return buffer;
}
 8002836:	b003      	add	sp, #12
 8002838:	bd30      	pop	{r4, r5, pc}
        buffer = (buffer << 8) + registerWord[i];
 800283a:	f81d 2003 	ldrb.w	r2, [sp, r3]
 800283e:	3301      	adds	r3, #1
 8002840:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8002844:	e7f4      	b.n	8002830 <AD7190_GetRegisterValue+0x2a>

08002846 <AD7190_Reset>:
 * @brief Resets the device.
 *
 * @return none.
*******************************************************************************/
void AD7190_Reset(void)
{
 8002846:	b507      	push	{r0, r1, r2, lr}
    unsigned char registerWord[7];
    
    registerWord[0] = 0x01;
    registerWord[1] = 0xFF;
 8002848:	23ff      	movs	r3, #255	; 0xff
    registerWord[0] = 0x01;
 800284a:	2001      	movs	r0, #1
    registerWord[2] = 0xFF;
    registerWord[3] = 0xFF;
    registerWord[4] = 0xFF;
    registerWord[5] = 0xFF;
    registerWord[6] = 0xFF;
    SPI_Write(AD7190_SLAVE_ID, registerWord, 7);
 800284c:	2207      	movs	r2, #7
 800284e:	4669      	mov	r1, sp
    registerWord[0] = 0x01;
 8002850:	f88d 0000 	strb.w	r0, [sp]
    registerWord[1] = 0xFF;
 8002854:	f88d 3001 	strb.w	r3, [sp, #1]
    registerWord[2] = 0xFF;
 8002858:	f88d 3002 	strb.w	r3, [sp, #2]
    registerWord[3] = 0xFF;
 800285c:	f88d 3003 	strb.w	r3, [sp, #3]
    registerWord[4] = 0xFF;
 8002860:	f88d 3004 	strb.w	r3, [sp, #4]
    registerWord[5] = 0xFF;
 8002864:	f88d 3005 	strb.w	r3, [sp, #5]
    registerWord[6] = 0xFF;
 8002868:	f88d 3006 	strb.w	r3, [sp, #6]
    SPI_Write(AD7190_SLAVE_ID, registerWord, 7);
 800286c:	f000 f88a 	bl	8002984 <SPI_Write>
}
 8002870:	b003      	add	sp, #12
 8002872:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002878 <AD7190_Init>:
{
 8002878:	b508      	push	{r3, lr}
    SPI_Init(0, 1000000, 1, 0);
 800287a:	2300      	movs	r3, #0
 800287c:	2201      	movs	r2, #1
 800287e:	4618      	mov	r0, r3
 8002880:	4909      	ldr	r1, [pc, #36]	; (80028a8 <AD7190_Init+0x30>)
 8002882:	f000 f85f 	bl	8002944 <SPI_Init>
    AD7190_Reset();
 8002886:	f7ff ffde 	bl	8002846 <AD7190_Reset>
    TIME_DelayMs(1);
 800288a:	2001      	movs	r0, #1
 800288c:	f000 f886 	bl	800299c <TIME_DelayMs>
    regVal = AD7190_GetRegisterValue(AD7190_REG_ID, 1, 1);
 8002890:	2201      	movs	r2, #1
 8002892:	2004      	movs	r0, #4
 8002894:	4611      	mov	r1, r2
 8002896:	f7ff ffb6 	bl	8002806 <AD7190_GetRegisterValue>
    if( (regVal & AD7190_ID_MASK) != ID_AD7190)
 800289a:	f010 0f0f 	tst.w	r0, #15
}
 800289e:	bf0c      	ite	eq
 80028a0:	2001      	moveq	r0, #1
 80028a2:	2000      	movne	r0, #0
 80028a4:	bd08      	pop	{r3, pc}
 80028a6:	bf00      	nop
 80028a8:	000f4240 	.word	0x000f4240

080028ac <AD7190_WaitRdyGoLow>:
 * @brief Waits for RDY pin to go low.
 *
 * @return none.
*******************************************************************************/
void AD7190_WaitRdyGoLow(void)
{
 80028ac:	b538      	push	{r3, r4, r5, lr}
    unsigned long timeOutCnt = 0xFFFFF;
    
    while(AD7190_RDY_STATE && timeOutCnt--)
 80028ae:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 80028b2:	4d04      	ldr	r5, [pc, #16]	; (80028c4 <AD7190_WaitRdyGoLow+0x18>)
 80028b4:	2140      	movs	r1, #64	; 0x40
 80028b6:	4628      	mov	r0, r5
 80028b8:	f7fe fce4 	bl	8001284 <HAL_GPIO_ReadPin>
 80028bc:	b108      	cbz	r0, 80028c2 <AD7190_WaitRdyGoLow+0x16>
 80028be:	3c01      	subs	r4, #1
 80028c0:	d1f8      	bne.n	80028b4 <AD7190_WaitRdyGoLow+0x8>
 80028c2:	bd38      	pop	{r3, r4, r5, pc}
 80028c4:	40020000 	.word	0x40020000

080028c8 <AD7190_ChannelSelect>:
 * @param channel - Selects a channel.
 *  
 * @return none.
*******************************************************************************/
void AD7190_ChannelSelect(unsigned short channel)
{
 80028c8:	b510      	push	{r4, lr}
    unsigned long oldRegValue = 0x0;
    unsigned long newRegValue = 0x0;   
     
    oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF, 3, 1);
 80028ca:	2201      	movs	r2, #1
{
 80028cc:	4604      	mov	r4, r0
    oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF, 3, 1);
 80028ce:	2103      	movs	r1, #3
 80028d0:	2002      	movs	r0, #2
 80028d2:	f7ff ff98 	bl	8002806 <AD7190_GetRegisterValue>
    oldRegValue &= ~(AD7190_CONF_CHAN(0xFF));
    newRegValue = oldRegValue | AD7190_CONF_CHAN(1 << channel);   
 80028d6:	2301      	movs	r3, #1
 80028d8:	fa03 f404 	lsl.w	r4, r3, r4
 80028dc:	0224      	lsls	r4, r4, #8
 80028de:	b2a4      	uxth	r4, r4
    oldRegValue &= ~(AD7190_CONF_CHAN(0xFF));
 80028e0:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
    AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3, 1);
 80028e4:	4321      	orrs	r1, r4
 80028e6:	2203      	movs	r2, #3
}
 80028e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3, 1);
 80028ec:	2002      	movs	r0, #2
 80028ee:	f7ff bf69 	b.w	80027c4 <AD7190_SetRegisterValue>

080028f2 <AD7190_RangeSetup>:
                 the ADC input range.     
 *
 * @return none.
*******************************************************************************/
void AD7190_RangeSetup(unsigned char polarity, unsigned char range)
{
 80028f2:	b570      	push	{r4, r5, r6, lr}
    unsigned long oldRegValue = 0x0;
    unsigned long newRegValue = 0x0;
    
    oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF,3, 1);
 80028f4:	2201      	movs	r2, #1
{
 80028f6:	4605      	mov	r5, r0
 80028f8:	460c      	mov	r4, r1
    oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF,3, 1);
 80028fa:	2002      	movs	r0, #2
 80028fc:	2103      	movs	r1, #3
 80028fe:	f7ff ff82 	bl	8002806 <AD7190_GetRegisterValue>
    oldRegValue &= ~(AD7190_CONF_UNIPOLAR |
                     AD7190_CONF_GAIN(0x7));
    newRegValue = oldRegValue | 
                  (polarity * AD7190_CONF_UNIPOLAR) |
                  AD7190_CONF_GAIN(range); 
 8002902:	f004 0407 	and.w	r4, r4, #7
    newRegValue = oldRegValue | 
 8002906:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
    oldRegValue &= ~(AD7190_CONF_UNIPOLAR |
 800290a:	f020 010f 	bic.w	r1, r0, #15
    AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3, 1);
 800290e:	4321      	orrs	r1, r4
 8002910:	2301      	movs	r3, #1
}
 8002912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3, 1);
 8002916:	2203      	movs	r2, #3
 8002918:	2002      	movs	r0, #2
 800291a:	f7ff bf53 	b.w	80027c4 <AD7190_SetRegisterValue>
	...

08002920 <AD7190_SingleConversion>:
 * @brief Returns the result of a single conversion.
 *
 * @return regData - Result of a single analog-to-digital conversion.
*******************************************************************************/
unsigned long AD7190_SingleConversion(void)
{
 8002920:	b508      	push	{r3, lr}
    unsigned long command = 0x0;
    unsigned long regData = 0x0;
 
    command = AD7190_MODE_SEL(AD7190_MODE_SINGLE) | AD7190_MODE_CLKSRC(AD7190_CLK_INT) | AD7190_MODE_RATE(0x060);
    //ADI_PART_CS_LOW();
    AD7190_SetRegisterValue(AD7190_REG_MODE, command, 3, 0); // CS is not modified.
 8002922:	2203      	movs	r2, #3
 8002924:	2300      	movs	r3, #0
 8002926:	4906      	ldr	r1, [pc, #24]	; (8002940 <AD7190_SingleConversion+0x20>)
 8002928:	2001      	movs	r0, #1
 800292a:	f7ff ff4b 	bl	80027c4 <AD7190_SetRegisterValue>
    AD7190_WaitRdyGoLow();
 800292e:	f7ff ffbd 	bl	80028ac <AD7190_WaitRdyGoLow>
    regData = AD7190_GetRegisterValue(AD7190_REG_DATA, 3, 0);
    //ADI_PART_CS_HIGH();
    
    return regData;
}
 8002932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    regData = AD7190_GetRegisterValue(AD7190_REG_DATA, 3, 0);
 8002936:	2103      	movs	r1, #3
 8002938:	2200      	movs	r2, #0
 800293a:	4608      	mov	r0, r1
 800293c:	f7ff bf63 	b.w	8002806 <AD7190_GetRegisterValue>
 8002940:	00280060 	.word	0x00280060

08002944 <SPI_Init>:
                       unsigned long clockFreq,
                       unsigned char clockPol,
                       unsigned char clockEdg)
{
    return 1;
}
 8002944:	2001      	movs	r0, #1
 8002946:	4770      	bx	lr

08002948 <SPI_Read>:
 * @return Number of read bytes.
*******************************************************************************/
unsigned char SPI_Read(unsigned char slaveDeviceId,
                       unsigned char* data,
                       unsigned char bytesNumber)
{
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	460d      	mov	r5, r1
 800294c:	4614      	mov	r4, r2
	uint8_t i;
	//ADI_PART_CS_LOW();
	//HAL_Delay(100);
	HAL_SPI_Transmit(&hspi1, data, 1, 0x1000);
 800294e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002952:	2201      	movs	r2, #1
 8002954:	480a      	ldr	r0, [pc, #40]	; (8002980 <SPI_Read+0x38>)
 8002956:	f7ff fbf1 	bl	800213c <HAL_SPI_Transmit>
	for(i = 0; i < bytesNumber; i++)
 800295a:	462a      	mov	r2, r5
	{
		data[i] = 0xFF;
 800295c:	21ff      	movs	r1, #255	; 0xff
	for(i = 0; i < bytesNumber; i++)
 800295e:	1b53      	subs	r3, r2, r5
 8002960:	b2db      	uxtb	r3, r3
 8002962:	429c      	cmp	r4, r3
 8002964:	d808      	bhi.n	8002978 <SPI_Read+0x30>
	}
	HAL_SPI_Receive(&hspi1, data, bytesNumber, 0x1000);
 8002966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296a:	4622      	mov	r2, r4
 800296c:	4629      	mov	r1, r5
 800296e:	4804      	ldr	r0, [pc, #16]	; (8002980 <SPI_Read+0x38>)
 8002970:	f7ff fdfa 	bl	8002568 <HAL_SPI_Receive>
	//HAL_Delay(100);
	//ADI_PART_CS_HIGH();
	return bytesNumber;
}
 8002974:	4620      	mov	r0, r4
 8002976:	bd38      	pop	{r3, r4, r5, pc}
		data[i] = 0xFF;
 8002978:	f802 1b01 	strb.w	r1, [r2], #1
 800297c:	e7ef      	b.n	800295e <SPI_Read+0x16>
 800297e:	bf00      	nop
 8002980:	200000f0 	.word	0x200000f0

08002984 <SPI_Write>:
 * @return Number of written bytes.
*******************************************************************************/
unsigned char SPI_Write(unsigned char slaveDeviceId,
                        unsigned char* data,
                        unsigned char bytesNumber)
{
 8002984:	b510      	push	{r4, lr}
 8002986:	4614      	mov	r4, r2
	//ADI_PART_CS_LOW();
	//HAL_Delay(100);
	HAL_SPI_Transmit(&hspi1, data, bytesNumber, 0x1000);
 8002988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298c:	4802      	ldr	r0, [pc, #8]	; (8002998 <SPI_Write+0x14>)
 800298e:	f7ff fbd5 	bl	800213c <HAL_SPI_Transmit>
	//HAL_Delay(100);
	//ADI_PART_CS_HIGH();
	return bytesNumber;
}
 8002992:	4620      	mov	r0, r4
 8002994:	bd10      	pop	{r4, pc}
 8002996:	bf00      	nop
 8002998:	200000f0 	.word	0x200000f0

0800299c <TIME_DelayMs>:
 *
 * @return None.
*******************************************************************************/
void TIME_DelayMs(unsigned short msUnits)
{
	HAL_Delay(msUnits);
 800299c:	f7fe bb24 	b.w	8000fe8 <HAL_Delay>

080029a0 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a0:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <SystemClock_Config+0x70>)
{
 80029a2:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a4:	6813      	ldr	r3, [r2, #0]
{
 80029a6:	b092      	sub	sp, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80029ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029b0:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80029b2:	2310      	movs	r3, #16
 80029b4:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80029b6:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80029b8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80029bc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80029be:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029c0:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80029c2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80029c4:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029c6:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029c8:	f7fe feda 	bl	8001780 <HAL_RCC_OscConfig>
 80029cc:	4601      	mov	r1, r0
 80029ce:	b100      	cbz	r0, 80029d2 <SystemClock_Config+0x32>
 80029d0:	e7fe      	b.n	80029d0 <SystemClock_Config+0x30>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029d2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80029d4:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d6:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029d8:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029da:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029dc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029de:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029e0:	f7ff fa68 	bl	8001eb4 <HAL_RCC_ClockConfig>
 80029e4:	4604      	mov	r4, r0
 80029e6:	b100      	cbz	r0, 80029ea <SystemClock_Config+0x4a>
 80029e8:	e7fe      	b.n	80029e8 <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80029ea:	f7ff fb41 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 80029ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80029f6:	f7fe fb4b 	bl	8001090 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80029fa:	2004      	movs	r0, #4
 80029fc:	f7fe fb5e 	bl	80010bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002a00:	4622      	mov	r2, r4
 8002a02:	4621      	mov	r1, r4
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f7fe fb0e 	bl	8001028 <HAL_NVIC_SetPriority>
}
 8002a0c:	b012      	add	sp, #72	; 0x48
 8002a0e:	bd10      	pop	{r4, pc}
 8002a10:	40007000 	.word	0x40007000

08002a14 <adcChipSelect>:
	return buffer;
}

void adcChipSelect(uint8_t chip)
{
	switch(chip)
 8002a14:	2801      	cmp	r0, #1
 8002a16:	d002      	beq.n	8002a1e <adcChipSelect+0xa>
 8002a18:	2802      	cmp	r0, #2
 8002a1a:	d005      	beq.n	8002a28 <adcChipSelect+0x14>
 8002a1c:	4770      	bx	lr
	{
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2110      	movs	r1, #16
 8002a22:	4803      	ldr	r0, [pc, #12]	; (8002a30 <adcChipSelect+0x1c>)
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002a24:	f7fe bc34 	b.w	8001290 <HAL_GPIO_WritePin>
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2110      	movs	r1, #16
 8002a2c:	4801      	ldr	r0, [pc, #4]	; (8002a34 <adcChipSelect+0x20>)
 8002a2e:	e7f9      	b.n	8002a24 <adcChipSelect+0x10>
 8002a30:	40020000 	.word	0x40020000
 8002a34:	40020800 	.word	0x40020800

08002a38 <adcChipDeselect>:
	}
}

void adcChipDeselect(uint8_t chip)
{
	switch(chip)
 8002a38:	2801      	cmp	r0, #1
{
 8002a3a:	4602      	mov	r2, r0
	switch(chip)
 8002a3c:	d002      	beq.n	8002a44 <adcChipDeselect+0xc>
 8002a3e:	2802      	cmp	r0, #2
 8002a40:	d004      	beq.n	8002a4c <adcChipDeselect+0x14>
 8002a42:	4770      	bx	lr
	{
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002a44:	2110      	movs	r1, #16
 8002a46:	4803      	ldr	r0, [pc, #12]	; (8002a54 <adcChipDeselect+0x1c>)
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8002a48:	f7fe bc22 	b.w	8001290 <HAL_GPIO_WritePin>
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	2110      	movs	r1, #16
 8002a50:	4801      	ldr	r0, [pc, #4]	; (8002a58 <adcChipDeselect+0x20>)
 8002a52:	e7f9      	b.n	8002a48 <adcChipDeselect+0x10>
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020800 	.word	0x40020800

08002a5c <adcInit>:
{
 8002a5c:	b538      	push	{r3, r4, r5, lr}
 8002a5e:	4605      	mov	r5, r0
	adcChipSelect(chip);
 8002a60:	f7ff ffd8 	bl	8002a14 <adcChipSelect>
	result = AD7190_Init();
 8002a64:	f7ff ff08 	bl	8002878 <AD7190_Init>
 8002a68:	4604      	mov	r4, r0
	adcChipDeselect(chip);
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	f7ff ffe4 	bl	8002a38 <adcChipDeselect>
}
 8002a70:	4620      	mov	r0, r4
 8002a72:	bd38      	pop	{r3, r4, r5, pc}

08002a74 <adcRangeSetup>:
{
 8002a74:	b570      	push	{r4, r5, r6, lr}
 8002a76:	4605      	mov	r5, r0
 8002a78:	460e      	mov	r6, r1
 8002a7a:	4614      	mov	r4, r2
	adcChipSelect(chip);
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	f7ff ffc9 	bl	8002a14 <adcChipSelect>
	AD7190_RangeSetup(polarity, range);
 8002a82:	4628      	mov	r0, r5
 8002a84:	4631      	mov	r1, r6
 8002a86:	f7ff ff34 	bl	80028f2 <AD7190_RangeSetup>
	adcChipDeselect(chip);
 8002a8a:	4620      	mov	r0, r4
}
 8002a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	adcChipDeselect(chip);
 8002a90:	f7ff bfd2 	b.w	8002a38 <adcChipDeselect>

08002a94 <adcChannelSelect>:
{
 8002a94:	b538      	push	{r3, r4, r5, lr}
 8002a96:	4605      	mov	r5, r0
 8002a98:	460c      	mov	r4, r1
	adcChipSelect(chip);
 8002a9a:	4608      	mov	r0, r1
 8002a9c:	f7ff ffba 	bl	8002a14 <adcChipSelect>
	AD7190_ChannelSelect(channel);
 8002aa0:	4628      	mov	r0, r5
 8002aa2:	f7ff ff11 	bl	80028c8 <AD7190_ChannelSelect>
	adcChipDeselect(chip);
 8002aa6:	4620      	mov	r0, r4
}
 8002aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	adcChipDeselect(chip);
 8002aac:	f7ff bfc4 	b.w	8002a38 <adcChipDeselect>

08002ab0 <adcSingleConversion>:
{
 8002ab0:	b538      	push	{r3, r4, r5, lr}
 8002ab2:	4605      	mov	r5, r0
	adcChipSelect(chip);
 8002ab4:	f7ff ffae 	bl	8002a14 <adcChipSelect>
	buffer = AD7190_SingleConversion();
 8002ab8:	f7ff ff32 	bl	8002920 <AD7190_SingleConversion>
 8002abc:	4604      	mov	r4, r0
	adcChipDeselect(chip);
 8002abe:	4628      	mov	r0, r5
 8002ac0:	f7ff ffba 	bl	8002a38 <adcChipDeselect>
}
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	bd38      	pop	{r3, r4, r5, pc}

08002ac8 <floatToString>:
		break;
	}
}

void floatToString(float value, char* floatString, int afterpoint)
{
 8002ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002acc:	4616      	mov	r6, r2
 8002ace:	460d      	mov	r5, r1
 8002ad0:	4680      	mov	r8, r0
	uint32_t intValue = value;
 8002ad2:	f7fe fa3b 	bl	8000f4c <__aeabi_f2uiz>
 8002ad6:	4604      	mov	r4, r0
	float tmpFrac = value - intValue;
	uint32_t intFrac = trunc(tmpFrac * pow(10, afterpoint));
 8002ad8:	4630      	mov	r0, r6
 8002ada:	f7fd fca3 	bl	8000424 <__aeabi_i2d>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	490d      	ldr	r1, [pc, #52]	; (8002b1c <floatToString+0x54>)
 8002ae6:	f000 ffc9 	bl	8003a7c <pow>
 8002aea:	4606      	mov	r6, r0
	float tmpFrac = value - intValue;
 8002aec:	4620      	mov	r0, r4
	uint32_t intFrac = trunc(tmpFrac * pow(10, afterpoint));
 8002aee:	460f      	mov	r7, r1
	float tmpFrac = value - intValue;
 8002af0:	f7fe f884 	bl	8000bfc <__aeabi_ui2f>
 8002af4:	4601      	mov	r1, r0
 8002af6:	4640      	mov	r0, r8
 8002af8:	f7fd ffce 	bl	8000a98 <__aeabi_fsub>
	uint32_t intFrac = trunc(tmpFrac * pow(10, afterpoint));
 8002afc:	f7fd fca4 	bl	8000448 <__aeabi_f2d>
 8002b00:	4632      	mov	r2, r6
 8002b02:	463b      	mov	r3, r7
 8002b04:	f7fd fcf4 	bl	80004f0 <__aeabi_dmul>
 8002b08:	f7fd ffa2 	bl	8000a50 <__aeabi_d2uiz>

	sprintf(floatString, "%lu.%lu", intValue, intFrac);
 8002b0c:	4622      	mov	r2, r4
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4903      	ldr	r1, [pc, #12]	; (8002b20 <floatToString+0x58>)
 8002b12:	4628      	mov	r0, r5
}
 8002b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	sprintf(floatString, "%lu.%lu", intValue, intFrac);
 8002b18:	f000 bb84 	b.w	8003224 <siprintf>
 8002b1c:	40240000 	.word	0x40240000
 8002b20:	08004ae8 	.word	0x08004ae8

08002b24 <main>:
{
 8002b24:	b530      	push	{r4, r5, lr}
 8002b26:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8002b28:	f7fe fa44 	bl	8000fb4 <HAL_Init>
  SystemClock_Config();
 8002b2c:	f7ff ff38 	bl	80029a0 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b30:	4b71      	ldr	r3, [pc, #452]	; (8002cf8 <main+0x1d4>)
  HAL_GPIO_WritePin(ADC_1_CS_GPIO_Port, ADC_1_CS_Pin, GPIO_PIN_SET);
 8002b32:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(ADC_1_CS_GPIO_Port, ADC_1_CS_Pin, GPIO_PIN_SET);
 8002b36:	4871      	ldr	r0, [pc, #452]	; (8002cfc <main+0x1d8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b38:	f042 0201 	orr.w	r2, r2, #1
 8002b3c:	61da      	str	r2, [r3, #28]
 8002b3e:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b40:	2401      	movs	r4, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b42:	f002 0201 	and.w	r2, r2, #1
 8002b46:	9200      	str	r2, [sp, #0]
 8002b48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4a:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2503      	movs	r5, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4e:	f042 0204 	orr.w	r2, r2, #4
 8002b52:	61da      	str	r2, [r3, #28]
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	f002 0204 	and.w	r2, r2, #4
 8002b5a:	9201      	str	r2, [sp, #4]
 8002b5c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	f042 0202 	orr.w	r2, r2, #2
 8002b64:	61da      	str	r2, [r3, #28]
 8002b66:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(ADC_1_CS_GPIO_Port, ADC_1_CS_Pin, GPIO_PIN_SET);
 8002b68:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	9302      	str	r3, [sp, #8]
 8002b70:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(ADC_1_CS_GPIO_Port, ADC_1_CS_Pin, GPIO_PIN_SET);
 8002b72:	f7fe fb8d 	bl	8001290 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, ADC_2_CS_Pin|ADC_SYNC_Pin, GPIO_PIN_SET);
 8002b76:	2201      	movs	r2, #1
 8002b78:	2130      	movs	r1, #48	; 0x30
 8002b7a:	4861      	ldr	r0, [pc, #388]	; (8002d00 <main+0x1dc>)
 8002b7c:	f7fe fb88 	bl	8001290 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Test_LED_Pin|OLED_Reset_Pin, GPIO_PIN_SET);
 8002b80:	2201      	movs	r2, #1
 8002b82:	f248 0180 	movw	r1, #32896	; 0x8080
 8002b86:	485f      	ldr	r0, [pc, #380]	; (8002d04 <main+0x1e0>)
 8002b88:	f7fe fb82 	bl	8001290 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ADC_1_CS_Pin;
 8002b8c:	2310      	movs	r3, #16
  HAL_GPIO_Init(ADC_1_CS_GPIO_Port, &GPIO_InitStruct);
 8002b8e:	a908      	add	r1, sp, #32
 8002b90:	485a      	ldr	r0, [pc, #360]	; (8002cfc <main+0x1d8>)
  GPIO_InitStruct.Pin = ADC_1_CS_Pin;
 8002b92:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b94:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b96:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b98:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(ADC_1_CS_GPIO_Port, &GPIO_InitStruct);
 8002b9a:	f7fe faa1 	bl	80010e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ADC_2_CS_Pin|ADC_SYNC_Pin;
 8002b9e:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba0:	a908      	add	r1, sp, #32
 8002ba2:	4857      	ldr	r0, [pc, #348]	; (8002d00 <main+0x1dc>)
  GPIO_InitStruct.Pin = ADC_2_CS_Pin|ADC_SYNC_Pin;
 8002ba4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba6:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2500      	movs	r5, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bac:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bae:	f7fe fa97 	bl	80010e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Test_LED_Pin|OLED_Reset_Pin;
 8002bb2:	f248 0380 	movw	r3, #32896	; 0x8080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	4853      	ldr	r0, [pc, #332]	; (8002d04 <main+0x1e0>)
 8002bb8:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = Test_LED_Pin|OLED_Reset_Pin;
 8002bba:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc2:	f7fe fa8d 	bl	80010e0 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8002bc6:	4850      	ldr	r0, [pc, #320]	; (8002d08 <main+0x1e4>)
  hi2c1.Init.ClockSpeed = 100000;
 8002bc8:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <main+0x1e8>)
 8002bca:	f8df e15c 	ldr.w	lr, [pc, #348]	; 8002d28 <main+0x204>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bce:	6085      	str	r5, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8002bd0:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002bd8:	60c5      	str	r5, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bda:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bdc:	6145      	str	r5, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002bde:	6185      	str	r5, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002be0:	61c5      	str	r5, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be2:	6205      	str	r5, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002be4:	f7fe fc28 	bl	8001438 <HAL_I2C_Init>
 8002be8:	b100      	cbz	r0, 8002bec <main+0xc8>
 8002bea:	e7fe      	b.n	8002bea <main+0xc6>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bec:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 8002bf0:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <main+0x1ec>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bf2:	4948      	ldr	r1, [pc, #288]	; (8002d14 <main+0x1f0>)
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002bf4:	2502      	movs	r5, #2
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bf6:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 8002c00:	220a      	movs	r2, #10
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c02:	6098      	str	r0, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c04:	60d8      	str	r0, [r3, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c06:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c08:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c0a:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c0c:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c0e:	4618      	mov	r0, r3
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c10:	611d      	str	r5, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c12:	615c      	str	r4, [r3, #20]
  hspi1.Init.CRCPolynomial = 10;
 8002c14:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c16:	f7ff fd98 	bl	800274a <HAL_SPI_Init>
 8002c1a:	b100      	cbz	r0, 8002c1e <main+0xfa>
 8002c1c:	e7fe      	b.n	8002c1c <main+0xf8>
  ssd1306Init();
 8002c1e:	f000 f909 	bl	8002e34 <ssd1306Init>
  clearScreen();
 8002c22:	f000 f8f1 	bl	8002e08 <clearScreen>
  if(adcInit(1) && adcInit(2))
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7ff ff18 	bl	8002a5c <adcInit>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d060      	beq.n	8002cf2 <main+0x1ce>
 8002c30:	4628      	mov	r0, r5
 8002c32:	f7ff ff13 	bl	8002a5c <adcInit>
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d05b      	beq.n	8002cf2 <main+0x1ce>
	  ssd1306_WriteString("Parts Present", 1);
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	4836      	ldr	r0, [pc, #216]	; (8002d18 <main+0x1f4>)
	  ssd1306_WriteString("Part(s) Not Present", 1);
 8002c3e:	f000 f9b9 	bl	8002fb4 <ssd1306_WriteString>
	  updateScreen();
 8002c42:	f000 f8c7 	bl	8002dd4 <updateScreen>
  adcRangeSetup(1, AD7190_CONF_GAIN_1, 1);
 8002c46:	2201      	movs	r2, #1
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f7ff ff12 	bl	8002a74 <adcRangeSetup>
  adcRangeSetup(1, AD7190_CONF_GAIN_1, 2);
 8002c50:	2202      	movs	r2, #2
 8002c52:	2100      	movs	r1, #0
 8002c54:	2001      	movs	r0, #1
 8002c56:	f7ff ff0d 	bl	8002a74 <adcRangeSetup>
	  voltage = ((float)buffer / 16777216ul) * 5;
 8002c5a:	f04f 554e 	mov.w	r5, #864026624	; 0x33800000
 8002c5e:	4c2f      	ldr	r4, [pc, #188]	; (8002d1c <main+0x1f8>)
	  adcChannelSelect(AD7190_CH_AIN1P_AIN2M, 1);
 8002c60:	2101      	movs	r1, #1
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7ff ff16 	bl	8002a94 <adcChannelSelect>
	  buffer = adcSingleConversion(1);
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f7ff ff21 	bl	8002ab0 <adcSingleConversion>
	  voltage = ((float)buffer / 16777216ul) * 5;
 8002c6e:	f7fd ffc5 	bl	8000bfc <__aeabi_ui2f>
 8002c72:	4629      	mov	r1, r5
 8002c74:	f7fe f81a 	bl	8000cac <__aeabi_fmul>
 8002c78:	4621      	mov	r1, r4
 8002c7a:	f7fe f817 	bl	8000cac <__aeabi_fmul>
	  floatToString(voltage, voltString, 2);
 8002c7e:	a903      	add	r1, sp, #12
 8002c80:	2202      	movs	r2, #2
 8002c82:	f7ff ff21 	bl	8002ac8 <floatToString>
	  sprintf(display,"%s V", voltString);
 8002c86:	aa03      	add	r2, sp, #12
 8002c88:	4925      	ldr	r1, [pc, #148]	; (8002d20 <main+0x1fc>)
 8002c8a:	a808      	add	r0, sp, #32
 8002c8c:	f000 faca 	bl	8003224 <siprintf>
	  clearScreen();
 8002c90:	f000 f8ba 	bl	8002e08 <clearScreen>
	  ssd1306_WriteString(display, 1);
 8002c94:	2101      	movs	r1, #1
 8002c96:	a808      	add	r0, sp, #32
 8002c98:	f000 f98c 	bl	8002fb4 <ssd1306_WriteString>
	  updateScreen();
 8002c9c:	f000 f89a 	bl	8002dd4 <updateScreen>
	  adcChannelSelect(AD7190_CH_AIN3P_AIN4M, 1);
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4608      	mov	r0, r1
 8002ca4:	f7ff fef6 	bl	8002a94 <adcChannelSelect>
	  buffer = adcSingleConversion(1);
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f7ff ff01 	bl	8002ab0 <adcSingleConversion>
	  voltage = ((float)buffer / 16777216ul) * 5;
 8002cae:	f7fd ffa5 	bl	8000bfc <__aeabi_ui2f>
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f7fd fffa 	bl	8000cac <__aeabi_fmul>
 8002cb8:	4621      	mov	r1, r4
 8002cba:	f7fd fff7 	bl	8000cac <__aeabi_fmul>
	  floatToString(voltage, voltString, 2);
 8002cbe:	a903      	add	r1, sp, #12
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f7ff ff01 	bl	8002ac8 <floatToString>
	  sprintf(display,"%s V", voltString);
 8002cc6:	aa03      	add	r2, sp, #12
 8002cc8:	4915      	ldr	r1, [pc, #84]	; (8002d20 <main+0x1fc>)
 8002cca:	a808      	add	r0, sp, #32
 8002ccc:	f000 faaa 	bl	8003224 <siprintf>
	  setCursorX(0);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f000 f97f 	bl	8002fd4 <setCursorX>
	  setCursorY(11);
 8002cd6:	200b      	movs	r0, #11
 8002cd8:	f000 f982 	bl	8002fe0 <setCursorY>
	  ssd1306_WriteString(display, 1);
 8002cdc:	2101      	movs	r1, #1
 8002cde:	a808      	add	r0, sp, #32
 8002ce0:	f000 f968 	bl	8002fb4 <ssd1306_WriteString>
	  updateScreen();
 8002ce4:	f000 f876 	bl	8002dd4 <updateScreen>
	  HAL_Delay(500);
 8002ce8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cec:	f7fe f97c 	bl	8000fe8 <HAL_Delay>
 8002cf0:	e7b6      	b.n	8002c60 <main+0x13c>
	  ssd1306_WriteString("Part(s) Not Present", 1);
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	480b      	ldr	r0, [pc, #44]	; (8002d24 <main+0x200>)
 8002cf6:	e7a2      	b.n	8002c3e <main+0x11a>
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	40020800 	.word	0x40020800
 8002d04:	40020400 	.word	0x40020400
 8002d08:	2000009c 	.word	0x2000009c
 8002d0c:	40005400 	.word	0x40005400
 8002d10:	200000f0 	.word	0x200000f0
 8002d14:	40013000 	.word	0x40013000
 8002d18:	08004af0 	.word	0x08004af0
 8002d1c:	40a00000 	.word	0x40a00000
 8002d20:	08004b12 	.word	0x08004b12
 8002d24:	08004afe 	.word	0x08004afe
 8002d28:	000186a0 	.word	0x000186a0

08002d2c <ssd1306WriteCommand>:
	clearScreen();
	/*updateScreen();*/
}

void ssd1306WriteCommand(uint8_t command)
{
 8002d2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[2];
	data[0] = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f88d 300c 	strb.w	r3, [sp, #12]
	data[1] = command;
	HAL_I2C_Master_Transmit(&hi2c1, (0x3D)<<1, data, 2, 10);
 8002d34:	230a      	movs	r3, #10
	data[1] = command;
 8002d36:	f88d 000d 	strb.w	r0, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (0x3D)<<1, data, 2, 10);
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	aa03      	add	r2, sp, #12
 8002d3e:	2302      	movs	r3, #2
 8002d40:	217a      	movs	r1, #122	; 0x7a
 8002d42:	4803      	ldr	r0, [pc, #12]	; (8002d50 <ssd1306WriteCommand+0x24>)
 8002d44:	f7fe fc06 	bl	8001554 <HAL_I2C_Master_Transmit>
}
 8002d48:	b005      	add	sp, #20
 8002d4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d4e:	bf00      	nop
 8002d50:	2000009c 	.word	0x2000009c

08002d54 <ssd1306_DrawPixel>:
	ssd1306WriteCommand(0xAE);*/
}

void ssd1306_DrawPixel(uint16_t x, uint16_t y, uint8_t color)
{
	if (x >= 128 || y >= 64)
 8002d54:	287f      	cmp	r0, #127	; 0x7f
{
 8002d56:	b510      	push	{r4, lr}
	if (x >= 128 || y >= 64)
 8002d58:	d815      	bhi.n	8002d86 <ssd1306_DrawPixel+0x32>
 8002d5a:	293f      	cmp	r1, #63	; 0x3f
 8002d5c:	d813      	bhi.n	8002d86 <ssd1306_DrawPixel+0x32>
	if (SSD1306.Inverted) {
		color = (SSD1306_COLOR_t)!color;
	}*/

	/* Set color */
	if (color == 0x01)
 8002d5e:	2a01      	cmp	r2, #1
	{
		screen[x + (y / 8) * 128] |= 1 << (y % 8);
	}
	else
	{
		screen[x + (y / 8) * 128] &= ~(1 << (y % 8));
 8002d60:	bf18      	it	ne
 8002d62:	2201      	movne	r2, #1
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <ssd1306_DrawPixel+0x34>)
 8002d66:	ea4f 04d1 	mov.w	r4, r1, lsr #3
		screen[x + (y / 8) * 128] |= 1 << (y % 8);
 8002d6a:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 8002d6e:	f001 0107 	and.w	r1, r1, #7
 8002d72:	bf0b      	itete	eq
 8002d74:	fa02 f101 	lsleq.w	r1, r2, r1
		screen[x + (y / 8) * 128] &= ~(1 << (y % 8));
 8002d78:	408a      	lslne	r2, r1
		screen[x + (y / 8) * 128] |= 1 << (y % 8);
 8002d7a:	5c1a      	ldrbeq	r2, [r3, r0]
		screen[x + (y / 8) * 128] &= ~(1 << (y % 8));
 8002d7c:	5c19      	ldrbne	r1, [r3, r0]
		screen[x + (y / 8) * 128] |= 1 << (y % 8);
 8002d7e:	bf0c      	ite	eq
 8002d80:	4311      	orreq	r1, r2
		screen[x + (y / 8) * 128] &= ~(1 << (y % 8));
 8002d82:	4391      	bicne	r1, r2
 8002d84:	5419      	strb	r1, [r3, r0]
 8002d86:	bd10      	pop	{r4, pc}
 8002d88:	20000148 	.word	0x20000148

08002d8c <ssd1306_WriteData>:
	}
}

void ssd1306_WriteData(uint8_t* data, uint16_t count)
{
 8002d8c:	b590      	push	{r4, r7, lr}
	uint8_t sendData[count + 1];
 8002d8e:	f101 0308 	add.w	r3, r1, #8
{
 8002d92:	b083      	sub	sp, #12
	uint8_t sendData[count + 1];
 8002d94:	f023 0307 	bic.w	r3, r3, #7
{
 8002d98:	af02      	add	r7, sp, #8
	uint8_t sendData[count + 1];
 8002d9a:	ebad 0d03 	sub.w	sp, sp, r3
	uint8_t i;
	sendData[0] = 0x40;
 8002d9e:	2340      	movs	r3, #64	; 0x40
	for(i = 1; i <= count; i++)
 8002da0:	2401      	movs	r4, #1
	uint8_t sendData[count + 1];
 8002da2:	aa02      	add	r2, sp, #8
	sendData[0] = 0x40;
 8002da4:	f88d 3008 	strb.w	r3, [sp, #8]
	for(i = 1; i <= count; i++)
 8002da8:	42a1      	cmp	r1, r4
 8002daa:	d20a      	bcs.n	8002dc2 <ssd1306_WriteData+0x36>
	{
		sendData[i] = data[i - 1];
	}
	HAL_I2C_Master_Transmit(&hi2c1, (0x3D) << 1, sendData, count + 1, 50);
 8002dac:	1c4b      	adds	r3, r1, #1
 8002dae:	2132      	movs	r1, #50	; 0x32
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	9100      	str	r1, [sp, #0]
 8002db4:	4806      	ldr	r0, [pc, #24]	; (8002dd0 <ssd1306_WriteData+0x44>)
 8002db6:	217a      	movs	r1, #122	; 0x7a
 8002db8:	f7fe fbcc 	bl	8001554 <HAL_I2C_Master_Transmit>
}
 8002dbc:	3704      	adds	r7, #4
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd90      	pop	{r4, r7, pc}
		sendData[i] = data[i - 1];
 8002dc2:	1903      	adds	r3, r0, r4
 8002dc4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8002dc8:	5513      	strb	r3, [r2, r4]
	for(i = 1; i <= count; i++)
 8002dca:	3401      	adds	r4, #1
 8002dcc:	b2e4      	uxtb	r4, r4
 8002dce:	e7eb      	b.n	8002da8 <ssd1306_WriteData+0x1c>
 8002dd0:	2000009c 	.word	0x2000009c

08002dd4 <updateScreen>:
{
 8002dd4:	b538      	push	{r3, r4, r5, lr}
 8002dd6:	2400      	movs	r4, #0
		ssd1306_WriteData(&screen[i * 128], 128);
 8002dd8:	4d0a      	ldr	r5, [pc, #40]	; (8002e04 <updateScreen+0x30>)
		ssd1306WriteCommand(0xB0 + i);
 8002dda:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8002dde:	b2c0      	uxtb	r0, r0
 8002de0:	f7ff ffa4 	bl	8002d2c <ssd1306WriteCommand>
		ssd1306WriteCommand(0x00);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7ff ffa1 	bl	8002d2c <ssd1306WriteCommand>
		ssd1306WriteCommand(0x10);
 8002dea:	2010      	movs	r0, #16
 8002dec:	f7ff ff9e 	bl	8002d2c <ssd1306WriteCommand>
		ssd1306_WriteData(&screen[i * 128], 128);
 8002df0:	eb05 10c4 	add.w	r0, r5, r4, lsl #7
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	3401      	adds	r4, #1
 8002df8:	f7ff ffc8 	bl	8002d8c <ssd1306_WriteData>
	for(uint8_t i = 0; i < 8; i++)
 8002dfc:	2c08      	cmp	r4, #8
 8002dfe:	d1ec      	bne.n	8002dda <updateScreen+0x6>
}
 8002e00:	bd38      	pop	{r3, r4, r5, pc}
 8002e02:	bf00      	nop
 8002e04:	20000148 	.word	0x20000148

08002e08 <clearScreen>:
{
 8002e08:	2300      	movs	r3, #0
 8002e0a:	b510      	push	{r4, lr}
		screen[i] = 0x00;
 8002e0c:	461c      	mov	r4, r3
 8002e0e:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <clearScreen+0x20>)
 8002e10:	549c      	strb	r4, [r3, r2]
 8002e12:	3301      	adds	r3, #1
	for(uint16_t i = 0; i < 1024; i++)
 8002e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e18:	d1fa      	bne.n	8002e10 <clearScreen+0x8>
	updateScreen();
 8002e1a:	f7ff ffdb 	bl	8002dd4 <updateScreen>
	currentX = 0;
 8002e1e:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <clearScreen+0x24>)
 8002e20:	701c      	strb	r4, [r3, #0]
	currentY = 0;
 8002e22:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <clearScreen+0x28>)
 8002e24:	701c      	strb	r4, [r3, #0]
 8002e26:	bd10      	pop	{r4, pc}
 8002e28:	20000148 	.word	0x20000148
 8002e2c:	20000088 	.word	0x20000088
 8002e30:	20000089 	.word	0x20000089

08002e34 <ssd1306Init>:
{
 8002e34:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, OLED_Reset_Pin, GPIO_PIN_SET);
 8002e36:	4c3b      	ldr	r4, [pc, #236]	; (8002f24 <ssd1306Init+0xf0>)
	HAL_Delay(100);
 8002e38:	2064      	movs	r0, #100	; 0x64
 8002e3a:	f7fe f8d5 	bl	8000fe8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, OLED_Reset_Pin, GPIO_PIN_SET);
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7fe fa24 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002e48:	2001      	movs	r0, #1
 8002e4a:	f7fe f8cd 	bl	8000fe8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, OLED_Reset_Pin, GPIO_PIN_RESET);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	4620      	mov	r0, r4
 8002e54:	f7fe fa1c 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002e58:	200a      	movs	r0, #10
 8002e5a:	f7fe f8c5 	bl	8000fe8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, OLED_Reset_Pin, GPIO_PIN_SET);
 8002e5e:	2201      	movs	r2, #1
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	4620      	mov	r0, r4
 8002e64:	f7fe fa14 	bl	8001290 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002e68:	2064      	movs	r0, #100	; 0x64
 8002e6a:	f7fe f8bd 	bl	8000fe8 <HAL_Delay>
	ssd1306WriteCommand(0xAE);
 8002e6e:	20ae      	movs	r0, #174	; 0xae
 8002e70:	f7ff ff5c 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x20);
 8002e74:	2020      	movs	r0, #32
 8002e76:	f7ff ff59 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x10);
 8002e7a:	2010      	movs	r0, #16
 8002e7c:	f7ff ff56 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xB0);
 8002e80:	20b0      	movs	r0, #176	; 0xb0
 8002e82:	f7ff ff53 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xC8);
 8002e86:	20c8      	movs	r0, #200	; 0xc8
 8002e88:	f7ff ff50 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x00);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7ff ff4d 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x10);
 8002e92:	2010      	movs	r0, #16
 8002e94:	f7ff ff4a 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x40);
 8002e98:	2040      	movs	r0, #64	; 0x40
 8002e9a:	f7ff ff47 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x81);
 8002e9e:	2081      	movs	r0, #129	; 0x81
 8002ea0:	f7ff ff44 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xFF);
 8002ea4:	20ff      	movs	r0, #255	; 0xff
 8002ea6:	f7ff ff41 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xA1);
 8002eaa:	20a1      	movs	r0, #161	; 0xa1
 8002eac:	f7ff ff3e 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xA6);
 8002eb0:	20a6      	movs	r0, #166	; 0xa6
 8002eb2:	f7ff ff3b 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xA8);
 8002eb6:	20a8      	movs	r0, #168	; 0xa8
 8002eb8:	f7ff ff38 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x3F);
 8002ebc:	203f      	movs	r0, #63	; 0x3f
 8002ebe:	f7ff ff35 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xA4);
 8002ec2:	20a4      	movs	r0, #164	; 0xa4
 8002ec4:	f7ff ff32 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xD3);
 8002ec8:	20d3      	movs	r0, #211	; 0xd3
 8002eca:	f7ff ff2f 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x00);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7ff ff2c 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xD5);
 8002ed4:	20d5      	movs	r0, #213	; 0xd5
 8002ed6:	f7ff ff29 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xF0);
 8002eda:	20f0      	movs	r0, #240	; 0xf0
 8002edc:	f7ff ff26 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xD9);
 8002ee0:	20d9      	movs	r0, #217	; 0xd9
 8002ee2:	f7ff ff23 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x22);
 8002ee6:	2022      	movs	r0, #34	; 0x22
 8002ee8:	f7ff ff20 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xDA);
 8002eec:	20da      	movs	r0, #218	; 0xda
 8002eee:	f7ff ff1d 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x12);
 8002ef2:	2012      	movs	r0, #18
 8002ef4:	f7ff ff1a 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xDB);
 8002ef8:	20db      	movs	r0, #219	; 0xdb
 8002efa:	f7ff ff17 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x20);
 8002efe:	2020      	movs	r0, #32
 8002f00:	f7ff ff14 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x8D);
 8002f04:	208d      	movs	r0, #141	; 0x8d
 8002f06:	f7ff ff11 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0x14);
 8002f0a:	2014      	movs	r0, #20
 8002f0c:	f7ff ff0e 	bl	8002d2c <ssd1306WriteCommand>
	ssd1306WriteCommand(0xAF);
 8002f10:	20af      	movs	r0, #175	; 0xaf
 8002f12:	f7ff ff0b 	bl	8002d2c <ssd1306WriteCommand>
	HAL_Delay(100);
 8002f16:	2064      	movs	r0, #100	; 0x64
 8002f18:	f7fe f866 	bl	8000fe8 <HAL_Delay>
}
 8002f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clearScreen();
 8002f20:	f7ff bf72 	b.w	8002e08 <clearScreen>
 8002f24:	40020400 	.word	0x40020400

08002f28 <ssd1306_WriteChar>:

char ssd1306_WriteChar(char ch, uint8_t color)
{
 8002f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, b, j;

	// Check bounds of LCD
	if(128 <= (currentX + 7))
 8002f2c:	4c1e      	ldr	r4, [pc, #120]	; (8002fa8 <ssd1306_WriteChar+0x80>)
{
 8002f2e:	4680      	mov	r8, r0
	if(128 <= (currentX + 7))
 8002f30:	7823      	ldrb	r3, [r4, #0]
{
 8002f32:	4689      	mov	r9, r1
	if(128 <= (currentX + 7))
 8002f34:	2b78      	cmp	r3, #120	; 0x78
 8002f36:	4e1d      	ldr	r6, [pc, #116]	; (8002fac <ssd1306_WriteChar+0x84>)
 8002f38:	dd04      	ble.n	8002f44 <ssd1306_WriteChar+0x1c>
	{
		currentX = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	7023      	strb	r3, [r4, #0]
		currentY += 11;
 8002f3e:	7833      	ldrb	r3, [r6, #0]
 8002f40:	330b      	adds	r3, #11
 8002f42:	7033      	strb	r3, [r6, #0]
	}
	if(64 <= (currentY + 10))
 8002f44:	7833      	ldrb	r3, [r6, #0]
	}*/

	// We gaan door het font
	for (i = 0; i < 10; i++)
	{
		b = Font7x10[(ch - 32) * 10 + i];
 8002f46:	270a      	movs	r7, #10
	if(64 <= (currentY + 10))
 8002f48:	2b35      	cmp	r3, #53	; 0x35
		currentX = 0;
 8002f4a:	bfc8      	it	gt
 8002f4c:	2300      	movgt	r3, #0
		b = Font7x10[(ch - 32) * 10 + i];
 8002f4e:	f04f 0500 	mov.w	r5, #0
		currentX = 0;
 8002f52:	bfc4      	itt	gt
 8002f54:	7023      	strbgt	r3, [r4, #0]
		currentY = 0;
 8002f56:	7033      	strbgt	r3, [r6, #0]
		b = Font7x10[(ch - 32) * 10 + i];
 8002f58:	f1a8 0320 	sub.w	r3, r8, #32
 8002f5c:	435f      	muls	r7, r3
		for (j = 0; j < 7; j++)
 8002f5e:	f04f 0a00 	mov.w	sl, #0
		b = Font7x10[(ch - 32) * 10 + i];
 8002f62:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <ssd1306_WriteChar+0x88>)
 8002f64:	197b      	adds	r3, r7, r5
 8002f66:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
		{
			if ((b << j) & 0x8000)
 8002f6a:	fa0b f20a 	lsl.w	r2, fp, sl
 8002f6e:	0413      	lsls	r3, r2, #16
			{
				ssd1306_DrawPixel(currentX + j, (currentY + i), color);
			}
			else
			{
				ssd1306_DrawPixel(currentX + j, (currentY + i), !color);
 8002f70:	bf58      	it	pl
 8002f72:	fab9 f289 	clzpl	r2, r9
				ssd1306_DrawPixel(currentX + j, (currentY + i), color);
 8002f76:	7831      	ldrb	r1, [r6, #0]
 8002f78:	7820      	ldrb	r0, [r4, #0]
 8002f7a:	4429      	add	r1, r5
 8002f7c:	4450      	add	r0, sl
 8002f7e:	bf4c      	ite	mi
 8002f80:	464a      	movmi	r2, r9
				ssd1306_DrawPixel(currentX + j, (currentY + i), !color);
 8002f82:	0952      	lsrpl	r2, r2, #5
 8002f84:	b289      	uxth	r1, r1
 8002f86:	b280      	uxth	r0, r0
		for (j = 0; j < 7; j++)
 8002f88:	f10a 0a01 	add.w	sl, sl, #1
				ssd1306_DrawPixel(currentX + j, (currentY + i), !color);
 8002f8c:	f7ff fee2 	bl	8002d54 <ssd1306_DrawPixel>
		for (j = 0; j < 7; j++)
 8002f90:	f1ba 0f07 	cmp.w	sl, #7
 8002f94:	d1e9      	bne.n	8002f6a <ssd1306_WriteChar+0x42>
	for (i = 0; i < 10; i++)
 8002f96:	3501      	adds	r5, #1
 8002f98:	2d0a      	cmp	r5, #10
 8002f9a:	d1e0      	bne.n	8002f5e <ssd1306_WriteChar+0x36>
			}
		}
	}

	// De huidige positie is nu verplaatst
	currentX += 7;
 8002f9c:	7823      	ldrb	r3, [r4, #0]

	// We geven het geschreven char terug voor validatie
	return ch;
}
 8002f9e:	4640      	mov	r0, r8
	currentX += 7;
 8002fa0:	3307      	adds	r3, #7
 8002fa2:	7023      	strb	r3, [r4, #0]
}
 8002fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa8:	20000088 	.word	0x20000088
 8002fac:	20000089 	.word	0x20000089
 8002fb0:	08004b18 	.word	0x08004b18

08002fb4 <ssd1306_WriteString>:

char ssd1306_WriteString(char* str, uint8_t color)
{
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	460d      	mov	r5, r1
 8002fb8:	1e44      	subs	r4, r0, #1
	// We schrijven alle char tot een nulbyte
	while (*str)
 8002fba:	7863      	ldrb	r3, [r4, #1]
 8002fbc:	b13b      	cbz	r3, 8002fce <ssd1306_WriteString+0x1a>
	{
		if (ssd1306_WriteChar(*str, color) != *str)
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	f7ff ffb1 	bl	8002f28 <ssd1306_WriteChar>
 8002fc6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002fca:	4298      	cmp	r0, r3
 8002fcc:	d0f5      	beq.n	8002fba <ssd1306_WriteString+0x6>
		str++;
	}

	// Alles gelukt, we sturen dus 0 terug
	return *str;
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	bd38      	pop	{r3, r4, r5, pc}
	...

08002fd4 <setCursorX>:

void setCursorX(uint8_t position)
{
	currentX = position;
 8002fd4:	4b01      	ldr	r3, [pc, #4]	; (8002fdc <setCursorX+0x8>)
 8002fd6:	7018      	strb	r0, [r3, #0]
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20000088 	.word	0x20000088

08002fe0 <setCursorY>:
}

void setCursorY(uint8_t position)
{
	currentY = position;
 8002fe0:	4b01      	ldr	r3, [pc, #4]	; (8002fe8 <setCursorY+0x8>)
 8002fe2:	7018      	strb	r0, [r3, #0]
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000089 	.word	0x20000089

08002fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002fee:	4b26      	ldr	r3, [pc, #152]	; (8003088 <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ff0:	2003      	movs	r0, #3
  __HAL_RCC_COMP_CLK_ENABLE();
 8002ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
 8002ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ffc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003000:	9201      	str	r2, [sp, #4]
 8003002:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003004:	6a1a      	ldr	r2, [r3, #32]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	621a      	str	r2, [r3, #32]
 800300c:	6a1a      	ldr	r2, [r3, #32]
 800300e:	f002 0201 	and.w	r2, r2, #1
 8003012:	9202      	str	r2, [sp, #8]
 8003014:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003018:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800301c:	625a      	str	r2, [r3, #36]	; 0x24
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	9303      	str	r3, [sp, #12]
 8003026:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003028:	f7fd ffec 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800302c:	2200      	movs	r2, #0
 800302e:	f06f 000b 	mvn.w	r0, #11
 8003032:	4611      	mov	r1, r2
 8003034:	f7fd fff8 	bl	8001028 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003038:	2200      	movs	r2, #0
 800303a:	f06f 000a 	mvn.w	r0, #10
 800303e:	4611      	mov	r1, r2
 8003040:	f7fd fff2 	bl	8001028 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	f06f 0009 	mvn.w	r0, #9
 800304a:	4611      	mov	r1, r2
 800304c:	f7fd ffec 	bl	8001028 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003050:	2200      	movs	r2, #0
 8003052:	f06f 0004 	mvn.w	r0, #4
 8003056:	4611      	mov	r1, r2
 8003058:	f7fd ffe6 	bl	8001028 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800305c:	2200      	movs	r2, #0
 800305e:	f06f 0003 	mvn.w	r0, #3
 8003062:	4611      	mov	r1, r2
 8003064:	f7fd ffe0 	bl	8001028 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003068:	2200      	movs	r2, #0
 800306a:	f06f 0001 	mvn.w	r0, #1
 800306e:	4611      	mov	r1, r2
 8003070:	f7fd ffda 	bl	8001028 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	f04f 30ff 	mov.w	r0, #4294967295
 800307a:	4611      	mov	r1, r2
 800307c:	f7fd ffd4 	bl	8001028 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003080:	b005      	add	sp, #20
 8003082:	f85d fb04 	ldr.w	pc, [sp], #4
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800

0800308c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800308c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800308e:	6802      	ldr	r2, [r0, #0]
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <HAL_I2C_MspInit+0x44>)
 8003092:	429a      	cmp	r2, r3
 8003094:	d119      	bne.n	80030ca <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8003096:	f44f 7340 	mov.w	r3, #768	; 0x300
 800309a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800309c:	2312      	movs	r3, #18
 800309e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030a0:	2301      	movs	r3, #1
 80030a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030a8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030aa:	480a      	ldr	r0, [pc, #40]	; (80030d4 <HAL_I2C_MspInit+0x48>)
 80030ac:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030b0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b2:	f7fe f815 	bl	80010e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_I2C_MspInit+0x4c>)
 80030b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ba:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80030be:	625a      	str	r2, [r3, #36]	; 0x24
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030ca:	b007      	add	sp, #28
 80030cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80030d0:	40005400 	.word	0x40005400
 80030d4:	40020400 	.word	0x40020400
 80030d8:	40023800 	.word	0x40023800

080030dc <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80030de:	6802      	ldr	r2, [r0, #0]
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <HAL_SPI_MspInit+0x44>)
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d118      	bne.n	8003118 <HAL_SPI_MspInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030e6:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80030ea:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Pin = ADC_SCK_Pin|ADC_MISO_Pin|ADC_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030f2:	621a      	str	r2, [r3, #32]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f6:	480b      	ldr	r0, [pc, #44]	; (8003124 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ADC_SCK_Pin|ADC_MISO_Pin|ADC_MOSI_Pin;
 8003100:	23e0      	movs	r3, #224	; 0xe0
 8003102:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003104:	2302      	movs	r3, #2
 8003106:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003108:	2301      	movs	r3, #1
 800310a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310c:	2303      	movs	r3, #3
 800310e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003110:	2305      	movs	r3, #5
 8003112:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003114:	f7fd ffe4 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003118:	b007      	add	sp, #28
 800311a:	f85d fb04 	ldr.w	pc, [sp], #4
 800311e:	bf00      	nop
 8003120:	40013000 	.word	0x40013000
 8003124:	40020000 	.word	0x40020000

08003128 <NMI_Handler>:
 8003128:	4770      	bx	lr

0800312a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800312a:	e7fe      	b.n	800312a <HardFault_Handler>

0800312c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800312c:	e7fe      	b.n	800312c <MemManage_Handler>

0800312e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800312e:	e7fe      	b.n	800312e <BusFault_Handler>

08003130 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003130:	e7fe      	b.n	8003130 <UsageFault_Handler>

08003132 <SVC_Handler>:
 8003132:	4770      	bx	lr

08003134 <DebugMon_Handler>:
 8003134:	4770      	bx	lr

08003136 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003136:	4770      	bx	lr

08003138 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003138:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800313a:	f7fd ff47 	bl	8000fcc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800313e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003142:	f7fd bfc8 	b.w	80010d6 <HAL_SYSTICK_IRQHandler>
	...

08003148 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8003148:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <SystemInit+0x3c>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003150:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <SystemInit+0x40>)
 8003156:	400a      	ands	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8003160:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8003164:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800316c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8003174:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800317a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800317e:	4b03      	ldr	r3, [pc, #12]	; (800318c <SystemInit+0x44>)
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	4770      	bx	lr
 8003184:	40023800 	.word	0x40023800
 8003188:	88ffc00c 	.word	0x88ffc00c
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003190:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003192:	e003      	b.n	800319c <LoopCopyDataInit>

08003194 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003196:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003198:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800319a:	3104      	adds	r1, #4

0800319c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800319c:	480a      	ldr	r0, [pc, #40]	; (80031c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80031a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80031a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031a4:	d3f6      	bcc.n	8003194 <CopyDataInit>
  ldr r2, =_sbss
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031a8:	e002      	b.n	80031b0 <LoopFillZerobss>

080031aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80031ac:	f842 3b04 	str.w	r3, [r2], #4

080031b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80031b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80031b4:	d3f9      	bcc.n	80031aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031b6:	f7ff ffc7 	bl	8003148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ba:	f000 f80f 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031be:	f7ff fcb1 	bl	8002b24 <main>
  bx lr
 80031c2:	4770      	bx	lr
  ldr r3, =_sidata
 80031c4:	08005328 	.word	0x08005328
  ldr r0, =_sdata
 80031c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80031cc:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 80031d0:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 80031d4:	2000054c 	.word	0x2000054c

080031d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031d8:	e7fe      	b.n	80031d8 <ADC1_IRQHandler>
	...

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	2500      	movs	r5, #0
 80031e0:	4e0c      	ldr	r6, [pc, #48]	; (8003214 <__libc_init_array+0x38>)
 80031e2:	4c0d      	ldr	r4, [pc, #52]	; (8003218 <__libc_init_array+0x3c>)
 80031e4:	1ba4      	subs	r4, r4, r6
 80031e6:	10a4      	asrs	r4, r4, #2
 80031e8:	42a5      	cmp	r5, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	f001 fc6e 	bl	8004acc <_init>
 80031f0:	2500      	movs	r5, #0
 80031f2:	4e0a      	ldr	r6, [pc, #40]	; (800321c <__libc_init_array+0x40>)
 80031f4:	4c0a      	ldr	r4, [pc, #40]	; (8003220 <__libc_init_array+0x44>)
 80031f6:	1ba4      	subs	r4, r4, r6
 80031f8:	10a4      	asrs	r4, r4, #2
 80031fa:	42a5      	cmp	r5, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003204:	4798      	blx	r3
 8003206:	3501      	adds	r5, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800320e:	4798      	blx	r3
 8003210:	3501      	adds	r5, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	08005320 	.word	0x08005320
 8003218:	08005320 	.word	0x08005320
 800321c:	08005320 	.word	0x08005320
 8003220:	08005324 	.word	0x08005324

08003224 <siprintf>:
 8003224:	b40e      	push	{r1, r2, r3}
 8003226:	f44f 7102 	mov.w	r1, #520	; 0x208
 800322a:	b500      	push	{lr}
 800322c:	b09c      	sub	sp, #112	; 0x70
 800322e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003232:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003236:	9104      	str	r1, [sp, #16]
 8003238:	9107      	str	r1, [sp, #28]
 800323a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800323e:	ab1d      	add	r3, sp, #116	; 0x74
 8003240:	9002      	str	r0, [sp, #8]
 8003242:	9006      	str	r0, [sp, #24]
 8003244:	4808      	ldr	r0, [pc, #32]	; (8003268 <siprintf+0x44>)
 8003246:	f853 2b04 	ldr.w	r2, [r3], #4
 800324a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800324e:	6800      	ldr	r0, [r0, #0]
 8003250:	a902      	add	r1, sp, #8
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	f000 f866 	bl	8003324 <_svfiprintf_r>
 8003258:	2200      	movs	r2, #0
 800325a:	9b02      	ldr	r3, [sp, #8]
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	b01c      	add	sp, #112	; 0x70
 8003260:	f85d eb04 	ldr.w	lr, [sp], #4
 8003264:	b003      	add	sp, #12
 8003266:	4770      	bx	lr
 8003268:	20000004 	.word	0x20000004

0800326c <__ssputs_r>:
 800326c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003270:	688e      	ldr	r6, [r1, #8]
 8003272:	4682      	mov	sl, r0
 8003274:	429e      	cmp	r6, r3
 8003276:	460c      	mov	r4, r1
 8003278:	4691      	mov	r9, r2
 800327a:	4698      	mov	r8, r3
 800327c:	d835      	bhi.n	80032ea <__ssputs_r+0x7e>
 800327e:	898a      	ldrh	r2, [r1, #12]
 8003280:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003284:	d031      	beq.n	80032ea <__ssputs_r+0x7e>
 8003286:	2302      	movs	r3, #2
 8003288:	6825      	ldr	r5, [r4, #0]
 800328a:	6909      	ldr	r1, [r1, #16]
 800328c:	1a6f      	subs	r7, r5, r1
 800328e:	6965      	ldr	r5, [r4, #20]
 8003290:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003294:	fb95 f5f3 	sdiv	r5, r5, r3
 8003298:	f108 0301 	add.w	r3, r8, #1
 800329c:	443b      	add	r3, r7
 800329e:	429d      	cmp	r5, r3
 80032a0:	bf38      	it	cc
 80032a2:	461d      	movcc	r5, r3
 80032a4:	0553      	lsls	r3, r2, #21
 80032a6:	d531      	bpl.n	800330c <__ssputs_r+0xa0>
 80032a8:	4629      	mov	r1, r5
 80032aa:	f000 fb47 	bl	800393c <_malloc_r>
 80032ae:	4606      	mov	r6, r0
 80032b0:	b950      	cbnz	r0, 80032c8 <__ssputs_r+0x5c>
 80032b2:	230c      	movs	r3, #12
 80032b4:	f8ca 3000 	str.w	r3, [sl]
 80032b8:	89a3      	ldrh	r3, [r4, #12]
 80032ba:	f04f 30ff 	mov.w	r0, #4294967295
 80032be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032c2:	81a3      	strh	r3, [r4, #12]
 80032c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c8:	463a      	mov	r2, r7
 80032ca:	6921      	ldr	r1, [r4, #16]
 80032cc:	f000 fac4 	bl	8003858 <memcpy>
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032da:	81a3      	strh	r3, [r4, #12]
 80032dc:	6126      	str	r6, [r4, #16]
 80032de:	443e      	add	r6, r7
 80032e0:	6026      	str	r6, [r4, #0]
 80032e2:	4646      	mov	r6, r8
 80032e4:	6165      	str	r5, [r4, #20]
 80032e6:	1bed      	subs	r5, r5, r7
 80032e8:	60a5      	str	r5, [r4, #8]
 80032ea:	4546      	cmp	r6, r8
 80032ec:	bf28      	it	cs
 80032ee:	4646      	movcs	r6, r8
 80032f0:	4649      	mov	r1, r9
 80032f2:	4632      	mov	r2, r6
 80032f4:	6820      	ldr	r0, [r4, #0]
 80032f6:	f000 faba 	bl	800386e <memmove>
 80032fa:	68a3      	ldr	r3, [r4, #8]
 80032fc:	2000      	movs	r0, #0
 80032fe:	1b9b      	subs	r3, r3, r6
 8003300:	60a3      	str	r3, [r4, #8]
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	441e      	add	r6, r3
 8003306:	6026      	str	r6, [r4, #0]
 8003308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800330c:	462a      	mov	r2, r5
 800330e:	f000 fb73 	bl	80039f8 <_realloc_r>
 8003312:	4606      	mov	r6, r0
 8003314:	2800      	cmp	r0, #0
 8003316:	d1e1      	bne.n	80032dc <__ssputs_r+0x70>
 8003318:	6921      	ldr	r1, [r4, #16]
 800331a:	4650      	mov	r0, sl
 800331c:	f000 fac2 	bl	80038a4 <_free_r>
 8003320:	e7c7      	b.n	80032b2 <__ssputs_r+0x46>
	...

08003324 <_svfiprintf_r>:
 8003324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003328:	b09d      	sub	sp, #116	; 0x74
 800332a:	9303      	str	r3, [sp, #12]
 800332c:	898b      	ldrh	r3, [r1, #12]
 800332e:	4680      	mov	r8, r0
 8003330:	061c      	lsls	r4, r3, #24
 8003332:	460d      	mov	r5, r1
 8003334:	4616      	mov	r6, r2
 8003336:	d50f      	bpl.n	8003358 <_svfiprintf_r+0x34>
 8003338:	690b      	ldr	r3, [r1, #16]
 800333a:	b96b      	cbnz	r3, 8003358 <_svfiprintf_r+0x34>
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	f000 fafd 	bl	800393c <_malloc_r>
 8003342:	6028      	str	r0, [r5, #0]
 8003344:	6128      	str	r0, [r5, #16]
 8003346:	b928      	cbnz	r0, 8003354 <_svfiprintf_r+0x30>
 8003348:	230c      	movs	r3, #12
 800334a:	f8c8 3000 	str.w	r3, [r8]
 800334e:	f04f 30ff 	mov.w	r0, #4294967295
 8003352:	e0c4      	b.n	80034de <_svfiprintf_r+0x1ba>
 8003354:	2340      	movs	r3, #64	; 0x40
 8003356:	616b      	str	r3, [r5, #20]
 8003358:	2300      	movs	r3, #0
 800335a:	9309      	str	r3, [sp, #36]	; 0x24
 800335c:	2320      	movs	r3, #32
 800335e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003362:	2330      	movs	r3, #48	; 0x30
 8003364:	f04f 0b01 	mov.w	fp, #1
 8003368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800336c:	4637      	mov	r7, r6
 800336e:	463c      	mov	r4, r7
 8003370:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d13c      	bne.n	80033f2 <_svfiprintf_r+0xce>
 8003378:	ebb7 0a06 	subs.w	sl, r7, r6
 800337c:	d00b      	beq.n	8003396 <_svfiprintf_r+0x72>
 800337e:	4653      	mov	r3, sl
 8003380:	4632      	mov	r2, r6
 8003382:	4629      	mov	r1, r5
 8003384:	4640      	mov	r0, r8
 8003386:	f7ff ff71 	bl	800326c <__ssputs_r>
 800338a:	3001      	adds	r0, #1
 800338c:	f000 80a2 	beq.w	80034d4 <_svfiprintf_r+0x1b0>
 8003390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003392:	4453      	add	r3, sl
 8003394:	9309      	str	r3, [sp, #36]	; 0x24
 8003396:	783b      	ldrb	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 809b 	beq.w	80034d4 <_svfiprintf_r+0x1b0>
 800339e:	2300      	movs	r3, #0
 80033a0:	f04f 32ff 	mov.w	r2, #4294967295
 80033a4:	9304      	str	r3, [sp, #16]
 80033a6:	9307      	str	r3, [sp, #28]
 80033a8:	9205      	str	r2, [sp, #20]
 80033aa:	9306      	str	r3, [sp, #24]
 80033ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033b0:	931a      	str	r3, [sp, #104]	; 0x68
 80033b2:	2205      	movs	r2, #5
 80033b4:	7821      	ldrb	r1, [r4, #0]
 80033b6:	4850      	ldr	r0, [pc, #320]	; (80034f8 <_svfiprintf_r+0x1d4>)
 80033b8:	f000 fa40 	bl	800383c <memchr>
 80033bc:	1c67      	adds	r7, r4, #1
 80033be:	9b04      	ldr	r3, [sp, #16]
 80033c0:	b9d8      	cbnz	r0, 80033fa <_svfiprintf_r+0xd6>
 80033c2:	06d9      	lsls	r1, r3, #27
 80033c4:	bf44      	itt	mi
 80033c6:	2220      	movmi	r2, #32
 80033c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033cc:	071a      	lsls	r2, r3, #28
 80033ce:	bf44      	itt	mi
 80033d0:	222b      	movmi	r2, #43	; 0x2b
 80033d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033d6:	7822      	ldrb	r2, [r4, #0]
 80033d8:	2a2a      	cmp	r2, #42	; 0x2a
 80033da:	d016      	beq.n	800340a <_svfiprintf_r+0xe6>
 80033dc:	2100      	movs	r1, #0
 80033de:	200a      	movs	r0, #10
 80033e0:	9a07      	ldr	r2, [sp, #28]
 80033e2:	4627      	mov	r7, r4
 80033e4:	783b      	ldrb	r3, [r7, #0]
 80033e6:	3401      	adds	r4, #1
 80033e8:	3b30      	subs	r3, #48	; 0x30
 80033ea:	2b09      	cmp	r3, #9
 80033ec:	d950      	bls.n	8003490 <_svfiprintf_r+0x16c>
 80033ee:	b1c9      	cbz	r1, 8003424 <_svfiprintf_r+0x100>
 80033f0:	e011      	b.n	8003416 <_svfiprintf_r+0xf2>
 80033f2:	2b25      	cmp	r3, #37	; 0x25
 80033f4:	d0c0      	beq.n	8003378 <_svfiprintf_r+0x54>
 80033f6:	4627      	mov	r7, r4
 80033f8:	e7b9      	b.n	800336e <_svfiprintf_r+0x4a>
 80033fa:	4a3f      	ldr	r2, [pc, #252]	; (80034f8 <_svfiprintf_r+0x1d4>)
 80033fc:	463c      	mov	r4, r7
 80033fe:	1a80      	subs	r0, r0, r2
 8003400:	fa0b f000 	lsl.w	r0, fp, r0
 8003404:	4318      	orrs	r0, r3
 8003406:	9004      	str	r0, [sp, #16]
 8003408:	e7d3      	b.n	80033b2 <_svfiprintf_r+0x8e>
 800340a:	9a03      	ldr	r2, [sp, #12]
 800340c:	1d11      	adds	r1, r2, #4
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	9103      	str	r1, [sp, #12]
 8003412:	2a00      	cmp	r2, #0
 8003414:	db01      	blt.n	800341a <_svfiprintf_r+0xf6>
 8003416:	9207      	str	r2, [sp, #28]
 8003418:	e004      	b.n	8003424 <_svfiprintf_r+0x100>
 800341a:	4252      	negs	r2, r2
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	9207      	str	r2, [sp, #28]
 8003422:	9304      	str	r3, [sp, #16]
 8003424:	783b      	ldrb	r3, [r7, #0]
 8003426:	2b2e      	cmp	r3, #46	; 0x2e
 8003428:	d10d      	bne.n	8003446 <_svfiprintf_r+0x122>
 800342a:	787b      	ldrb	r3, [r7, #1]
 800342c:	1c79      	adds	r1, r7, #1
 800342e:	2b2a      	cmp	r3, #42	; 0x2a
 8003430:	d132      	bne.n	8003498 <_svfiprintf_r+0x174>
 8003432:	9b03      	ldr	r3, [sp, #12]
 8003434:	3702      	adds	r7, #2
 8003436:	1d1a      	adds	r2, r3, #4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	9203      	str	r2, [sp, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	bfb8      	it	lt
 8003440:	f04f 33ff 	movlt.w	r3, #4294967295
 8003444:	9305      	str	r3, [sp, #20]
 8003446:	4c2d      	ldr	r4, [pc, #180]	; (80034fc <_svfiprintf_r+0x1d8>)
 8003448:	2203      	movs	r2, #3
 800344a:	7839      	ldrb	r1, [r7, #0]
 800344c:	4620      	mov	r0, r4
 800344e:	f000 f9f5 	bl	800383c <memchr>
 8003452:	b138      	cbz	r0, 8003464 <_svfiprintf_r+0x140>
 8003454:	2340      	movs	r3, #64	; 0x40
 8003456:	1b00      	subs	r0, r0, r4
 8003458:	fa03 f000 	lsl.w	r0, r3, r0
 800345c:	9b04      	ldr	r3, [sp, #16]
 800345e:	3701      	adds	r7, #1
 8003460:	4303      	orrs	r3, r0
 8003462:	9304      	str	r3, [sp, #16]
 8003464:	7839      	ldrb	r1, [r7, #0]
 8003466:	2206      	movs	r2, #6
 8003468:	4825      	ldr	r0, [pc, #148]	; (8003500 <_svfiprintf_r+0x1dc>)
 800346a:	1c7e      	adds	r6, r7, #1
 800346c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003470:	f000 f9e4 	bl	800383c <memchr>
 8003474:	2800      	cmp	r0, #0
 8003476:	d035      	beq.n	80034e4 <_svfiprintf_r+0x1c0>
 8003478:	4b22      	ldr	r3, [pc, #136]	; (8003504 <_svfiprintf_r+0x1e0>)
 800347a:	b9fb      	cbnz	r3, 80034bc <_svfiprintf_r+0x198>
 800347c:	9b03      	ldr	r3, [sp, #12]
 800347e:	3307      	adds	r3, #7
 8003480:	f023 0307 	bic.w	r3, r3, #7
 8003484:	3308      	adds	r3, #8
 8003486:	9303      	str	r3, [sp, #12]
 8003488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800348a:	444b      	add	r3, r9
 800348c:	9309      	str	r3, [sp, #36]	; 0x24
 800348e:	e76d      	b.n	800336c <_svfiprintf_r+0x48>
 8003490:	fb00 3202 	mla	r2, r0, r2, r3
 8003494:	2101      	movs	r1, #1
 8003496:	e7a4      	b.n	80033e2 <_svfiprintf_r+0xbe>
 8003498:	2300      	movs	r3, #0
 800349a:	240a      	movs	r4, #10
 800349c:	4618      	mov	r0, r3
 800349e:	9305      	str	r3, [sp, #20]
 80034a0:	460f      	mov	r7, r1
 80034a2:	783a      	ldrb	r2, [r7, #0]
 80034a4:	3101      	adds	r1, #1
 80034a6:	3a30      	subs	r2, #48	; 0x30
 80034a8:	2a09      	cmp	r2, #9
 80034aa:	d903      	bls.n	80034b4 <_svfiprintf_r+0x190>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ca      	beq.n	8003446 <_svfiprintf_r+0x122>
 80034b0:	9005      	str	r0, [sp, #20]
 80034b2:	e7c8      	b.n	8003446 <_svfiprintf_r+0x122>
 80034b4:	fb04 2000 	mla	r0, r4, r0, r2
 80034b8:	2301      	movs	r3, #1
 80034ba:	e7f1      	b.n	80034a0 <_svfiprintf_r+0x17c>
 80034bc:	ab03      	add	r3, sp, #12
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	462a      	mov	r2, r5
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <_svfiprintf_r+0x1e4>)
 80034c4:	a904      	add	r1, sp, #16
 80034c6:	4640      	mov	r0, r8
 80034c8:	f3af 8000 	nop.w
 80034cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034d0:	4681      	mov	r9, r0
 80034d2:	d1d9      	bne.n	8003488 <_svfiprintf_r+0x164>
 80034d4:	89ab      	ldrh	r3, [r5, #12]
 80034d6:	065b      	lsls	r3, r3, #25
 80034d8:	f53f af39 	bmi.w	800334e <_svfiprintf_r+0x2a>
 80034dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034de:	b01d      	add	sp, #116	; 0x74
 80034e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034e4:	ab03      	add	r3, sp, #12
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	462a      	mov	r2, r5
 80034ea:	4b07      	ldr	r3, [pc, #28]	; (8003508 <_svfiprintf_r+0x1e4>)
 80034ec:	a904      	add	r1, sp, #16
 80034ee:	4640      	mov	r0, r8
 80034f0:	f000 f884 	bl	80035fc <_printf_i>
 80034f4:	e7ea      	b.n	80034cc <_svfiprintf_r+0x1a8>
 80034f6:	bf00      	nop
 80034f8:	080052a5 	.word	0x080052a5
 80034fc:	080052ab 	.word	0x080052ab
 8003500:	080052af 	.word	0x080052af
 8003504:	00000000 	.word	0x00000000
 8003508:	0800326d 	.word	0x0800326d

0800350c <_printf_common>:
 800350c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003510:	4691      	mov	r9, r2
 8003512:	461f      	mov	r7, r3
 8003514:	688a      	ldr	r2, [r1, #8]
 8003516:	690b      	ldr	r3, [r1, #16]
 8003518:	4606      	mov	r6, r0
 800351a:	4293      	cmp	r3, r2
 800351c:	bfb8      	it	lt
 800351e:	4613      	movlt	r3, r2
 8003520:	f8c9 3000 	str.w	r3, [r9]
 8003524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003528:	460c      	mov	r4, r1
 800352a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800352e:	b112      	cbz	r2, 8003536 <_printf_common+0x2a>
 8003530:	3301      	adds	r3, #1
 8003532:	f8c9 3000 	str.w	r3, [r9]
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	0699      	lsls	r1, r3, #26
 800353a:	bf42      	ittt	mi
 800353c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003540:	3302      	addmi	r3, #2
 8003542:	f8c9 3000 	strmi.w	r3, [r9]
 8003546:	6825      	ldr	r5, [r4, #0]
 8003548:	f015 0506 	ands.w	r5, r5, #6
 800354c:	d107      	bne.n	800355e <_printf_common+0x52>
 800354e:	f104 0a19 	add.w	sl, r4, #25
 8003552:	68e3      	ldr	r3, [r4, #12]
 8003554:	f8d9 2000 	ldr.w	r2, [r9]
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	429d      	cmp	r5, r3
 800355c:	db2a      	blt.n	80035b4 <_printf_common+0xa8>
 800355e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003562:	6822      	ldr	r2, [r4, #0]
 8003564:	3300      	adds	r3, #0
 8003566:	bf18      	it	ne
 8003568:	2301      	movne	r3, #1
 800356a:	0692      	lsls	r2, r2, #26
 800356c:	d42f      	bmi.n	80035ce <_printf_common+0xc2>
 800356e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003572:	4639      	mov	r1, r7
 8003574:	4630      	mov	r0, r6
 8003576:	47c0      	blx	r8
 8003578:	3001      	adds	r0, #1
 800357a:	d022      	beq.n	80035c2 <_printf_common+0xb6>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	68e5      	ldr	r5, [r4, #12]
 8003580:	f003 0306 	and.w	r3, r3, #6
 8003584:	2b04      	cmp	r3, #4
 8003586:	bf18      	it	ne
 8003588:	2500      	movne	r5, #0
 800358a:	f8d9 2000 	ldr.w	r2, [r9]
 800358e:	f04f 0900 	mov.w	r9, #0
 8003592:	bf08      	it	eq
 8003594:	1aad      	subeq	r5, r5, r2
 8003596:	68a3      	ldr	r3, [r4, #8]
 8003598:	6922      	ldr	r2, [r4, #16]
 800359a:	bf08      	it	eq
 800359c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a0:	4293      	cmp	r3, r2
 80035a2:	bfc4      	itt	gt
 80035a4:	1a9b      	subgt	r3, r3, r2
 80035a6:	18ed      	addgt	r5, r5, r3
 80035a8:	341a      	adds	r4, #26
 80035aa:	454d      	cmp	r5, r9
 80035ac:	d11b      	bne.n	80035e6 <_printf_common+0xda>
 80035ae:	2000      	movs	r0, #0
 80035b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b4:	2301      	movs	r3, #1
 80035b6:	4652      	mov	r2, sl
 80035b8:	4639      	mov	r1, r7
 80035ba:	4630      	mov	r0, r6
 80035bc:	47c0      	blx	r8
 80035be:	3001      	adds	r0, #1
 80035c0:	d103      	bne.n	80035ca <_printf_common+0xbe>
 80035c2:	f04f 30ff 	mov.w	r0, #4294967295
 80035c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ca:	3501      	adds	r5, #1
 80035cc:	e7c1      	b.n	8003552 <_printf_common+0x46>
 80035ce:	2030      	movs	r0, #48	; 0x30
 80035d0:	18e1      	adds	r1, r4, r3
 80035d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035dc:	4422      	add	r2, r4
 80035de:	3302      	adds	r3, #2
 80035e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035e4:	e7c3      	b.n	800356e <_printf_common+0x62>
 80035e6:	2301      	movs	r3, #1
 80035e8:	4622      	mov	r2, r4
 80035ea:	4639      	mov	r1, r7
 80035ec:	4630      	mov	r0, r6
 80035ee:	47c0      	blx	r8
 80035f0:	3001      	adds	r0, #1
 80035f2:	d0e6      	beq.n	80035c2 <_printf_common+0xb6>
 80035f4:	f109 0901 	add.w	r9, r9, #1
 80035f8:	e7d7      	b.n	80035aa <_printf_common+0x9e>
	...

080035fc <_printf_i>:
 80035fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003600:	4617      	mov	r7, r2
 8003602:	7e0a      	ldrb	r2, [r1, #24]
 8003604:	b085      	sub	sp, #20
 8003606:	2a6e      	cmp	r2, #110	; 0x6e
 8003608:	4698      	mov	r8, r3
 800360a:	4606      	mov	r6, r0
 800360c:	460c      	mov	r4, r1
 800360e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003610:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003614:	f000 80bc 	beq.w	8003790 <_printf_i+0x194>
 8003618:	d81a      	bhi.n	8003650 <_printf_i+0x54>
 800361a:	2a63      	cmp	r2, #99	; 0x63
 800361c:	d02e      	beq.n	800367c <_printf_i+0x80>
 800361e:	d80a      	bhi.n	8003636 <_printf_i+0x3a>
 8003620:	2a00      	cmp	r2, #0
 8003622:	f000 80c8 	beq.w	80037b6 <_printf_i+0x1ba>
 8003626:	2a58      	cmp	r2, #88	; 0x58
 8003628:	f000 808a 	beq.w	8003740 <_printf_i+0x144>
 800362c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003630:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003634:	e02a      	b.n	800368c <_printf_i+0x90>
 8003636:	2a64      	cmp	r2, #100	; 0x64
 8003638:	d001      	beq.n	800363e <_printf_i+0x42>
 800363a:	2a69      	cmp	r2, #105	; 0x69
 800363c:	d1f6      	bne.n	800362c <_printf_i+0x30>
 800363e:	6821      	ldr	r1, [r4, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003646:	d023      	beq.n	8003690 <_printf_i+0x94>
 8003648:	1d11      	adds	r1, r2, #4
 800364a:	6019      	str	r1, [r3, #0]
 800364c:	6813      	ldr	r3, [r2, #0]
 800364e:	e027      	b.n	80036a0 <_printf_i+0xa4>
 8003650:	2a73      	cmp	r2, #115	; 0x73
 8003652:	f000 80b4 	beq.w	80037be <_printf_i+0x1c2>
 8003656:	d808      	bhi.n	800366a <_printf_i+0x6e>
 8003658:	2a6f      	cmp	r2, #111	; 0x6f
 800365a:	d02a      	beq.n	80036b2 <_printf_i+0xb6>
 800365c:	2a70      	cmp	r2, #112	; 0x70
 800365e:	d1e5      	bne.n	800362c <_printf_i+0x30>
 8003660:	680a      	ldr	r2, [r1, #0]
 8003662:	f042 0220 	orr.w	r2, r2, #32
 8003666:	600a      	str	r2, [r1, #0]
 8003668:	e003      	b.n	8003672 <_printf_i+0x76>
 800366a:	2a75      	cmp	r2, #117	; 0x75
 800366c:	d021      	beq.n	80036b2 <_printf_i+0xb6>
 800366e:	2a78      	cmp	r2, #120	; 0x78
 8003670:	d1dc      	bne.n	800362c <_printf_i+0x30>
 8003672:	2278      	movs	r2, #120	; 0x78
 8003674:	496f      	ldr	r1, [pc, #444]	; (8003834 <_printf_i+0x238>)
 8003676:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800367a:	e064      	b.n	8003746 <_printf_i+0x14a>
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003682:	1d11      	adds	r1, r2, #4
 8003684:	6019      	str	r1, [r3, #0]
 8003686:	6813      	ldr	r3, [r2, #0]
 8003688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800368c:	2301      	movs	r3, #1
 800368e:	e0a3      	b.n	80037d8 <_printf_i+0x1dc>
 8003690:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003694:	f102 0104 	add.w	r1, r2, #4
 8003698:	6019      	str	r1, [r3, #0]
 800369a:	d0d7      	beq.n	800364c <_printf_i+0x50>
 800369c:	f9b2 3000 	ldrsh.w	r3, [r2]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	da03      	bge.n	80036ac <_printf_i+0xb0>
 80036a4:	222d      	movs	r2, #45	; 0x2d
 80036a6:	425b      	negs	r3, r3
 80036a8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80036ac:	4962      	ldr	r1, [pc, #392]	; (8003838 <_printf_i+0x23c>)
 80036ae:	220a      	movs	r2, #10
 80036b0:	e017      	b.n	80036e2 <_printf_i+0xe6>
 80036b2:	6820      	ldr	r0, [r4, #0]
 80036b4:	6819      	ldr	r1, [r3, #0]
 80036b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80036ba:	d003      	beq.n	80036c4 <_printf_i+0xc8>
 80036bc:	1d08      	adds	r0, r1, #4
 80036be:	6018      	str	r0, [r3, #0]
 80036c0:	680b      	ldr	r3, [r1, #0]
 80036c2:	e006      	b.n	80036d2 <_printf_i+0xd6>
 80036c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036c8:	f101 0004 	add.w	r0, r1, #4
 80036cc:	6018      	str	r0, [r3, #0]
 80036ce:	d0f7      	beq.n	80036c0 <_printf_i+0xc4>
 80036d0:	880b      	ldrh	r3, [r1, #0]
 80036d2:	2a6f      	cmp	r2, #111	; 0x6f
 80036d4:	bf14      	ite	ne
 80036d6:	220a      	movne	r2, #10
 80036d8:	2208      	moveq	r2, #8
 80036da:	4957      	ldr	r1, [pc, #348]	; (8003838 <_printf_i+0x23c>)
 80036dc:	2000      	movs	r0, #0
 80036de:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80036e2:	6865      	ldr	r5, [r4, #4]
 80036e4:	2d00      	cmp	r5, #0
 80036e6:	60a5      	str	r5, [r4, #8]
 80036e8:	f2c0 809c 	blt.w	8003824 <_printf_i+0x228>
 80036ec:	6820      	ldr	r0, [r4, #0]
 80036ee:	f020 0004 	bic.w	r0, r0, #4
 80036f2:	6020      	str	r0, [r4, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d13f      	bne.n	8003778 <_printf_i+0x17c>
 80036f8:	2d00      	cmp	r5, #0
 80036fa:	f040 8095 	bne.w	8003828 <_printf_i+0x22c>
 80036fe:	4675      	mov	r5, lr
 8003700:	2a08      	cmp	r2, #8
 8003702:	d10b      	bne.n	800371c <_printf_i+0x120>
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	07da      	lsls	r2, r3, #31
 8003708:	d508      	bpl.n	800371c <_printf_i+0x120>
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	6862      	ldr	r2, [r4, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	bfde      	ittt	le
 8003712:	2330      	movle	r3, #48	; 0x30
 8003714:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003718:	f105 35ff 	addle.w	r5, r5, #4294967295
 800371c:	ebae 0305 	sub.w	r3, lr, r5
 8003720:	6123      	str	r3, [r4, #16]
 8003722:	f8cd 8000 	str.w	r8, [sp]
 8003726:	463b      	mov	r3, r7
 8003728:	aa03      	add	r2, sp, #12
 800372a:	4621      	mov	r1, r4
 800372c:	4630      	mov	r0, r6
 800372e:	f7ff feed 	bl	800350c <_printf_common>
 8003732:	3001      	adds	r0, #1
 8003734:	d155      	bne.n	80037e2 <_printf_i+0x1e6>
 8003736:	f04f 30ff 	mov.w	r0, #4294967295
 800373a:	b005      	add	sp, #20
 800373c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003740:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003744:	493c      	ldr	r1, [pc, #240]	; (8003838 <_printf_i+0x23c>)
 8003746:	6822      	ldr	r2, [r4, #0]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800374e:	f100 0504 	add.w	r5, r0, #4
 8003752:	601d      	str	r5, [r3, #0]
 8003754:	d001      	beq.n	800375a <_printf_i+0x15e>
 8003756:	6803      	ldr	r3, [r0, #0]
 8003758:	e002      	b.n	8003760 <_printf_i+0x164>
 800375a:	0655      	lsls	r5, r2, #25
 800375c:	d5fb      	bpl.n	8003756 <_printf_i+0x15a>
 800375e:	8803      	ldrh	r3, [r0, #0]
 8003760:	07d0      	lsls	r0, r2, #31
 8003762:	bf44      	itt	mi
 8003764:	f042 0220 	orrmi.w	r2, r2, #32
 8003768:	6022      	strmi	r2, [r4, #0]
 800376a:	b91b      	cbnz	r3, 8003774 <_printf_i+0x178>
 800376c:	6822      	ldr	r2, [r4, #0]
 800376e:	f022 0220 	bic.w	r2, r2, #32
 8003772:	6022      	str	r2, [r4, #0]
 8003774:	2210      	movs	r2, #16
 8003776:	e7b1      	b.n	80036dc <_printf_i+0xe0>
 8003778:	4675      	mov	r5, lr
 800377a:	fbb3 f0f2 	udiv	r0, r3, r2
 800377e:	fb02 3310 	mls	r3, r2, r0, r3
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003788:	4603      	mov	r3, r0
 800378a:	2800      	cmp	r0, #0
 800378c:	d1f5      	bne.n	800377a <_printf_i+0x17e>
 800378e:	e7b7      	b.n	8003700 <_printf_i+0x104>
 8003790:	6808      	ldr	r0, [r1, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003798:	6949      	ldr	r1, [r1, #20]
 800379a:	d004      	beq.n	80037a6 <_printf_i+0x1aa>
 800379c:	1d10      	adds	r0, r2, #4
 800379e:	6018      	str	r0, [r3, #0]
 80037a0:	6813      	ldr	r3, [r2, #0]
 80037a2:	6019      	str	r1, [r3, #0]
 80037a4:	e007      	b.n	80037b6 <_printf_i+0x1ba>
 80037a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037aa:	f102 0004 	add.w	r0, r2, #4
 80037ae:	6018      	str	r0, [r3, #0]
 80037b0:	6813      	ldr	r3, [r2, #0]
 80037b2:	d0f6      	beq.n	80037a2 <_printf_i+0x1a6>
 80037b4:	8019      	strh	r1, [r3, #0]
 80037b6:	2300      	movs	r3, #0
 80037b8:	4675      	mov	r5, lr
 80037ba:	6123      	str	r3, [r4, #16]
 80037bc:	e7b1      	b.n	8003722 <_printf_i+0x126>
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	1d11      	adds	r1, r2, #4
 80037c2:	6019      	str	r1, [r3, #0]
 80037c4:	6815      	ldr	r5, [r2, #0]
 80037c6:	2100      	movs	r1, #0
 80037c8:	6862      	ldr	r2, [r4, #4]
 80037ca:	4628      	mov	r0, r5
 80037cc:	f000 f836 	bl	800383c <memchr>
 80037d0:	b108      	cbz	r0, 80037d6 <_printf_i+0x1da>
 80037d2:	1b40      	subs	r0, r0, r5
 80037d4:	6060      	str	r0, [r4, #4]
 80037d6:	6863      	ldr	r3, [r4, #4]
 80037d8:	6123      	str	r3, [r4, #16]
 80037da:	2300      	movs	r3, #0
 80037dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037e0:	e79f      	b.n	8003722 <_printf_i+0x126>
 80037e2:	6923      	ldr	r3, [r4, #16]
 80037e4:	462a      	mov	r2, r5
 80037e6:	4639      	mov	r1, r7
 80037e8:	4630      	mov	r0, r6
 80037ea:	47c0      	blx	r8
 80037ec:	3001      	adds	r0, #1
 80037ee:	d0a2      	beq.n	8003736 <_printf_i+0x13a>
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	079b      	lsls	r3, r3, #30
 80037f4:	d507      	bpl.n	8003806 <_printf_i+0x20a>
 80037f6:	2500      	movs	r5, #0
 80037f8:	f104 0919 	add.w	r9, r4, #25
 80037fc:	68e3      	ldr	r3, [r4, #12]
 80037fe:	9a03      	ldr	r2, [sp, #12]
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	429d      	cmp	r5, r3
 8003804:	db05      	blt.n	8003812 <_printf_i+0x216>
 8003806:	68e0      	ldr	r0, [r4, #12]
 8003808:	9b03      	ldr	r3, [sp, #12]
 800380a:	4298      	cmp	r0, r3
 800380c:	bfb8      	it	lt
 800380e:	4618      	movlt	r0, r3
 8003810:	e793      	b.n	800373a <_printf_i+0x13e>
 8003812:	2301      	movs	r3, #1
 8003814:	464a      	mov	r2, r9
 8003816:	4639      	mov	r1, r7
 8003818:	4630      	mov	r0, r6
 800381a:	47c0      	blx	r8
 800381c:	3001      	adds	r0, #1
 800381e:	d08a      	beq.n	8003736 <_printf_i+0x13a>
 8003820:	3501      	adds	r5, #1
 8003822:	e7eb      	b.n	80037fc <_printf_i+0x200>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1a7      	bne.n	8003778 <_printf_i+0x17c>
 8003828:	780b      	ldrb	r3, [r1, #0]
 800382a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800382e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003832:	e765      	b.n	8003700 <_printf_i+0x104>
 8003834:	080052c7 	.word	0x080052c7
 8003838:	080052b6 	.word	0x080052b6

0800383c <memchr>:
 800383c:	b510      	push	{r4, lr}
 800383e:	b2c9      	uxtb	r1, r1
 8003840:	4402      	add	r2, r0
 8003842:	4290      	cmp	r0, r2
 8003844:	4603      	mov	r3, r0
 8003846:	d101      	bne.n	800384c <memchr+0x10>
 8003848:	2000      	movs	r0, #0
 800384a:	bd10      	pop	{r4, pc}
 800384c:	781c      	ldrb	r4, [r3, #0]
 800384e:	3001      	adds	r0, #1
 8003850:	428c      	cmp	r4, r1
 8003852:	d1f6      	bne.n	8003842 <memchr+0x6>
 8003854:	4618      	mov	r0, r3
 8003856:	bd10      	pop	{r4, pc}

08003858 <memcpy>:
 8003858:	b510      	push	{r4, lr}
 800385a:	1e43      	subs	r3, r0, #1
 800385c:	440a      	add	r2, r1
 800385e:	4291      	cmp	r1, r2
 8003860:	d100      	bne.n	8003864 <memcpy+0xc>
 8003862:	bd10      	pop	{r4, pc}
 8003864:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003868:	f803 4f01 	strb.w	r4, [r3, #1]!
 800386c:	e7f7      	b.n	800385e <memcpy+0x6>

0800386e <memmove>:
 800386e:	4288      	cmp	r0, r1
 8003870:	b510      	push	{r4, lr}
 8003872:	eb01 0302 	add.w	r3, r1, r2
 8003876:	d803      	bhi.n	8003880 <memmove+0x12>
 8003878:	1e42      	subs	r2, r0, #1
 800387a:	4299      	cmp	r1, r3
 800387c:	d10c      	bne.n	8003898 <memmove+0x2a>
 800387e:	bd10      	pop	{r4, pc}
 8003880:	4298      	cmp	r0, r3
 8003882:	d2f9      	bcs.n	8003878 <memmove+0xa>
 8003884:	1881      	adds	r1, r0, r2
 8003886:	1ad2      	subs	r2, r2, r3
 8003888:	42d3      	cmn	r3, r2
 800388a:	d100      	bne.n	800388e <memmove+0x20>
 800388c:	bd10      	pop	{r4, pc}
 800388e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003892:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003896:	e7f7      	b.n	8003888 <memmove+0x1a>
 8003898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800389c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80038a0:	e7eb      	b.n	800387a <memmove+0xc>
	...

080038a4 <_free_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4605      	mov	r5, r0
 80038a8:	2900      	cmp	r1, #0
 80038aa:	d043      	beq.n	8003934 <_free_r+0x90>
 80038ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b0:	1f0c      	subs	r4, r1, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bfb8      	it	lt
 80038b6:	18e4      	addlt	r4, r4, r3
 80038b8:	f000 f8d4 	bl	8003a64 <__malloc_lock>
 80038bc:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <_free_r+0x94>)
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	4610      	mov	r0, r2
 80038c2:	b933      	cbnz	r3, 80038d2 <_free_r+0x2e>
 80038c4:	6063      	str	r3, [r4, #4]
 80038c6:	6014      	str	r4, [r2, #0]
 80038c8:	4628      	mov	r0, r5
 80038ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ce:	f000 b8ca 	b.w	8003a66 <__malloc_unlock>
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	d90b      	bls.n	80038ee <_free_r+0x4a>
 80038d6:	6821      	ldr	r1, [r4, #0]
 80038d8:	1862      	adds	r2, r4, r1
 80038da:	4293      	cmp	r3, r2
 80038dc:	bf01      	itttt	eq
 80038de:	681a      	ldreq	r2, [r3, #0]
 80038e0:	685b      	ldreq	r3, [r3, #4]
 80038e2:	1852      	addeq	r2, r2, r1
 80038e4:	6022      	streq	r2, [r4, #0]
 80038e6:	6063      	str	r3, [r4, #4]
 80038e8:	6004      	str	r4, [r0, #0]
 80038ea:	e7ed      	b.n	80038c8 <_free_r+0x24>
 80038ec:	4613      	mov	r3, r2
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	b10a      	cbz	r2, 80038f6 <_free_r+0x52>
 80038f2:	42a2      	cmp	r2, r4
 80038f4:	d9fa      	bls.n	80038ec <_free_r+0x48>
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	1858      	adds	r0, r3, r1
 80038fa:	42a0      	cmp	r0, r4
 80038fc:	d10b      	bne.n	8003916 <_free_r+0x72>
 80038fe:	6820      	ldr	r0, [r4, #0]
 8003900:	4401      	add	r1, r0
 8003902:	1858      	adds	r0, r3, r1
 8003904:	4282      	cmp	r2, r0
 8003906:	6019      	str	r1, [r3, #0]
 8003908:	d1de      	bne.n	80038c8 <_free_r+0x24>
 800390a:	6810      	ldr	r0, [r2, #0]
 800390c:	6852      	ldr	r2, [r2, #4]
 800390e:	4401      	add	r1, r0
 8003910:	6019      	str	r1, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	e7d8      	b.n	80038c8 <_free_r+0x24>
 8003916:	d902      	bls.n	800391e <_free_r+0x7a>
 8003918:	230c      	movs	r3, #12
 800391a:	602b      	str	r3, [r5, #0]
 800391c:	e7d4      	b.n	80038c8 <_free_r+0x24>
 800391e:	6820      	ldr	r0, [r4, #0]
 8003920:	1821      	adds	r1, r4, r0
 8003922:	428a      	cmp	r2, r1
 8003924:	bf01      	itttt	eq
 8003926:	6811      	ldreq	r1, [r2, #0]
 8003928:	6852      	ldreq	r2, [r2, #4]
 800392a:	1809      	addeq	r1, r1, r0
 800392c:	6021      	streq	r1, [r4, #0]
 800392e:	6062      	str	r2, [r4, #4]
 8003930:	605c      	str	r4, [r3, #4]
 8003932:	e7c9      	b.n	80038c8 <_free_r+0x24>
 8003934:	bd38      	pop	{r3, r4, r5, pc}
 8003936:	bf00      	nop
 8003938:	2000008c 	.word	0x2000008c

0800393c <_malloc_r>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	1ccd      	adds	r5, r1, #3
 8003940:	f025 0503 	bic.w	r5, r5, #3
 8003944:	3508      	adds	r5, #8
 8003946:	2d0c      	cmp	r5, #12
 8003948:	bf38      	it	cc
 800394a:	250c      	movcc	r5, #12
 800394c:	2d00      	cmp	r5, #0
 800394e:	4606      	mov	r6, r0
 8003950:	db01      	blt.n	8003956 <_malloc_r+0x1a>
 8003952:	42a9      	cmp	r1, r5
 8003954:	d903      	bls.n	800395e <_malloc_r+0x22>
 8003956:	230c      	movs	r3, #12
 8003958:	6033      	str	r3, [r6, #0]
 800395a:	2000      	movs	r0, #0
 800395c:	bd70      	pop	{r4, r5, r6, pc}
 800395e:	f000 f881 	bl	8003a64 <__malloc_lock>
 8003962:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <_malloc_r+0xb4>)
 8003964:	6814      	ldr	r4, [r2, #0]
 8003966:	4621      	mov	r1, r4
 8003968:	b991      	cbnz	r1, 8003990 <_malloc_r+0x54>
 800396a:	4c22      	ldr	r4, [pc, #136]	; (80039f4 <_malloc_r+0xb8>)
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	b91b      	cbnz	r3, 8003978 <_malloc_r+0x3c>
 8003970:	4630      	mov	r0, r6
 8003972:	f000 f867 	bl	8003a44 <_sbrk_r>
 8003976:	6020      	str	r0, [r4, #0]
 8003978:	4629      	mov	r1, r5
 800397a:	4630      	mov	r0, r6
 800397c:	f000 f862 	bl	8003a44 <_sbrk_r>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d126      	bne.n	80039d2 <_malloc_r+0x96>
 8003984:	230c      	movs	r3, #12
 8003986:	4630      	mov	r0, r6
 8003988:	6033      	str	r3, [r6, #0]
 800398a:	f000 f86c 	bl	8003a66 <__malloc_unlock>
 800398e:	e7e4      	b.n	800395a <_malloc_r+0x1e>
 8003990:	680b      	ldr	r3, [r1, #0]
 8003992:	1b5b      	subs	r3, r3, r5
 8003994:	d41a      	bmi.n	80039cc <_malloc_r+0x90>
 8003996:	2b0b      	cmp	r3, #11
 8003998:	d90f      	bls.n	80039ba <_malloc_r+0x7e>
 800399a:	600b      	str	r3, [r1, #0]
 800399c:	18cc      	adds	r4, r1, r3
 800399e:	50cd      	str	r5, [r1, r3]
 80039a0:	4630      	mov	r0, r6
 80039a2:	f000 f860 	bl	8003a66 <__malloc_unlock>
 80039a6:	f104 000b 	add.w	r0, r4, #11
 80039aa:	1d23      	adds	r3, r4, #4
 80039ac:	f020 0007 	bic.w	r0, r0, #7
 80039b0:	1ac3      	subs	r3, r0, r3
 80039b2:	d01b      	beq.n	80039ec <_malloc_r+0xb0>
 80039b4:	425a      	negs	r2, r3
 80039b6:	50e2      	str	r2, [r4, r3]
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
 80039ba:	428c      	cmp	r4, r1
 80039bc:	bf0b      	itete	eq
 80039be:	6863      	ldreq	r3, [r4, #4]
 80039c0:	684b      	ldrne	r3, [r1, #4]
 80039c2:	6013      	streq	r3, [r2, #0]
 80039c4:	6063      	strne	r3, [r4, #4]
 80039c6:	bf18      	it	ne
 80039c8:	460c      	movne	r4, r1
 80039ca:	e7e9      	b.n	80039a0 <_malloc_r+0x64>
 80039cc:	460c      	mov	r4, r1
 80039ce:	6849      	ldr	r1, [r1, #4]
 80039d0:	e7ca      	b.n	8003968 <_malloc_r+0x2c>
 80039d2:	1cc4      	adds	r4, r0, #3
 80039d4:	f024 0403 	bic.w	r4, r4, #3
 80039d8:	42a0      	cmp	r0, r4
 80039da:	d005      	beq.n	80039e8 <_malloc_r+0xac>
 80039dc:	1a21      	subs	r1, r4, r0
 80039de:	4630      	mov	r0, r6
 80039e0:	f000 f830 	bl	8003a44 <_sbrk_r>
 80039e4:	3001      	adds	r0, #1
 80039e6:	d0cd      	beq.n	8003984 <_malloc_r+0x48>
 80039e8:	6025      	str	r5, [r4, #0]
 80039ea:	e7d9      	b.n	80039a0 <_malloc_r+0x64>
 80039ec:	bd70      	pop	{r4, r5, r6, pc}
 80039ee:	bf00      	nop
 80039f0:	2000008c 	.word	0x2000008c
 80039f4:	20000090 	.word	0x20000090

080039f8 <_realloc_r>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	4607      	mov	r7, r0
 80039fc:	4614      	mov	r4, r2
 80039fe:	460e      	mov	r6, r1
 8003a00:	b921      	cbnz	r1, 8003a0c <_realloc_r+0x14>
 8003a02:	4611      	mov	r1, r2
 8003a04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a08:	f7ff bf98 	b.w	800393c <_malloc_r>
 8003a0c:	b922      	cbnz	r2, 8003a18 <_realloc_r+0x20>
 8003a0e:	f7ff ff49 	bl	80038a4 <_free_r>
 8003a12:	4625      	mov	r5, r4
 8003a14:	4628      	mov	r0, r5
 8003a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a18:	f000 f826 	bl	8003a68 <_malloc_usable_size_r>
 8003a1c:	4284      	cmp	r4, r0
 8003a1e:	d90f      	bls.n	8003a40 <_realloc_r+0x48>
 8003a20:	4621      	mov	r1, r4
 8003a22:	4638      	mov	r0, r7
 8003a24:	f7ff ff8a 	bl	800393c <_malloc_r>
 8003a28:	4605      	mov	r5, r0
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d0f2      	beq.n	8003a14 <_realloc_r+0x1c>
 8003a2e:	4631      	mov	r1, r6
 8003a30:	4622      	mov	r2, r4
 8003a32:	f7ff ff11 	bl	8003858 <memcpy>
 8003a36:	4631      	mov	r1, r6
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f7ff ff33 	bl	80038a4 <_free_r>
 8003a3e:	e7e9      	b.n	8003a14 <_realloc_r+0x1c>
 8003a40:	4635      	mov	r5, r6
 8003a42:	e7e7      	b.n	8003a14 <_realloc_r+0x1c>

08003a44 <_sbrk_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	2300      	movs	r3, #0
 8003a48:	4c05      	ldr	r4, [pc, #20]	; (8003a60 <_sbrk_r+0x1c>)
 8003a4a:	4605      	mov	r5, r0
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	6023      	str	r3, [r4, #0]
 8003a50:	f001 f82e 	bl	8004ab0 <_sbrk>
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	d102      	bne.n	8003a5e <_sbrk_r+0x1a>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	b103      	cbz	r3, 8003a5e <_sbrk_r+0x1a>
 8003a5c:	602b      	str	r3, [r5, #0]
 8003a5e:	bd38      	pop	{r3, r4, r5, pc}
 8003a60:	20000548 	.word	0x20000548

08003a64 <__malloc_lock>:
 8003a64:	4770      	bx	lr

08003a66 <__malloc_unlock>:
 8003a66:	4770      	bx	lr

08003a68 <_malloc_usable_size_r>:
 8003a68:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	f1a0 0004 	sub.w	r0, r0, #4
 8003a72:	bfbc      	itt	lt
 8003a74:	580b      	ldrlt	r3, [r1, r0]
 8003a76:	18c0      	addlt	r0, r0, r3
 8003a78:	4770      	bx	lr
	...

08003a7c <pow>:
 8003a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a80:	b08f      	sub	sp, #60	; 0x3c
 8003a82:	461d      	mov	r5, r3
 8003a84:	4680      	mov	r8, r0
 8003a86:	4689      	mov	r9, r1
 8003a88:	4614      	mov	r4, r2
 8003a8a:	f000 f95d 	bl	8003d48 <__ieee754_pow>
 8003a8e:	4fa5      	ldr	r7, [pc, #660]	; (8003d24 <pow+0x2a8>)
 8003a90:	e9cd 0100 	strd	r0, r1, [sp]
 8003a94:	f997 3000 	ldrsb.w	r3, [r7]
 8003a98:	463e      	mov	r6, r7
 8003a9a:	9302      	str	r3, [sp, #8]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	d05f      	beq.n	8003b60 <pow+0xe4>
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	462b      	mov	r3, r5
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	f7fc ffbc 	bl	8000a24 <__aeabi_dcmpun>
 8003aac:	4682      	mov	sl, r0
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d156      	bne.n	8003b60 <pow+0xe4>
 8003ab2:	4642      	mov	r2, r8
 8003ab4:	464b      	mov	r3, r9
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	4649      	mov	r1, r9
 8003aba:	f7fc ffb3 	bl	8000a24 <__aeabi_dcmpun>
 8003abe:	9003      	str	r0, [sp, #12]
 8003ac0:	b1e8      	cbz	r0, 8003afe <pow+0x82>
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	4629      	mov	r1, r5
 8003aca:	f7fc ff79 	bl	80009c0 <__aeabi_dcmpeq>
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	d046      	beq.n	8003b60 <pow+0xe4>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	9304      	str	r3, [sp, #16]
 8003ad8:	4b93      	ldr	r3, [pc, #588]	; (8003d28 <pow+0x2ac>)
 8003ada:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003ade:	9305      	str	r3, [sp, #20]
 8003ae0:	4b92      	ldr	r3, [pc, #584]	; (8003d2c <pow+0x2b0>)
 8003ae2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003ae6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003aea:	9b02      	ldr	r3, [sp, #8]
 8003aec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d031      	beq.n	8003b58 <pow+0xdc>
 8003af4:	a804      	add	r0, sp, #16
 8003af6:	f000 fece 	bl	8004896 <matherr>
 8003afa:	bb38      	cbnz	r0, 8003b4c <pow+0xd0>
 8003afc:	e058      	b.n	8003bb0 <pow+0x134>
 8003afe:	f04f 0a00 	mov.w	sl, #0
 8003b02:	f04f 0b00 	mov.w	fp, #0
 8003b06:	4652      	mov	r2, sl
 8003b08:	465b      	mov	r3, fp
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	f7fc ff57 	bl	80009c0 <__aeabi_dcmpeq>
 8003b12:	2800      	cmp	r0, #0
 8003b14:	d051      	beq.n	8003bba <pow+0x13e>
 8003b16:	4652      	mov	r2, sl
 8003b18:	465b      	mov	r3, fp
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	f7fc ff4f 	bl	80009c0 <__aeabi_dcmpeq>
 8003b22:	4606      	mov	r6, r0
 8003b24:	b308      	cbz	r0, 8003b6a <pow+0xee>
 8003b26:	2301      	movs	r3, #1
 8003b28:	9304      	str	r3, [sp, #16]
 8003b2a:	4b7f      	ldr	r3, [pc, #508]	; (8003d28 <pow+0x2ac>)
 8003b2c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003b30:	9305      	str	r3, [sp, #20]
 8003b32:	9b03      	ldr	r3, [sp, #12]
 8003b34:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003b38:	930c      	str	r3, [sp, #48]	; 0x30
 8003b3a:	9b02      	ldr	r3, [sp, #8]
 8003b3c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0d7      	beq.n	8003af4 <pow+0x78>
 8003b44:	2200      	movs	r2, #0
 8003b46:	4b79      	ldr	r3, [pc, #484]	; (8003d2c <pow+0x2b0>)
 8003b48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b4e:	b11b      	cbz	r3, 8003b58 <pow+0xdc>
 8003b50:	f000 ffa8 	bl	8004aa4 <__errno>
 8003b54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b56:	6003      	str	r3, [r0, #0]
 8003b58:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8003b5c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8003b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b64:	b00f      	add	sp, #60	; 0x3c
 8003b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	f000 fe8c 	bl	800488a <finite>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d0f4      	beq.n	8003b60 <pow+0xe4>
 8003b76:	4652      	mov	r2, sl
 8003b78:	465b      	mov	r3, fp
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	f7fc ff29 	bl	80009d4 <__aeabi_dcmplt>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d0ec      	beq.n	8003b60 <pow+0xe4>
 8003b86:	2301      	movs	r3, #1
 8003b88:	9304      	str	r3, [sp, #16]
 8003b8a:	4b67      	ldr	r3, [pc, #412]	; (8003d28 <pow+0x2ac>)
 8003b8c:	960c      	str	r6, [sp, #48]	; 0x30
 8003b8e:	9305      	str	r3, [sp, #20]
 8003b90:	f997 3000 	ldrsb.w	r3, [r7]
 8003b94:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003b98:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003b9c:	b913      	cbnz	r3, 8003ba4 <pow+0x128>
 8003b9e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003ba2:	e7a7      	b.n	8003af4 <pow+0x78>
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	4962      	ldr	r1, [pc, #392]	; (8003d30 <pow+0x2b4>)
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003bae:	d1a1      	bne.n	8003af4 <pow+0x78>
 8003bb0:	f000 ff78 	bl	8004aa4 <__errno>
 8003bb4:	2321      	movs	r3, #33	; 0x21
 8003bb6:	6003      	str	r3, [r0, #0]
 8003bb8:	e7c8      	b.n	8003b4c <pow+0xd0>
 8003bba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bbe:	f000 fe64 	bl	800488a <finite>
 8003bc2:	9002      	str	r0, [sp, #8]
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d17f      	bne.n	8003cc8 <pow+0x24c>
 8003bc8:	4640      	mov	r0, r8
 8003bca:	4649      	mov	r1, r9
 8003bcc:	f000 fe5d 	bl	800488a <finite>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d079      	beq.n	8003cc8 <pow+0x24c>
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	f000 fe57 	bl	800488a <finite>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d073      	beq.n	8003cc8 <pow+0x24c>
 8003be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f7fc ff1c 	bl	8000a24 <__aeabi_dcmpun>
 8003bec:	f997 7000 	ldrsb.w	r7, [r7]
 8003bf0:	4b4d      	ldr	r3, [pc, #308]	; (8003d28 <pow+0x2ac>)
 8003bf2:	b1a0      	cbz	r0, 8003c1e <pow+0x1a2>
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	9305      	str	r3, [sp, #20]
 8003bf8:	9b02      	ldr	r3, [sp, #8]
 8003bfa:	9204      	str	r2, [sp, #16]
 8003bfc:	930c      	str	r3, [sp, #48]	; 0x30
 8003bfe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003c02:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003c06:	2f00      	cmp	r7, #0
 8003c08:	d0c9      	beq.n	8003b9e <pow+0x122>
 8003c0a:	4652      	mov	r2, sl
 8003c0c:	465b      	mov	r3, fp
 8003c0e:	4650      	mov	r0, sl
 8003c10:	4659      	mov	r1, fp
 8003c12:	f7fc fd97 	bl	8000744 <__aeabi_ddiv>
 8003c16:	2f02      	cmp	r7, #2
 8003c18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003c1c:	e7c7      	b.n	8003bae <pow+0x132>
 8003c1e:	2203      	movs	r2, #3
 8003c20:	9305      	str	r3, [sp, #20]
 8003c22:	9204      	str	r2, [sp, #16]
 8003c24:	900c      	str	r0, [sp, #48]	; 0x30
 8003c26:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003c2a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003c2e:	bb57      	cbnz	r7, 8003c86 <pow+0x20a>
 8003c30:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003c34:	4b3f      	ldr	r3, [pc, #252]	; (8003d34 <pow+0x2b8>)
 8003c36:	4640      	mov	r0, r8
 8003c38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003c3c:	4649      	mov	r1, r9
 8003c3e:	4652      	mov	r2, sl
 8003c40:	465b      	mov	r3, fp
 8003c42:	f7fc fec7 	bl	80009d4 <__aeabi_dcmplt>
 8003c46:	2800      	cmp	r0, #0
 8003c48:	d064      	beq.n	8003d14 <pow+0x298>
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <pow+0x2bc>)
 8003c4e:	4620      	mov	r0, r4
 8003c50:	4629      	mov	r1, r5
 8003c52:	f7fc fc4d 	bl	80004f0 <__aeabi_dmul>
 8003c56:	4604      	mov	r4, r0
 8003c58:	460d      	mov	r5, r1
 8003c5a:	f000 fe25 	bl	80048a8 <rint>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4620      	mov	r0, r4
 8003c64:	4629      	mov	r1, r5
 8003c66:	f7fc feab 	bl	80009c0 <__aeabi_dcmpeq>
 8003c6a:	b920      	cbnz	r0, 8003c76 <pow+0x1fa>
 8003c6c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003c70:	4b32      	ldr	r3, [pc, #200]	; (8003d3c <pow+0x2c0>)
 8003c72:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003c76:	f996 3000 	ldrsb.w	r3, [r6]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d14a      	bne.n	8003d14 <pow+0x298>
 8003c7e:	f000 ff11 	bl	8004aa4 <__errno>
 8003c82:	2322      	movs	r3, #34	; 0x22
 8003c84:	e797      	b.n	8003bb6 <pow+0x13a>
 8003c86:	2200      	movs	r2, #0
 8003c88:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <pow+0x2c4>)
 8003c8a:	4640      	mov	r0, r8
 8003c8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003c90:	4649      	mov	r1, r9
 8003c92:	4652      	mov	r2, sl
 8003c94:	465b      	mov	r3, fp
 8003c96:	f7fc fe9d 	bl	80009d4 <__aeabi_dcmplt>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d0eb      	beq.n	8003c76 <pow+0x1fa>
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <pow+0x2bc>)
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	f7fc fc23 	bl	80004f0 <__aeabi_dmul>
 8003caa:	4604      	mov	r4, r0
 8003cac:	460d      	mov	r5, r1
 8003cae:	f000 fdfb 	bl	80048a8 <rint>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	4629      	mov	r1, r5
 8003cba:	f7fc fe81 	bl	80009c0 <__aeabi_dcmpeq>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d1d9      	bne.n	8003c76 <pow+0x1fa>
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <pow+0x2b4>)
 8003cc6:	e7d4      	b.n	8003c72 <pow+0x1f6>
 8003cc8:	2200      	movs	r2, #0
 8003cca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f7fc fe76 	bl	80009c0 <__aeabi_dcmpeq>
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	f43f af43 	beq.w	8003b60 <pow+0xe4>
 8003cda:	4640      	mov	r0, r8
 8003cdc:	4649      	mov	r1, r9
 8003cde:	f000 fdd4 	bl	800488a <finite>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	f43f af3c 	beq.w	8003b60 <pow+0xe4>
 8003ce8:	4620      	mov	r0, r4
 8003cea:	4629      	mov	r1, r5
 8003cec:	f000 fdcd 	bl	800488a <finite>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	f43f af35 	beq.w	8003b60 <pow+0xe4>
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	9304      	str	r3, [sp, #16]
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <pow+0x2ac>)
 8003cfc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003d00:	9305      	str	r3, [sp, #20]
 8003d02:	2300      	movs	r3, #0
 8003d04:	2400      	movs	r4, #0
 8003d06:	930c      	str	r3, [sp, #48]	; 0x30
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003d0e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8003d12:	e7b0      	b.n	8003c76 <pow+0x1fa>
 8003d14:	a804      	add	r0, sp, #16
 8003d16:	f000 fdbe 	bl	8004896 <matherr>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	f47f af16 	bne.w	8003b4c <pow+0xd0>
 8003d20:	e7ad      	b.n	8003c7e <pow+0x202>
 8003d22:	bf00      	nop
 8003d24:	20000068 	.word	0x20000068
 8003d28:	080052d8 	.word	0x080052d8
 8003d2c:	3ff00000 	.word	0x3ff00000
 8003d30:	fff00000 	.word	0xfff00000
 8003d34:	47efffff 	.word	0x47efffff
 8003d38:	3fe00000 	.word	0x3fe00000
 8003d3c:	c7efffff 	.word	0xc7efffff
 8003d40:	7ff00000 	.word	0x7ff00000
 8003d44:	00000000 	.word	0x00000000

08003d48 <__ieee754_pow>:
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	b093      	sub	sp, #76	; 0x4c
 8003d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d52:	9e03      	ldr	r6, [sp, #12]
 8003d54:	9a02      	ldr	r2, [sp, #8]
 8003d56:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003d5a:	ea55 0302 	orrs.w	r3, r5, r2
 8003d5e:	4607      	mov	r7, r0
 8003d60:	4688      	mov	r8, r1
 8003d62:	4682      	mov	sl, r0
 8003d64:	4689      	mov	r9, r1
 8003d66:	f000 849e 	beq.w	80046a6 <__ieee754_pow+0x95e>
 8003d6a:	4b77      	ldr	r3, [pc, #476]	; (8003f48 <__ieee754_pow+0x200>)
 8003d6c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8003d70:	429c      	cmp	r4, r3
 8003d72:	dc09      	bgt.n	8003d88 <__ieee754_pow+0x40>
 8003d74:	d103      	bne.n	8003d7e <__ieee754_pow+0x36>
 8003d76:	b938      	cbnz	r0, 8003d88 <__ieee754_pow+0x40>
 8003d78:	42a5      	cmp	r5, r4
 8003d7a:	dc0d      	bgt.n	8003d98 <__ieee754_pow+0x50>
 8003d7c:	e001      	b.n	8003d82 <__ieee754_pow+0x3a>
 8003d7e:	429d      	cmp	r5, r3
 8003d80:	dc02      	bgt.n	8003d88 <__ieee754_pow+0x40>
 8003d82:	429d      	cmp	r5, r3
 8003d84:	d10e      	bne.n	8003da4 <__ieee754_pow+0x5c>
 8003d86:	b16a      	cbz	r2, 8003da4 <__ieee754_pow+0x5c>
 8003d88:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003d8c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003d90:	ea54 030a 	orrs.w	r3, r4, sl
 8003d94:	f000 8487 	beq.w	80046a6 <__ieee754_pow+0x95e>
 8003d98:	486c      	ldr	r0, [pc, #432]	; (8003f4c <__ieee754_pow+0x204>)
 8003d9a:	b013      	add	sp, #76	; 0x4c
 8003d9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da0:	f000 bd7c 	b.w	800489c <nan>
 8003da4:	f1b9 0f00 	cmp.w	r9, #0
 8003da8:	da4f      	bge.n	8003e4a <__ieee754_pow+0x102>
 8003daa:	4b69      	ldr	r3, [pc, #420]	; (8003f50 <__ieee754_pow+0x208>)
 8003dac:	429d      	cmp	r5, r3
 8003dae:	dc4a      	bgt.n	8003e46 <__ieee754_pow+0xfe>
 8003db0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003db4:	429d      	cmp	r5, r3
 8003db6:	dd48      	ble.n	8003e4a <__ieee754_pow+0x102>
 8003db8:	152b      	asrs	r3, r5, #20
 8003dba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003dbe:	2b14      	cmp	r3, #20
 8003dc0:	dd24      	ble.n	8003e0c <__ieee754_pow+0xc4>
 8003dc2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003dc6:	fa22 f103 	lsr.w	r1, r2, r3
 8003dca:	fa01 f303 	lsl.w	r3, r1, r3
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d13b      	bne.n	8003e4a <__ieee754_pow+0x102>
 8003dd2:	f001 0101 	and.w	r1, r1, #1
 8003dd6:	f1c1 0302 	rsb	r3, r1, #2
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2a00      	cmp	r2, #0
 8003dde:	d156      	bne.n	8003e8e <__ieee754_pow+0x146>
 8003de0:	4b59      	ldr	r3, [pc, #356]	; (8003f48 <__ieee754_pow+0x200>)
 8003de2:	429d      	cmp	r5, r3
 8003de4:	d122      	bne.n	8003e2c <__ieee754_pow+0xe4>
 8003de6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003dea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003dee:	ea53 030a 	orrs.w	r3, r3, sl
 8003df2:	f000 8458 	beq.w	80046a6 <__ieee754_pow+0x95e>
 8003df6:	4b57      	ldr	r3, [pc, #348]	; (8003f54 <__ieee754_pow+0x20c>)
 8003df8:	429c      	cmp	r4, r3
 8003dfa:	dd28      	ble.n	8003e4e <__ieee754_pow+0x106>
 8003dfc:	2e00      	cmp	r6, #0
 8003dfe:	f280 8456 	bge.w	80046ae <__ieee754_pow+0x966>
 8003e02:	2000      	movs	r0, #0
 8003e04:	2100      	movs	r1, #0
 8003e06:	b013      	add	sp, #76	; 0x4c
 8003e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0c:	2a00      	cmp	r2, #0
 8003e0e:	d13c      	bne.n	8003e8a <__ieee754_pow+0x142>
 8003e10:	f1c3 0314 	rsb	r3, r3, #20
 8003e14:	fa45 f103 	asr.w	r1, r5, r3
 8003e18:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1c:	429d      	cmp	r5, r3
 8003e1e:	f040 844e 	bne.w	80046be <__ieee754_pow+0x976>
 8003e22:	f001 0101 	and.w	r1, r1, #1
 8003e26:	f1c1 0302 	rsb	r3, r1, #2
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	4b4a      	ldr	r3, [pc, #296]	; (8003f58 <__ieee754_pow+0x210>)
 8003e2e:	429d      	cmp	r5, r3
 8003e30:	d114      	bne.n	8003e5c <__ieee754_pow+0x114>
 8003e32:	2e00      	cmp	r6, #0
 8003e34:	f280 843f 	bge.w	80046b6 <__ieee754_pow+0x96e>
 8003e38:	463a      	mov	r2, r7
 8003e3a:	4643      	mov	r3, r8
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	4946      	ldr	r1, [pc, #280]	; (8003f58 <__ieee754_pow+0x210>)
 8003e40:	f7fc fc80 	bl	8000744 <__aeabi_ddiv>
 8003e44:	e7df      	b.n	8003e06 <__ieee754_pow+0xbe>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e7c7      	b.n	8003dda <__ieee754_pow+0x92>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e7c5      	b.n	8003dda <__ieee754_pow+0x92>
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	dad7      	bge.n	8003e02 <__ieee754_pow+0xba>
 8003e52:	9b03      	ldr	r3, [sp, #12]
 8003e54:	9802      	ldr	r0, [sp, #8]
 8003e56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003e5a:	e7d4      	b.n	8003e06 <__ieee754_pow+0xbe>
 8003e5c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8003e60:	d106      	bne.n	8003e70 <__ieee754_pow+0x128>
 8003e62:	463a      	mov	r2, r7
 8003e64:	4643      	mov	r3, r8
 8003e66:	4638      	mov	r0, r7
 8003e68:	4641      	mov	r1, r8
 8003e6a:	f7fc fb41 	bl	80004f0 <__aeabi_dmul>
 8003e6e:	e7ca      	b.n	8003e06 <__ieee754_pow+0xbe>
 8003e70:	4b3a      	ldr	r3, [pc, #232]	; (8003f5c <__ieee754_pow+0x214>)
 8003e72:	429e      	cmp	r6, r3
 8003e74:	d10b      	bne.n	8003e8e <__ieee754_pow+0x146>
 8003e76:	f1b9 0f00 	cmp.w	r9, #0
 8003e7a:	db08      	blt.n	8003e8e <__ieee754_pow+0x146>
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	4641      	mov	r1, r8
 8003e80:	b013      	add	sp, #76	; 0x4c
 8003e82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e86:	f000 bc51 	b.w	800472c <__ieee754_sqrt>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	4638      	mov	r0, r7
 8003e90:	4641      	mov	r1, r8
 8003e92:	f000 fcf7 	bl	8004884 <fabs>
 8003e96:	f1ba 0f00 	cmp.w	sl, #0
 8003e9a:	d125      	bne.n	8003ee8 <__ieee754_pow+0x1a0>
 8003e9c:	b124      	cbz	r4, 8003ea8 <__ieee754_pow+0x160>
 8003e9e:	4b2e      	ldr	r3, [pc, #184]	; (8003f58 <__ieee754_pow+0x210>)
 8003ea0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d11f      	bne.n	8003ee8 <__ieee754_pow+0x1a0>
 8003ea8:	2e00      	cmp	r6, #0
 8003eaa:	da05      	bge.n	8003eb8 <__ieee754_pow+0x170>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	4929      	ldr	r1, [pc, #164]	; (8003f58 <__ieee754_pow+0x210>)
 8003eb4:	f7fc fc46 	bl	8000744 <__aeabi_ddiv>
 8003eb8:	f1b9 0f00 	cmp.w	r9, #0
 8003ebc:	daa3      	bge.n	8003e06 <__ieee754_pow+0xbe>
 8003ebe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003ec2:	9b00      	ldr	r3, [sp, #0]
 8003ec4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003ec8:	4323      	orrs	r3, r4
 8003eca:	d106      	bne.n	8003eda <__ieee754_pow+0x192>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	f7fc f95a 	bl	8000188 <__aeabi_dsub>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	e7b2      	b.n	8003e40 <__ieee754_pow+0xf8>
 8003eda:	9b00      	ldr	r3, [sp, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d192      	bne.n	8003e06 <__ieee754_pow+0xbe>
 8003ee0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	e78e      	b.n	8003e06 <__ieee754_pow+0xbe>
 8003ee8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8003eec:	f109 33ff 	add.w	r3, r9, #4294967295
 8003ef0:	930c      	str	r3, [sp, #48]	; 0x30
 8003ef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ef4:	9b00      	ldr	r3, [sp, #0]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	d104      	bne.n	8003f04 <__ieee754_pow+0x1bc>
 8003efa:	463a      	mov	r2, r7
 8003efc:	4643      	mov	r3, r8
 8003efe:	4638      	mov	r0, r7
 8003f00:	4641      	mov	r1, r8
 8003f02:	e7e5      	b.n	8003ed0 <__ieee754_pow+0x188>
 8003f04:	4b16      	ldr	r3, [pc, #88]	; (8003f60 <__ieee754_pow+0x218>)
 8003f06:	429d      	cmp	r5, r3
 8003f08:	f340 80fc 	ble.w	8004104 <__ieee754_pow+0x3bc>
 8003f0c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003f10:	429d      	cmp	r5, r3
 8003f12:	dd0b      	ble.n	8003f2c <__ieee754_pow+0x1e4>
 8003f14:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <__ieee754_pow+0x20c>)
 8003f16:	429c      	cmp	r4, r3
 8003f18:	dc0e      	bgt.n	8003f38 <__ieee754_pow+0x1f0>
 8003f1a:	2e00      	cmp	r6, #0
 8003f1c:	f6bf af71 	bge.w	8003e02 <__ieee754_pow+0xba>
 8003f20:	a307      	add	r3, pc, #28	; (adr r3, 8003f40 <__ieee754_pow+0x1f8>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	4610      	mov	r0, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	e79e      	b.n	8003e6a <__ieee754_pow+0x122>
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <__ieee754_pow+0x21c>)
 8003f2e:	429c      	cmp	r4, r3
 8003f30:	ddf3      	ble.n	8003f1a <__ieee754_pow+0x1d2>
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <__ieee754_pow+0x210>)
 8003f34:	429c      	cmp	r4, r3
 8003f36:	dd17      	ble.n	8003f68 <__ieee754_pow+0x220>
 8003f38:	2e00      	cmp	r6, #0
 8003f3a:	dcf1      	bgt.n	8003f20 <__ieee754_pow+0x1d8>
 8003f3c:	e761      	b.n	8003e02 <__ieee754_pow+0xba>
 8003f3e:	bf00      	nop
 8003f40:	8800759c 	.word	0x8800759c
 8003f44:	7e37e43c 	.word	0x7e37e43c
 8003f48:	7ff00000 	.word	0x7ff00000
 8003f4c:	080052aa 	.word	0x080052aa
 8003f50:	433fffff 	.word	0x433fffff
 8003f54:	3fefffff 	.word	0x3fefffff
 8003f58:	3ff00000 	.word	0x3ff00000
 8003f5c:	3fe00000 	.word	0x3fe00000
 8003f60:	41e00000 	.word	0x41e00000
 8003f64:	3feffffe 	.word	0x3feffffe
 8003f68:	2200      	movs	r2, #0
 8003f6a:	4b61      	ldr	r3, [pc, #388]	; (80040f0 <__ieee754_pow+0x3a8>)
 8003f6c:	f7fc f90c 	bl	8000188 <__aeabi_dsub>
 8003f70:	a355      	add	r3, pc, #340	; (adr r3, 80040c8 <__ieee754_pow+0x380>)
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	4604      	mov	r4, r0
 8003f78:	460d      	mov	r5, r1
 8003f7a:	f7fc fab9 	bl	80004f0 <__aeabi_dmul>
 8003f7e:	a354      	add	r3, pc, #336	; (adr r3, 80040d0 <__ieee754_pow+0x388>)
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	4606      	mov	r6, r0
 8003f86:	460f      	mov	r7, r1
 8003f88:	4620      	mov	r0, r4
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	f7fc fab0 	bl	80004f0 <__aeabi_dmul>
 8003f90:	2200      	movs	r2, #0
 8003f92:	4682      	mov	sl, r0
 8003f94:	468b      	mov	fp, r1
 8003f96:	4b57      	ldr	r3, [pc, #348]	; (80040f4 <__ieee754_pow+0x3ac>)
 8003f98:	4620      	mov	r0, r4
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	f7fc faa8 	bl	80004f0 <__aeabi_dmul>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	a14c      	add	r1, pc, #304	; (adr r1, 80040d8 <__ieee754_pow+0x390>)
 8003fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003faa:	f7fc f8ed 	bl	8000188 <__aeabi_dsub>
 8003fae:	4622      	mov	r2, r4
 8003fb0:	462b      	mov	r3, r5
 8003fb2:	f7fc fa9d 	bl	80004f0 <__aeabi_dmul>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	2000      	movs	r0, #0
 8003fbc:	494e      	ldr	r1, [pc, #312]	; (80040f8 <__ieee754_pow+0x3b0>)
 8003fbe:	f7fc f8e3 	bl	8000188 <__aeabi_dsub>
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	4680      	mov	r8, r0
 8003fc8:	4689      	mov	r9, r1
 8003fca:	4620      	mov	r0, r4
 8003fcc:	4629      	mov	r1, r5
 8003fce:	f7fc fa8f 	bl	80004f0 <__aeabi_dmul>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	4649      	mov	r1, r9
 8003fda:	f7fc fa89 	bl	80004f0 <__aeabi_dmul>
 8003fde:	a340      	add	r3, pc, #256	; (adr r3, 80040e0 <__ieee754_pow+0x398>)
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f7fc fa84 	bl	80004f0 <__aeabi_dmul>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4650      	mov	r0, sl
 8003fee:	4659      	mov	r1, fp
 8003ff0:	f7fc f8ca 	bl	8000188 <__aeabi_dsub>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	460d      	mov	r5, r1
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	4639      	mov	r1, r7
 8004000:	f7fc f8c4 	bl	800018c <__adddf3>
 8004004:	2000      	movs	r0, #0
 8004006:	468b      	mov	fp, r1
 8004008:	4682      	mov	sl, r0
 800400a:	4632      	mov	r2, r6
 800400c:	463b      	mov	r3, r7
 800400e:	f7fc f8bb 	bl	8000188 <__aeabi_dsub>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4620      	mov	r0, r4
 8004018:	4629      	mov	r1, r5
 800401a:	f7fc f8b5 	bl	8000188 <__aeabi_dsub>
 800401e:	9b00      	ldr	r3, [sp, #0]
 8004020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004022:	3b01      	subs	r3, #1
 8004024:	4313      	orrs	r3, r2
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	4c33      	ldreq	r4, [pc, #204]	; (80040fc <__ieee754_pow+0x3b4>)
 800402e:	4c30      	ldrne	r4, [pc, #192]	; (80040f0 <__ieee754_pow+0x3a8>)
 8004030:	4606      	mov	r6, r0
 8004032:	e88d 0018 	stmia.w	sp, {r3, r4}
 8004036:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800403a:	2400      	movs	r4, #0
 800403c:	460f      	mov	r7, r1
 800403e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004042:	4622      	mov	r2, r4
 8004044:	462b      	mov	r3, r5
 8004046:	f7fc f89f 	bl	8000188 <__aeabi_dsub>
 800404a:	4652      	mov	r2, sl
 800404c:	465b      	mov	r3, fp
 800404e:	f7fc fa4f 	bl	80004f0 <__aeabi_dmul>
 8004052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004056:	4680      	mov	r8, r0
 8004058:	4689      	mov	r9, r1
 800405a:	4630      	mov	r0, r6
 800405c:	4639      	mov	r1, r7
 800405e:	f7fc fa47 	bl	80004f0 <__aeabi_dmul>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4640      	mov	r0, r8
 8004068:	4649      	mov	r1, r9
 800406a:	f7fc f88f 	bl	800018c <__adddf3>
 800406e:	4622      	mov	r2, r4
 8004070:	462b      	mov	r3, r5
 8004072:	4680      	mov	r8, r0
 8004074:	4689      	mov	r9, r1
 8004076:	4650      	mov	r0, sl
 8004078:	4659      	mov	r1, fp
 800407a:	f7fc fa39 	bl	80004f0 <__aeabi_dmul>
 800407e:	4604      	mov	r4, r0
 8004080:	460d      	mov	r5, r1
 8004082:	460b      	mov	r3, r1
 8004084:	4602      	mov	r2, r0
 8004086:	4649      	mov	r1, r9
 8004088:	4640      	mov	r0, r8
 800408a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800408e:	f7fc f87d 	bl	800018c <__adddf3>
 8004092:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <__ieee754_pow+0x3b8>)
 8004094:	4682      	mov	sl, r0
 8004096:	4299      	cmp	r1, r3
 8004098:	460f      	mov	r7, r1
 800409a:	460e      	mov	r6, r1
 800409c:	f340 82da 	ble.w	8004654 <__ieee754_pow+0x90c>
 80040a0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80040a4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80040a8:	4303      	orrs	r3, r0
 80040aa:	f000 81d5 	beq.w	8004458 <__ieee754_pow+0x710>
 80040ae:	a30e      	add	r3, pc, #56	; (adr r3, 80040e8 <__ieee754_pow+0x3a0>)
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040b8:	f7fc fa1a 	bl	80004f0 <__aeabi_dmul>
 80040bc:	a30a      	add	r3, pc, #40	; (adr r3, 80040e8 <__ieee754_pow+0x3a0>)
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	e6d2      	b.n	8003e6a <__ieee754_pow+0x122>
 80040c4:	f3af 8000 	nop.w
 80040c8:	60000000 	.word	0x60000000
 80040cc:	3ff71547 	.word	0x3ff71547
 80040d0:	f85ddf44 	.word	0xf85ddf44
 80040d4:	3e54ae0b 	.word	0x3e54ae0b
 80040d8:	55555555 	.word	0x55555555
 80040dc:	3fd55555 	.word	0x3fd55555
 80040e0:	652b82fe 	.word	0x652b82fe
 80040e4:	3ff71547 	.word	0x3ff71547
 80040e8:	8800759c 	.word	0x8800759c
 80040ec:	7e37e43c 	.word	0x7e37e43c
 80040f0:	3ff00000 	.word	0x3ff00000
 80040f4:	3fd00000 	.word	0x3fd00000
 80040f8:	3fe00000 	.word	0x3fe00000
 80040fc:	bff00000 	.word	0xbff00000
 8004100:	408fffff 	.word	0x408fffff
 8004104:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	da05      	bge.n	800411a <__ieee754_pow+0x3d2>
 800410e:	4bca      	ldr	r3, [pc, #808]	; (8004438 <__ieee754_pow+0x6f0>)
 8004110:	f7fc f9ee 	bl	80004f0 <__aeabi_dmul>
 8004114:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004118:	460c      	mov	r4, r1
 800411a:	1523      	asrs	r3, r4, #20
 800411c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004120:	4413      	add	r3, r2
 8004122:	9307      	str	r3, [sp, #28]
 8004124:	4bc5      	ldr	r3, [pc, #788]	; (800443c <__ieee754_pow+0x6f4>)
 8004126:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800412a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800412e:	429c      	cmp	r4, r3
 8004130:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004134:	dd08      	ble.n	8004148 <__ieee754_pow+0x400>
 8004136:	4bc2      	ldr	r3, [pc, #776]	; (8004440 <__ieee754_pow+0x6f8>)
 8004138:	429c      	cmp	r4, r3
 800413a:	f340 8154 	ble.w	80043e6 <__ieee754_pow+0x69e>
 800413e:	9b07      	ldr	r3, [sp, #28]
 8004140:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004144:	3301      	adds	r3, #1
 8004146:	9307      	str	r3, [sp, #28]
 8004148:	2600      	movs	r6, #0
 800414a:	4629      	mov	r1, r5
 800414c:	00f3      	lsls	r3, r6, #3
 800414e:	930d      	str	r3, [sp, #52]	; 0x34
 8004150:	4bbc      	ldr	r3, [pc, #752]	; (8004444 <__ieee754_pow+0x6fc>)
 8004152:	00f2      	lsls	r2, r6, #3
 8004154:	4413      	add	r3, r2
 8004156:	cb18      	ldmia	r3, {r3, r4}
 8004158:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800415c:	461a      	mov	r2, r3
 800415e:	4623      	mov	r3, r4
 8004160:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004164:	f7fc f810 	bl	8000188 <__aeabi_dsub>
 8004168:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800416c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004170:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004174:	f7fc f80a 	bl	800018c <__adddf3>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	2000      	movs	r0, #0
 800417e:	49b2      	ldr	r1, [pc, #712]	; (8004448 <__ieee754_pow+0x700>)
 8004180:	f7fc fae0 	bl	8000744 <__aeabi_ddiv>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800418c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004190:	f7fc f9ae 	bl	80004f0 <__aeabi_dmul>
 8004194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004198:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800419c:	f04f 0a00 	mov.w	sl, #0
 80041a0:	2200      	movs	r2, #0
 80041a2:	106d      	asrs	r5, r5, #1
 80041a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80041a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80041ac:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80041b0:	4659      	mov	r1, fp
 80041b2:	4650      	mov	r0, sl
 80041b4:	4614      	mov	r4, r2
 80041b6:	461d      	mov	r5, r3
 80041b8:	f7fc f99a 	bl	80004f0 <__aeabi_dmul>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80041c4:	f7fb ffe0 	bl	8000188 <__aeabi_dsub>
 80041c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80041cc:	4606      	mov	r6, r0
 80041ce:	460f      	mov	r7, r1
 80041d0:	4620      	mov	r0, r4
 80041d2:	4629      	mov	r1, r5
 80041d4:	f7fb ffd8 	bl	8000188 <__aeabi_dsub>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80041e0:	f7fb ffd2 	bl	8000188 <__aeabi_dsub>
 80041e4:	465b      	mov	r3, fp
 80041e6:	4652      	mov	r2, sl
 80041e8:	f7fc f982 	bl	80004f0 <__aeabi_dmul>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4630      	mov	r0, r6
 80041f2:	4639      	mov	r1, r7
 80041f4:	f7fb ffc8 	bl	8000188 <__aeabi_dsub>
 80041f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041fc:	f7fc f978 	bl	80004f0 <__aeabi_dmul>
 8004200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004204:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	f7fc f970 	bl	80004f0 <__aeabi_dmul>
 8004210:	a377      	add	r3, pc, #476	; (adr r3, 80043f0 <__ieee754_pow+0x6a8>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	4604      	mov	r4, r0
 8004218:	460d      	mov	r5, r1
 800421a:	f7fc f969 	bl	80004f0 <__aeabi_dmul>
 800421e:	a376      	add	r3, pc, #472	; (adr r3, 80043f8 <__ieee754_pow+0x6b0>)
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f7fb ffb2 	bl	800018c <__adddf3>
 8004228:	4622      	mov	r2, r4
 800422a:	462b      	mov	r3, r5
 800422c:	f7fc f960 	bl	80004f0 <__aeabi_dmul>
 8004230:	a373      	add	r3, pc, #460	; (adr r3, 8004400 <__ieee754_pow+0x6b8>)
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	f7fb ffa9 	bl	800018c <__adddf3>
 800423a:	4622      	mov	r2, r4
 800423c:	462b      	mov	r3, r5
 800423e:	f7fc f957 	bl	80004f0 <__aeabi_dmul>
 8004242:	a371      	add	r3, pc, #452	; (adr r3, 8004408 <__ieee754_pow+0x6c0>)
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f7fb ffa0 	bl	800018c <__adddf3>
 800424c:	4622      	mov	r2, r4
 800424e:	462b      	mov	r3, r5
 8004250:	f7fc f94e 	bl	80004f0 <__aeabi_dmul>
 8004254:	a36e      	add	r3, pc, #440	; (adr r3, 8004410 <__ieee754_pow+0x6c8>)
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f7fb ff97 	bl	800018c <__adddf3>
 800425e:	4622      	mov	r2, r4
 8004260:	462b      	mov	r3, r5
 8004262:	f7fc f945 	bl	80004f0 <__aeabi_dmul>
 8004266:	a36c      	add	r3, pc, #432	; (adr r3, 8004418 <__ieee754_pow+0x6d0>)
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f7fb ff8e 	bl	800018c <__adddf3>
 8004270:	4622      	mov	r2, r4
 8004272:	4606      	mov	r6, r0
 8004274:	460f      	mov	r7, r1
 8004276:	462b      	mov	r3, r5
 8004278:	4620      	mov	r0, r4
 800427a:	4629      	mov	r1, r5
 800427c:	f7fc f938 	bl	80004f0 <__aeabi_dmul>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4630      	mov	r0, r6
 8004286:	4639      	mov	r1, r7
 8004288:	f7fc f932 	bl	80004f0 <__aeabi_dmul>
 800428c:	4604      	mov	r4, r0
 800428e:	460d      	mov	r5, r1
 8004290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004294:	465b      	mov	r3, fp
 8004296:	4652      	mov	r2, sl
 8004298:	f7fb ff78 	bl	800018c <__adddf3>
 800429c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042a0:	f7fc f926 	bl	80004f0 <__aeabi_dmul>
 80042a4:	4622      	mov	r2, r4
 80042a6:	462b      	mov	r3, r5
 80042a8:	f7fb ff70 	bl	800018c <__adddf3>
 80042ac:	465b      	mov	r3, fp
 80042ae:	4606      	mov	r6, r0
 80042b0:	460f      	mov	r7, r1
 80042b2:	4652      	mov	r2, sl
 80042b4:	4659      	mov	r1, fp
 80042b6:	4650      	mov	r0, sl
 80042b8:	f7fc f91a 	bl	80004f0 <__aeabi_dmul>
 80042bc:	2200      	movs	r2, #0
 80042be:	4b63      	ldr	r3, [pc, #396]	; (800444c <__ieee754_pow+0x704>)
 80042c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80042c4:	f7fb ff62 	bl	800018c <__adddf3>
 80042c8:	4632      	mov	r2, r6
 80042ca:	463b      	mov	r3, r7
 80042cc:	f7fb ff5e 	bl	800018c <__adddf3>
 80042d0:	4650      	mov	r0, sl
 80042d2:	460d      	mov	r5, r1
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4650      	mov	r0, sl
 80042da:	4659      	mov	r1, fp
 80042dc:	f7fc f908 	bl	80004f0 <__aeabi_dmul>
 80042e0:	2200      	movs	r2, #0
 80042e2:	4680      	mov	r8, r0
 80042e4:	4689      	mov	r9, r1
 80042e6:	4b59      	ldr	r3, [pc, #356]	; (800444c <__ieee754_pow+0x704>)
 80042e8:	4629      	mov	r1, r5
 80042ea:	4650      	mov	r0, sl
 80042ec:	f7fb ff4c 	bl	8000188 <__aeabi_dsub>
 80042f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80042f4:	f7fb ff48 	bl	8000188 <__aeabi_dsub>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4630      	mov	r0, r6
 80042fe:	4639      	mov	r1, r7
 8004300:	f7fb ff42 	bl	8000188 <__aeabi_dsub>
 8004304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004308:	f7fc f8f2 	bl	80004f0 <__aeabi_dmul>
 800430c:	462b      	mov	r3, r5
 800430e:	4606      	mov	r6, r0
 8004310:	460f      	mov	r7, r1
 8004312:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004316:	4652      	mov	r2, sl
 8004318:	f7fc f8ea 	bl	80004f0 <__aeabi_dmul>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4630      	mov	r0, r6
 8004322:	4639      	mov	r1, r7
 8004324:	f7fb ff32 	bl	800018c <__adddf3>
 8004328:	4606      	mov	r6, r0
 800432a:	460f      	mov	r7, r1
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4640      	mov	r0, r8
 8004332:	4649      	mov	r1, r9
 8004334:	f7fb ff2a 	bl	800018c <__adddf3>
 8004338:	a339      	add	r3, pc, #228	; (adr r3, 8004420 <__ieee754_pow+0x6d8>)
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	4650      	mov	r0, sl
 8004340:	460d      	mov	r5, r1
 8004342:	f7fc f8d5 	bl	80004f0 <__aeabi_dmul>
 8004346:	4642      	mov	r2, r8
 8004348:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800434c:	464b      	mov	r3, r9
 800434e:	4629      	mov	r1, r5
 8004350:	4650      	mov	r0, sl
 8004352:	f7fb ff19 	bl	8000188 <__aeabi_dsub>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4630      	mov	r0, r6
 800435c:	4639      	mov	r1, r7
 800435e:	f7fb ff13 	bl	8000188 <__aeabi_dsub>
 8004362:	a331      	add	r3, pc, #196	; (adr r3, 8004428 <__ieee754_pow+0x6e0>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f7fc f8c2 	bl	80004f0 <__aeabi_dmul>
 800436c:	a330      	add	r3, pc, #192	; (adr r3, 8004430 <__ieee754_pow+0x6e8>)
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	4606      	mov	r6, r0
 8004374:	460f      	mov	r7, r1
 8004376:	4650      	mov	r0, sl
 8004378:	4629      	mov	r1, r5
 800437a:	f7fc f8b9 	bl	80004f0 <__aeabi_dmul>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4630      	mov	r0, r6
 8004384:	4639      	mov	r1, r7
 8004386:	f7fb ff01 	bl	800018c <__adddf3>
 800438a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800438c:	4b30      	ldr	r3, [pc, #192]	; (8004450 <__ieee754_pow+0x708>)
 800438e:	4413      	add	r3, r2
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f7fb fefa 	bl	800018c <__adddf3>
 8004398:	4604      	mov	r4, r0
 800439a:	9807      	ldr	r0, [sp, #28]
 800439c:	460d      	mov	r5, r1
 800439e:	f7fc f841 	bl	8000424 <__aeabi_i2d>
 80043a2:	4606      	mov	r6, r0
 80043a4:	460f      	mov	r7, r1
 80043a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043a8:	4b2a      	ldr	r3, [pc, #168]	; (8004454 <__ieee754_pow+0x70c>)
 80043aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043ae:	4413      	add	r3, r2
 80043b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043b4:	4622      	mov	r2, r4
 80043b6:	462b      	mov	r3, r5
 80043b8:	f7fb fee8 	bl	800018c <__adddf3>
 80043bc:	4642      	mov	r2, r8
 80043be:	464b      	mov	r3, r9
 80043c0:	f7fb fee4 	bl	800018c <__adddf3>
 80043c4:	4632      	mov	r2, r6
 80043c6:	463b      	mov	r3, r7
 80043c8:	f7fb fee0 	bl	800018c <__adddf3>
 80043cc:	4632      	mov	r2, r6
 80043ce:	463b      	mov	r3, r7
 80043d0:	4650      	mov	r0, sl
 80043d2:	468b      	mov	fp, r1
 80043d4:	f7fb fed8 	bl	8000188 <__aeabi_dsub>
 80043d8:	4642      	mov	r2, r8
 80043da:	464b      	mov	r3, r9
 80043dc:	f7fb fed4 	bl	8000188 <__aeabi_dsub>
 80043e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043e4:	e613      	b.n	800400e <__ieee754_pow+0x2c6>
 80043e6:	2601      	movs	r6, #1
 80043e8:	e6af      	b.n	800414a <__ieee754_pow+0x402>
 80043ea:	bf00      	nop
 80043ec:	f3af 8000 	nop.w
 80043f0:	4a454eef 	.word	0x4a454eef
 80043f4:	3fca7e28 	.word	0x3fca7e28
 80043f8:	93c9db65 	.word	0x93c9db65
 80043fc:	3fcd864a 	.word	0x3fcd864a
 8004400:	a91d4101 	.word	0xa91d4101
 8004404:	3fd17460 	.word	0x3fd17460
 8004408:	518f264d 	.word	0x518f264d
 800440c:	3fd55555 	.word	0x3fd55555
 8004410:	db6fabff 	.word	0xdb6fabff
 8004414:	3fdb6db6 	.word	0x3fdb6db6
 8004418:	33333303 	.word	0x33333303
 800441c:	3fe33333 	.word	0x3fe33333
 8004420:	e0000000 	.word	0xe0000000
 8004424:	3feec709 	.word	0x3feec709
 8004428:	dc3a03fd 	.word	0xdc3a03fd
 800442c:	3feec709 	.word	0x3feec709
 8004430:	145b01f5 	.word	0x145b01f5
 8004434:	be3e2fe0 	.word	0xbe3e2fe0
 8004438:	43400000 	.word	0x43400000
 800443c:	0003988e 	.word	0x0003988e
 8004440:	000bb679 	.word	0x000bb679
 8004444:	080052e0 	.word	0x080052e0
 8004448:	3ff00000 	.word	0x3ff00000
 800444c:	40080000 	.word	0x40080000
 8004450:	08005300 	.word	0x08005300
 8004454:	080052f0 	.word	0x080052f0
 8004458:	a39b      	add	r3, pc, #620	; (adr r3, 80046c8 <__ieee754_pow+0x980>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	4640      	mov	r0, r8
 8004460:	4649      	mov	r1, r9
 8004462:	f7fb fe93 	bl	800018c <__adddf3>
 8004466:	4622      	mov	r2, r4
 8004468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800446c:	462b      	mov	r3, r5
 800446e:	4650      	mov	r0, sl
 8004470:	4639      	mov	r1, r7
 8004472:	f7fb fe89 	bl	8000188 <__aeabi_dsub>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800447e:	f7fc fac7 	bl	8000a10 <__aeabi_dcmpgt>
 8004482:	2800      	cmp	r0, #0
 8004484:	f47f ae13 	bne.w	80040ae <__ieee754_pow+0x366>
 8004488:	4aa3      	ldr	r2, [pc, #652]	; (8004718 <__ieee754_pow+0x9d0>)
 800448a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800448e:	4293      	cmp	r3, r2
 8004490:	f340 8104 	ble.w	800469c <__ieee754_pow+0x954>
 8004494:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004498:	2000      	movs	r0, #0
 800449a:	151b      	asrs	r3, r3, #20
 800449c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80044a0:	fa4a f303 	asr.w	r3, sl, r3
 80044a4:	4433      	add	r3, r6
 80044a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80044aa:	4f9c      	ldr	r7, [pc, #624]	; (800471c <__ieee754_pow+0x9d4>)
 80044ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80044b0:	4117      	asrs	r7, r2
 80044b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80044b6:	ea23 0107 	bic.w	r1, r3, r7
 80044ba:	f1c2 0214 	rsb	r2, r2, #20
 80044be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80044c2:	fa4a fa02 	asr.w	sl, sl, r2
 80044c6:	2e00      	cmp	r6, #0
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4620      	mov	r0, r4
 80044ce:	4629      	mov	r1, r5
 80044d0:	bfb8      	it	lt
 80044d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80044d6:	f7fb fe57 	bl	8000188 <__aeabi_dsub>
 80044da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044e2:	4642      	mov	r2, r8
 80044e4:	464b      	mov	r3, r9
 80044e6:	f7fb fe51 	bl	800018c <__adddf3>
 80044ea:	a379      	add	r3, pc, #484	; (adr r3, 80046d0 <__ieee754_pow+0x988>)
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	2000      	movs	r0, #0
 80044f2:	460d      	mov	r5, r1
 80044f4:	4604      	mov	r4, r0
 80044f6:	f7fb fffb 	bl	80004f0 <__aeabi_dmul>
 80044fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044fe:	4606      	mov	r6, r0
 8004500:	460f      	mov	r7, r1
 8004502:	4620      	mov	r0, r4
 8004504:	4629      	mov	r1, r5
 8004506:	f7fb fe3f 	bl	8000188 <__aeabi_dsub>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4640      	mov	r0, r8
 8004510:	4649      	mov	r1, r9
 8004512:	f7fb fe39 	bl	8000188 <__aeabi_dsub>
 8004516:	a370      	add	r3, pc, #448	; (adr r3, 80046d8 <__ieee754_pow+0x990>)
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f7fb ffe8 	bl	80004f0 <__aeabi_dmul>
 8004520:	a36f      	add	r3, pc, #444	; (adr r3, 80046e0 <__ieee754_pow+0x998>)
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	4680      	mov	r8, r0
 8004528:	4689      	mov	r9, r1
 800452a:	4620      	mov	r0, r4
 800452c:	4629      	mov	r1, r5
 800452e:	f7fb ffdf 	bl	80004f0 <__aeabi_dmul>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4640      	mov	r0, r8
 8004538:	4649      	mov	r1, r9
 800453a:	f7fb fe27 	bl	800018c <__adddf3>
 800453e:	4604      	mov	r4, r0
 8004540:	460d      	mov	r5, r1
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4630      	mov	r0, r6
 8004548:	4639      	mov	r1, r7
 800454a:	f7fb fe1f 	bl	800018c <__adddf3>
 800454e:	4632      	mov	r2, r6
 8004550:	463b      	mov	r3, r7
 8004552:	4680      	mov	r8, r0
 8004554:	4689      	mov	r9, r1
 8004556:	f7fb fe17 	bl	8000188 <__aeabi_dsub>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4620      	mov	r0, r4
 8004560:	4629      	mov	r1, r5
 8004562:	f7fb fe11 	bl	8000188 <__aeabi_dsub>
 8004566:	4642      	mov	r2, r8
 8004568:	4606      	mov	r6, r0
 800456a:	460f      	mov	r7, r1
 800456c:	464b      	mov	r3, r9
 800456e:	4640      	mov	r0, r8
 8004570:	4649      	mov	r1, r9
 8004572:	f7fb ffbd 	bl	80004f0 <__aeabi_dmul>
 8004576:	a35c      	add	r3, pc, #368	; (adr r3, 80046e8 <__ieee754_pow+0x9a0>)
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	4604      	mov	r4, r0
 800457e:	460d      	mov	r5, r1
 8004580:	f7fb ffb6 	bl	80004f0 <__aeabi_dmul>
 8004584:	a35a      	add	r3, pc, #360	; (adr r3, 80046f0 <__ieee754_pow+0x9a8>)
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f7fb fdfd 	bl	8000188 <__aeabi_dsub>
 800458e:	4622      	mov	r2, r4
 8004590:	462b      	mov	r3, r5
 8004592:	f7fb ffad 	bl	80004f0 <__aeabi_dmul>
 8004596:	a358      	add	r3, pc, #352	; (adr r3, 80046f8 <__ieee754_pow+0x9b0>)
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f7fb fdf6 	bl	800018c <__adddf3>
 80045a0:	4622      	mov	r2, r4
 80045a2:	462b      	mov	r3, r5
 80045a4:	f7fb ffa4 	bl	80004f0 <__aeabi_dmul>
 80045a8:	a355      	add	r3, pc, #340	; (adr r3, 8004700 <__ieee754_pow+0x9b8>)
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f7fb fdeb 	bl	8000188 <__aeabi_dsub>
 80045b2:	4622      	mov	r2, r4
 80045b4:	462b      	mov	r3, r5
 80045b6:	f7fb ff9b 	bl	80004f0 <__aeabi_dmul>
 80045ba:	a353      	add	r3, pc, #332	; (adr r3, 8004708 <__ieee754_pow+0x9c0>)
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f7fb fde4 	bl	800018c <__adddf3>
 80045c4:	4622      	mov	r2, r4
 80045c6:	462b      	mov	r3, r5
 80045c8:	f7fb ff92 	bl	80004f0 <__aeabi_dmul>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4640      	mov	r0, r8
 80045d2:	4649      	mov	r1, r9
 80045d4:	f7fb fdd8 	bl	8000188 <__aeabi_dsub>
 80045d8:	4604      	mov	r4, r0
 80045da:	460d      	mov	r5, r1
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4640      	mov	r0, r8
 80045e2:	4649      	mov	r1, r9
 80045e4:	f7fb ff84 	bl	80004f0 <__aeabi_dmul>
 80045e8:	2200      	movs	r2, #0
 80045ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045f2:	4620      	mov	r0, r4
 80045f4:	4629      	mov	r1, r5
 80045f6:	f7fb fdc7 	bl	8000188 <__aeabi_dsub>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004602:	f7fc f89f 	bl	8000744 <__aeabi_ddiv>
 8004606:	4632      	mov	r2, r6
 8004608:	4604      	mov	r4, r0
 800460a:	460d      	mov	r5, r1
 800460c:	463b      	mov	r3, r7
 800460e:	4640      	mov	r0, r8
 8004610:	4649      	mov	r1, r9
 8004612:	f7fb ff6d 	bl	80004f0 <__aeabi_dmul>
 8004616:	4632      	mov	r2, r6
 8004618:	463b      	mov	r3, r7
 800461a:	f7fb fdb7 	bl	800018c <__adddf3>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4620      	mov	r0, r4
 8004624:	4629      	mov	r1, r5
 8004626:	f7fb fdaf 	bl	8000188 <__aeabi_dsub>
 800462a:	4642      	mov	r2, r8
 800462c:	464b      	mov	r3, r9
 800462e:	f7fb fdab 	bl	8000188 <__aeabi_dsub>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	2000      	movs	r0, #0
 8004638:	4939      	ldr	r1, [pc, #228]	; (8004720 <__ieee754_pow+0x9d8>)
 800463a:	f7fb fda5 	bl	8000188 <__aeabi_dsub>
 800463e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004642:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004646:	da2c      	bge.n	80046a2 <__ieee754_pow+0x95a>
 8004648:	4652      	mov	r2, sl
 800464a:	f000 f9b5 	bl	80049b8 <scalbn>
 800464e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004652:	e40a      	b.n	8003e6a <__ieee754_pow+0x122>
 8004654:	4b33      	ldr	r3, [pc, #204]	; (8004724 <__ieee754_pow+0x9dc>)
 8004656:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800465a:	429f      	cmp	r7, r3
 800465c:	f77f af14 	ble.w	8004488 <__ieee754_pow+0x740>
 8004660:	4b31      	ldr	r3, [pc, #196]	; (8004728 <__ieee754_pow+0x9e0>)
 8004662:	440b      	add	r3, r1
 8004664:	4303      	orrs	r3, r0
 8004666:	d00b      	beq.n	8004680 <__ieee754_pow+0x938>
 8004668:	a329      	add	r3, pc, #164	; (adr r3, 8004710 <__ieee754_pow+0x9c8>)
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004672:	f7fb ff3d 	bl	80004f0 <__aeabi_dmul>
 8004676:	a326      	add	r3, pc, #152	; (adr r3, 8004710 <__ieee754_pow+0x9c8>)
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f7ff bbf5 	b.w	8003e6a <__ieee754_pow+0x122>
 8004680:	4622      	mov	r2, r4
 8004682:	462b      	mov	r3, r5
 8004684:	f7fb fd80 	bl	8000188 <__aeabi_dsub>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4640      	mov	r0, r8
 800468e:	4649      	mov	r1, r9
 8004690:	f7fc f9aa 	bl	80009e8 <__aeabi_dcmple>
 8004694:	2800      	cmp	r0, #0
 8004696:	f43f aef7 	beq.w	8004488 <__ieee754_pow+0x740>
 800469a:	e7e5      	b.n	8004668 <__ieee754_pow+0x920>
 800469c:	f04f 0a00 	mov.w	sl, #0
 80046a0:	e71d      	b.n	80044de <__ieee754_pow+0x796>
 80046a2:	4621      	mov	r1, r4
 80046a4:	e7d3      	b.n	800464e <__ieee754_pow+0x906>
 80046a6:	2000      	movs	r0, #0
 80046a8:	491d      	ldr	r1, [pc, #116]	; (8004720 <__ieee754_pow+0x9d8>)
 80046aa:	f7ff bbac 	b.w	8003e06 <__ieee754_pow+0xbe>
 80046ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046b2:	f7ff bba8 	b.w	8003e06 <__ieee754_pow+0xbe>
 80046b6:	4638      	mov	r0, r7
 80046b8:	4641      	mov	r1, r8
 80046ba:	f7ff bba4 	b.w	8003e06 <__ieee754_pow+0xbe>
 80046be:	9200      	str	r2, [sp, #0]
 80046c0:	f7ff bbb4 	b.w	8003e2c <__ieee754_pow+0xe4>
 80046c4:	f3af 8000 	nop.w
 80046c8:	652b82fe 	.word	0x652b82fe
 80046cc:	3c971547 	.word	0x3c971547
 80046d0:	00000000 	.word	0x00000000
 80046d4:	3fe62e43 	.word	0x3fe62e43
 80046d8:	fefa39ef 	.word	0xfefa39ef
 80046dc:	3fe62e42 	.word	0x3fe62e42
 80046e0:	0ca86c39 	.word	0x0ca86c39
 80046e4:	be205c61 	.word	0xbe205c61
 80046e8:	72bea4d0 	.word	0x72bea4d0
 80046ec:	3e663769 	.word	0x3e663769
 80046f0:	c5d26bf1 	.word	0xc5d26bf1
 80046f4:	3ebbbd41 	.word	0x3ebbbd41
 80046f8:	af25de2c 	.word	0xaf25de2c
 80046fc:	3f11566a 	.word	0x3f11566a
 8004700:	16bebd93 	.word	0x16bebd93
 8004704:	3f66c16c 	.word	0x3f66c16c
 8004708:	5555553e 	.word	0x5555553e
 800470c:	3fc55555 	.word	0x3fc55555
 8004710:	c2f8f359 	.word	0xc2f8f359
 8004714:	01a56e1f 	.word	0x01a56e1f
 8004718:	3fe00000 	.word	0x3fe00000
 800471c:	000fffff 	.word	0x000fffff
 8004720:	3ff00000 	.word	0x3ff00000
 8004724:	4090cbff 	.word	0x4090cbff
 8004728:	3f6f3400 	.word	0x3f6f3400

0800472c <__ieee754_sqrt>:
 800472c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004730:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8004880 <__ieee754_sqrt+0x154>
 8004734:	4606      	mov	r6, r0
 8004736:	ea3e 0e01 	bics.w	lr, lr, r1
 800473a:	460d      	mov	r5, r1
 800473c:	4607      	mov	r7, r0
 800473e:	460a      	mov	r2, r1
 8004740:	460c      	mov	r4, r1
 8004742:	4603      	mov	r3, r0
 8004744:	d10f      	bne.n	8004766 <__ieee754_sqrt+0x3a>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	f7fb fed1 	bl	80004f0 <__aeabi_dmul>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4630      	mov	r0, r6
 8004754:	4629      	mov	r1, r5
 8004756:	f7fb fd19 	bl	800018c <__adddf3>
 800475a:	4606      	mov	r6, r0
 800475c:	460d      	mov	r5, r1
 800475e:	4630      	mov	r0, r6
 8004760:	4629      	mov	r1, r5
 8004762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004766:	2900      	cmp	r1, #0
 8004768:	dc0e      	bgt.n	8004788 <__ieee754_sqrt+0x5c>
 800476a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800476e:	ea5e 0707 	orrs.w	r7, lr, r7
 8004772:	d0f4      	beq.n	800475e <__ieee754_sqrt+0x32>
 8004774:	b141      	cbz	r1, 8004788 <__ieee754_sqrt+0x5c>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	f7fb fd05 	bl	8000188 <__aeabi_dsub>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	f7fb ffdf 	bl	8000744 <__aeabi_ddiv>
 8004786:	e7e8      	b.n	800475a <__ieee754_sqrt+0x2e>
 8004788:	1512      	asrs	r2, r2, #20
 800478a:	d10c      	bne.n	80047a6 <__ieee754_sqrt+0x7a>
 800478c:	2c00      	cmp	r4, #0
 800478e:	d06e      	beq.n	800486e <__ieee754_sqrt+0x142>
 8004790:	2100      	movs	r1, #0
 8004792:	02e6      	lsls	r6, r4, #11
 8004794:	d56f      	bpl.n	8004876 <__ieee754_sqrt+0x14a>
 8004796:	1e48      	subs	r0, r1, #1
 8004798:	1a12      	subs	r2, r2, r0
 800479a:	f1c1 0020 	rsb	r0, r1, #32
 800479e:	fa23 f000 	lsr.w	r0, r3, r0
 80047a2:	4304      	orrs	r4, r0
 80047a4:	408b      	lsls	r3, r1
 80047a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80047aa:	07d5      	lsls	r5, r2, #31
 80047ac:	f04f 0500 	mov.w	r5, #0
 80047b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80047b4:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80047b8:	bf42      	ittt	mi
 80047ba:	0064      	lslmi	r4, r4, #1
 80047bc:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 80047c0:	005b      	lslmi	r3, r3, #1
 80047c2:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 80047c6:	1050      	asrs	r0, r2, #1
 80047c8:	4421      	add	r1, r4
 80047ca:	2216      	movs	r2, #22
 80047cc:	462c      	mov	r4, r5
 80047ce:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	19a7      	adds	r7, r4, r6
 80047d6:	428f      	cmp	r7, r1
 80047d8:	bfde      	ittt	le
 80047da:	1bc9      	suble	r1, r1, r7
 80047dc:	19bc      	addle	r4, r7, r6
 80047de:	19ad      	addle	r5, r5, r6
 80047e0:	0049      	lsls	r1, r1, #1
 80047e2:	3a01      	subs	r2, #1
 80047e4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80047e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80047ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80047f0:	d1f0      	bne.n	80047d4 <__ieee754_sqrt+0xa8>
 80047f2:	f04f 0e20 	mov.w	lr, #32
 80047f6:	4694      	mov	ip, r2
 80047f8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80047fc:	42a1      	cmp	r1, r4
 80047fe:	eb06 070c 	add.w	r7, r6, ip
 8004802:	dc02      	bgt.n	800480a <__ieee754_sqrt+0xde>
 8004804:	d112      	bne.n	800482c <__ieee754_sqrt+0x100>
 8004806:	429f      	cmp	r7, r3
 8004808:	d810      	bhi.n	800482c <__ieee754_sqrt+0x100>
 800480a:	2f00      	cmp	r7, #0
 800480c:	eb07 0c06 	add.w	ip, r7, r6
 8004810:	da34      	bge.n	800487c <__ieee754_sqrt+0x150>
 8004812:	f1bc 0f00 	cmp.w	ip, #0
 8004816:	db31      	blt.n	800487c <__ieee754_sqrt+0x150>
 8004818:	f104 0801 	add.w	r8, r4, #1
 800481c:	1b09      	subs	r1, r1, r4
 800481e:	4644      	mov	r4, r8
 8004820:	429f      	cmp	r7, r3
 8004822:	bf88      	it	hi
 8004824:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004828:	1bdb      	subs	r3, r3, r7
 800482a:	4432      	add	r2, r6
 800482c:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8004830:	f1be 0e01 	subs.w	lr, lr, #1
 8004834:	4439      	add	r1, r7
 8004836:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800483a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800483e:	d1dd      	bne.n	80047fc <__ieee754_sqrt+0xd0>
 8004840:	430b      	orrs	r3, r1
 8004842:	d006      	beq.n	8004852 <__ieee754_sqrt+0x126>
 8004844:	1c54      	adds	r4, r2, #1
 8004846:	bf0b      	itete	eq
 8004848:	4672      	moveq	r2, lr
 800484a:	3201      	addne	r2, #1
 800484c:	3501      	addeq	r5, #1
 800484e:	f022 0201 	bicne.w	r2, r2, #1
 8004852:	106b      	asrs	r3, r5, #1
 8004854:	0852      	lsrs	r2, r2, #1
 8004856:	07e9      	lsls	r1, r5, #31
 8004858:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800485c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004860:	bf48      	it	mi
 8004862:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004866:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800486a:	4616      	mov	r6, r2
 800486c:	e777      	b.n	800475e <__ieee754_sqrt+0x32>
 800486e:	0adc      	lsrs	r4, r3, #11
 8004870:	3a15      	subs	r2, #21
 8004872:	055b      	lsls	r3, r3, #21
 8004874:	e78a      	b.n	800478c <__ieee754_sqrt+0x60>
 8004876:	0064      	lsls	r4, r4, #1
 8004878:	3101      	adds	r1, #1
 800487a:	e78a      	b.n	8004792 <__ieee754_sqrt+0x66>
 800487c:	46a0      	mov	r8, r4
 800487e:	e7cd      	b.n	800481c <__ieee754_sqrt+0xf0>
 8004880:	7ff00000 	.word	0x7ff00000

08004884 <fabs>:
 8004884:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004888:	4770      	bx	lr

0800488a <finite>:
 800488a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800488e:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8004892:	0fc0      	lsrs	r0, r0, #31
 8004894:	4770      	bx	lr

08004896 <matherr>:
 8004896:	2000      	movs	r0, #0
 8004898:	4770      	bx	lr
	...

0800489c <nan>:
 800489c:	2000      	movs	r0, #0
 800489e:	4901      	ldr	r1, [pc, #4]	; (80048a4 <nan+0x8>)
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	7ff80000 	.word	0x7ff80000

080048a8 <rint>:
 80048a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048aa:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80048ae:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 80048b2:	2f13      	cmp	r7, #19
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4684      	mov	ip, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	4605      	mov	r5, r0
 80048be:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80048c2:	dc56      	bgt.n	8004972 <rint+0xca>
 80048c4:	2f00      	cmp	r7, #0
 80048c6:	da29      	bge.n	800491c <rint+0x74>
 80048c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80048cc:	4301      	orrs	r1, r0
 80048ce:	d021      	beq.n	8004914 <rint+0x6c>
 80048d0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80048d4:	4305      	orrs	r5, r0
 80048d6:	426b      	negs	r3, r5
 80048d8:	432b      	orrs	r3, r5
 80048da:	0b1b      	lsrs	r3, r3, #12
 80048dc:	0c64      	lsrs	r4, r4, #17
 80048de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e2:	0464      	lsls	r4, r4, #17
 80048e4:	ea43 0104 	orr.w	r1, r3, r4
 80048e8:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <rint+0x108>)
 80048ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80048ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80048f2:	4622      	mov	r2, r4
 80048f4:	462b      	mov	r3, r5
 80048f6:	f7fb fc49 	bl	800018c <__adddf3>
 80048fa:	e9cd 0100 	strd	r0, r1, [sp]
 80048fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004902:	4622      	mov	r2, r4
 8004904:	462b      	mov	r3, r5
 8004906:	f7fb fc3f 	bl	8000188 <__aeabi_dsub>
 800490a:	4602      	mov	r2, r0
 800490c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004910:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	b003      	add	sp, #12
 800491a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800491c:	4925      	ldr	r1, [pc, #148]	; (80049b4 <rint+0x10c>)
 800491e:	4139      	asrs	r1, r7
 8004920:	ea03 0001 	and.w	r0, r3, r1
 8004924:	4310      	orrs	r0, r2
 8004926:	d0f5      	beq.n	8004914 <rint+0x6c>
 8004928:	084b      	lsrs	r3, r1, #1
 800492a:	ea04 0203 	and.w	r2, r4, r3
 800492e:	ea52 050c 	orrs.w	r5, r2, ip
 8004932:	d00a      	beq.n	800494a <rint+0xa2>
 8004934:	ea24 0303 	bic.w	r3, r4, r3
 8004938:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800493c:	2f13      	cmp	r7, #19
 800493e:	bf0c      	ite	eq
 8004940:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8004944:	2500      	movne	r5, #0
 8004946:	413c      	asrs	r4, r7
 8004948:	431c      	orrs	r4, r3
 800494a:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <rint+0x108>)
 800494c:	4621      	mov	r1, r4
 800494e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004952:	4628      	mov	r0, r5
 8004954:	e9d6 4500 	ldrd	r4, r5, [r6]
 8004958:	4622      	mov	r2, r4
 800495a:	462b      	mov	r3, r5
 800495c:	f7fb fc16 	bl	800018c <__adddf3>
 8004960:	e9cd 0100 	strd	r0, r1, [sp]
 8004964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004968:	4622      	mov	r2, r4
 800496a:	462b      	mov	r3, r5
 800496c:	f7fb fc0c 	bl	8000188 <__aeabi_dsub>
 8004970:	e006      	b.n	8004980 <rint+0xd8>
 8004972:	2f33      	cmp	r7, #51	; 0x33
 8004974:	dd07      	ble.n	8004986 <rint+0xde>
 8004976:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800497a:	d1cb      	bne.n	8004914 <rint+0x6c>
 800497c:	f7fb fc06 	bl	800018c <__adddf3>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	e7c6      	b.n	8004914 <rint+0x6c>
 8004986:	f04f 31ff 	mov.w	r1, #4294967295
 800498a:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 800498e:	fa21 f10e 	lsr.w	r1, r1, lr
 8004992:	4208      	tst	r0, r1
 8004994:	d0be      	beq.n	8004914 <rint+0x6c>
 8004996:	084b      	lsrs	r3, r1, #1
 8004998:	4218      	tst	r0, r3
 800499a:	bf1f      	itttt	ne
 800499c:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80049a0:	ea20 0303 	bicne.w	r3, r0, r3
 80049a4:	fa45 fe0e 	asrne.w	lr, r5, lr
 80049a8:	ea4e 0503 	orrne.w	r5, lr, r3
 80049ac:	e7cd      	b.n	800494a <rint+0xa2>
 80049ae:	bf00      	nop
 80049b0:	08005310 	.word	0x08005310
 80049b4:	000fffff 	.word	0x000fffff

080049b8 <scalbn>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	4616      	mov	r6, r2
 80049bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80049c0:	4604      	mov	r4, r0
 80049c2:	460d      	mov	r5, r1
 80049c4:	460b      	mov	r3, r1
 80049c6:	b98a      	cbnz	r2, 80049ec <scalbn+0x34>
 80049c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80049cc:	4303      	orrs	r3, r0
 80049ce:	d035      	beq.n	8004a3c <scalbn+0x84>
 80049d0:	2200      	movs	r2, #0
 80049d2:	4b2d      	ldr	r3, [pc, #180]	; (8004a88 <scalbn+0xd0>)
 80049d4:	f7fb fd8c 	bl	80004f0 <__aeabi_dmul>
 80049d8:	4a2c      	ldr	r2, [pc, #176]	; (8004a8c <scalbn+0xd4>)
 80049da:	4604      	mov	r4, r0
 80049dc:	4296      	cmp	r6, r2
 80049de:	460d      	mov	r5, r1
 80049e0:	460b      	mov	r3, r1
 80049e2:	da0e      	bge.n	8004a02 <scalbn+0x4a>
 80049e4:	a324      	add	r3, pc, #144	; (adr r3, 8004a78 <scalbn+0xc0>)
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	e01c      	b.n	8004a26 <scalbn+0x6e>
 80049ec:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80049f0:	42ba      	cmp	r2, r7
 80049f2:	d109      	bne.n	8004a08 <scalbn+0x50>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	f7fb fbc8 	bl	800018c <__adddf3>
 80049fc:	4604      	mov	r4, r0
 80049fe:	460d      	mov	r5, r1
 8004a00:	e01c      	b.n	8004a3c <scalbn+0x84>
 8004a02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004a06:	3a36      	subs	r2, #54	; 0x36
 8004a08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004a0c:	4432      	add	r2, r6
 8004a0e:	428a      	cmp	r2, r1
 8004a10:	dd0c      	ble.n	8004a2c <scalbn+0x74>
 8004a12:	4622      	mov	r2, r4
 8004a14:	462b      	mov	r3, r5
 8004a16:	a11a      	add	r1, pc, #104	; (adr r1, 8004a80 <scalbn+0xc8>)
 8004a18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a1c:	f000 f83a 	bl	8004a94 <copysign>
 8004a20:	a317      	add	r3, pc, #92	; (adr r3, 8004a80 <scalbn+0xc8>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f7fb fd63 	bl	80004f0 <__aeabi_dmul>
 8004a2a:	e7e7      	b.n	80049fc <scalbn+0x44>
 8004a2c:	2a00      	cmp	r2, #0
 8004a2e:	dd08      	ble.n	8004a42 <scalbn+0x8a>
 8004a30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	4629      	mov	r1, r5
 8004a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a42:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004a46:	da0b      	bge.n	8004a60 <scalbn+0xa8>
 8004a48:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004a4c:	429e      	cmp	r6, r3
 8004a4e:	4622      	mov	r2, r4
 8004a50:	462b      	mov	r3, r5
 8004a52:	dce0      	bgt.n	8004a16 <scalbn+0x5e>
 8004a54:	a108      	add	r1, pc, #32	; (adr r1, 8004a78 <scalbn+0xc0>)
 8004a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a5a:	f000 f81b 	bl	8004a94 <copysign>
 8004a5e:	e7c1      	b.n	80049e4 <scalbn+0x2c>
 8004a60:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a64:	3236      	adds	r2, #54	; 0x36
 8004a66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a6e:	4620      	mov	r0, r4
 8004a70:	4629      	mov	r1, r5
 8004a72:	2200      	movs	r2, #0
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <scalbn+0xd8>)
 8004a76:	e7d6      	b.n	8004a26 <scalbn+0x6e>
 8004a78:	c2f8f359 	.word	0xc2f8f359
 8004a7c:	01a56e1f 	.word	0x01a56e1f
 8004a80:	8800759c 	.word	0x8800759c
 8004a84:	7e37e43c 	.word	0x7e37e43c
 8004a88:	43500000 	.word	0x43500000
 8004a8c:	ffff3cb0 	.word	0xffff3cb0
 8004a90:	3c900000 	.word	0x3c900000

08004a94 <copysign>:
 8004a94:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a9c:	ea42 0103 	orr.w	r1, r2, r3
 8004aa0:	4770      	bx	lr
	...

08004aa4 <__errno>:
 8004aa4:	4b01      	ldr	r3, [pc, #4]	; (8004aac <__errno+0x8>)
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000004 	.word	0x20000004

08004ab0 <_sbrk>:
 8004ab0:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <_sbrk+0x14>)
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	b909      	cbnz	r1, 8004abc <_sbrk+0xc>
 8004ab8:	4903      	ldr	r1, [pc, #12]	; (8004ac8 <_sbrk+0x18>)
 8004aba:	6019      	str	r1, [r3, #0]
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	4402      	add	r2, r0
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	4770      	bx	lr
 8004ac4:	20000094 	.word	0x20000094
 8004ac8:	2000054c 	.word	0x2000054c

08004acc <_init>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	bf00      	nop
 8004ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad2:	bc08      	pop	{r3}
 8004ad4:	469e      	mov	lr, r3
 8004ad6:	4770      	bx	lr

08004ad8 <_fini>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	bf00      	nop
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr
